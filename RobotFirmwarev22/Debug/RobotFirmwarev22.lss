
RobotFirmwarev22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003078  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20400000  00403078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20400064  004030dc  00020064  2**2
                  ALLOC
  3 .heap         00000204  20400124  0040319c  00020064  2**0
                  ALLOC
  4 .stack        00000400  20400328  004033a0  00020064  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cd99  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003eea  00000000  00000000  0003ce84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a00f  00000000  00000000  00040d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c28  00000000  00000000  0004ad7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000af0  00000000  00000000  0004b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00044292  00000000  00000000  0004c495  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000198f1  00000000  00000000  00090727  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00150f60  00000000  00000000  000aa018  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002654  00000000  00000000  001faf78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 07 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     (.@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 79 0e 40 00     ..@...@.....y.@.
  40006c:	6d 0e 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     m.@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	11 10 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400064 	.word	0x20400064
  400184:	00000000 	.word	0x00000000
  400188:	00403078 	.word	0x00403078

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00403078 	.word	0x00403078
  4001c8:	20400068 	.word	0x20400068
  4001cc:	00403078 	.word	0x00403078
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004004f1 	.word	0x004004f1
  4001e4:	00401c69 	.word	0x00401c69

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00403078 	.word	0x00403078
  400238:	20400064 	.word	0x20400064
  40023c:	20400064 	.word	0x20400064
  400240:	20400124 	.word	0x20400124
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401c89 	.word	0x00401c89
  400250:	00401835 	.word	0x00401835

00400254 <EXTERNAL_IRQ_1_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400254:	4b03      	ldr	r3, [pc, #12]	; (400264 <EXTERNAL_IRQ_1_init+0x10>)
  400256:	2202      	movs	r2, #2
  400258:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40025a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40025c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400260:	601a      	str	r2, [r3, #0]
  400262:	4770      	bx	lr
  400264:	400e1000 	.word	0x400e1000

00400268 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400268:	4b03      	ldr	r3, [pc, #12]	; (400278 <EXTERNAL_IRQ_0_init+0x10>)
  40026a:	2220      	movs	r2, #32
  40026c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40026e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400274:	601a      	str	r2, [r3, #0]
  400276:	4770      	bx	lr
  400278:	400e0e00 	.word	0x400e0e00

0040027c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40027c:	4b18      	ldr	r3, [pc, #96]	; (4002e0 <PWM_0_PORT_init+0x64>)
  40027e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400284:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400286:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40028c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40028e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400292:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400294:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029a:	f022 0204 	bic.w	r2, r2, #4
  40029e:	671a      	str	r2, [r3, #112]	; 0x70
  4002a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a2:	f022 0204 	bic.w	r2, r2, #4
  4002a6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002a8:	2204      	movs	r2, #4
  4002aa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4002b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4002b6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ba:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  4002be:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4002c4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4002cc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4002d4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4002da:	605a      	str	r2, [r3, #4]
  4002dc:	4770      	bx	lr
  4002de:	bf00      	nop
  4002e0:	400e1400 	.word	0x400e1400

004002e4 <PWM_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002e4:	4b04      	ldr	r3, [pc, #16]	; (4002f8 <PWM_0_CLOCK_init+0x14>)
  4002e6:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002e8:	2b00      	cmp	r3, #0
  4002ea:	db03      	blt.n	4002f4 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4002f0:	4b01      	ldr	r3, [pc, #4]	; (4002f8 <PWM_0_CLOCK_init+0x14>)
  4002f2:	611a      	str	r2, [r3, #16]
  4002f4:	4770      	bx	lr
  4002f6:	bf00      	nop
  4002f8:	400e0600 	.word	0x400e0600

004002fc <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4002fc:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4002fe:	4b06      	ldr	r3, [pc, #24]	; (400318 <PWM_0_init+0x1c>)
  400300:	4798      	blx	r3
	PWM_0_PORT_init();
  400302:	4b06      	ldr	r3, [pc, #24]	; (40031c <PWM_0_init+0x20>)
  400304:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400306:	4b06      	ldr	r3, [pc, #24]	; (400320 <PWM_0_init+0x24>)
  400308:	4798      	blx	r3
  40030a:	4602      	mov	r2, r0
  40030c:	4905      	ldr	r1, [pc, #20]	; (400324 <PWM_0_init+0x28>)
  40030e:	4806      	ldr	r0, [pc, #24]	; (400328 <PWM_0_init+0x2c>)
  400310:	4b06      	ldr	r3, [pc, #24]	; (40032c <PWM_0_init+0x30>)
  400312:	4798      	blx	r3
  400314:	bd08      	pop	{r3, pc}
  400316:	bf00      	nop
  400318:	004002e5 	.word	0x004002e5
  40031c:	0040027d 	.word	0x0040027d
  400320:	004011d1 	.word	0x004011d1
  400324:	40020000 	.word	0x40020000
  400328:	204000b8 	.word	0x204000b8
  40032c:	0040086d 	.word	0x0040086d

00400330 <SPI_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400330:	4b11      	ldr	r3, [pc, #68]	; (400378 <SPI_0_PORT_init+0x48>)
  400332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400334:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  400338:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40033a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40033c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400340:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400342:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400346:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40034a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40034e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400350:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400352:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400356:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400358:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40035c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40035e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400360:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  400364:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400366:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400368:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40036c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40036e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400372:	605a      	str	r2, [r3, #4]
  400374:	4770      	bx	lr
  400376:	bf00      	nop
  400378:	400e1400 	.word	0x400e1400

0040037c <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40037c:	4b04      	ldr	r3, [pc, #16]	; (400390 <SPI_0_CLOCK_init+0x14>)
  40037e:	699b      	ldr	r3, [r3, #24]
  400380:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400384:	d103      	bne.n	40038e <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400386:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40038a:	4b01      	ldr	r3, [pc, #4]	; (400390 <SPI_0_CLOCK_init+0x14>)
  40038c:	611a      	str	r2, [r3, #16]
  40038e:	4770      	bx	lr
  400390:	400e0600 	.word	0x400e0600

00400394 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI0);
}

void SPI_0_init(void)
{
  400394:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  400396:	4b08      	ldr	r3, [pc, #32]	; (4003b8 <SPI_0_init+0x24>)
  400398:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  40039a:	4b08      	ldr	r3, [pc, #32]	; (4003bc <SPI_0_init+0x28>)
  40039c:	4798      	blx	r3
  40039e:	4c08      	ldr	r4, [pc, #32]	; (4003c0 <SPI_0_init+0x2c>)
  4003a0:	4601      	mov	r1, r0
  4003a2:	4620      	mov	r0, r4
  4003a4:	4b07      	ldr	r3, [pc, #28]	; (4003c4 <SPI_0_init+0x30>)
  4003a6:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4003a8:	4907      	ldr	r1, [pc, #28]	; (4003c8 <SPI_0_init+0x34>)
  4003aa:	4620      	mov	r0, r4
  4003ac:	4b07      	ldr	r3, [pc, #28]	; (4003cc <SPI_0_init+0x38>)
  4003ae:	4798      	blx	r3
	SPI_0_PORT_init();
  4003b0:	4b07      	ldr	r3, [pc, #28]	; (4003d0 <SPI_0_init+0x3c>)
  4003b2:	4798      	blx	r3
  4003b4:	bd10      	pop	{r4, pc}
  4003b6:	bf00      	nop
  4003b8:	0040037d 	.word	0x0040037d
  4003bc:	004013d1 	.word	0x004013d1
  4003c0:	204000e0 	.word	0x204000e0
  4003c4:	004008ed 	.word	0x004008ed
  4003c8:	40008000 	.word	0x40008000
  4003cc:	0040090d 	.word	0x0040090d
  4003d0:	00400331 	.word	0x00400331

004003d4 <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003d4:	4b0a      	ldr	r3, [pc, #40]	; (400400 <I2C_0_PORT_init+0x2c>)
  4003d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003d8:	f022 0210 	bic.w	r2, r2, #16
  4003dc:	671a      	str	r2, [r3, #112]	; 0x70
  4003de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003e0:	f022 0210 	bic.w	r2, r2, #16
  4003e4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003e6:	2210      	movs	r2, #16
  4003e8:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003ec:	f022 0208 	bic.w	r2, r2, #8
  4003f0:	671a      	str	r2, [r3, #112]	; 0x70
  4003f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003f4:	f022 0208 	bic.w	r2, r2, #8
  4003f8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003fa:	2208      	movs	r2, #8
  4003fc:	605a      	str	r2, [r3, #4]
  4003fe:	4770      	bx	lr
  400400:	400e0e00 	.word	0x400e0e00

00400404 <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400404:	4b04      	ldr	r3, [pc, #16]	; (400418 <I2C_0_CLOCK_init+0x14>)
  400406:	699b      	ldr	r3, [r3, #24]
  400408:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  40040c:	d103      	bne.n	400416 <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40040e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400412:	4b01      	ldr	r3, [pc, #4]	; (400418 <I2C_0_CLOCK_init+0x14>)
  400414:	611a      	str	r2, [r3, #16]
  400416:	4770      	bx	lr
  400418:	400e0600 	.word	0x400e0600

0040041c <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  40041c:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  40041e:	4b04      	ldr	r3, [pc, #16]	; (400430 <I2C_0_init+0x14>)
  400420:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400422:	4904      	ldr	r1, [pc, #16]	; (400434 <I2C_0_init+0x18>)
  400424:	4804      	ldr	r0, [pc, #16]	; (400438 <I2C_0_init+0x1c>)
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <I2C_0_init+0x20>)
  400428:	4798      	blx	r3

	I2C_0_PORT_init();
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <I2C_0_init+0x24>)
  40042c:	4798      	blx	r3
  40042e:	bd08      	pop	{r3, pc}
  400430:	00400405 	.word	0x00400405
  400434:	40018000 	.word	0x40018000
  400438:	204000f8 	.word	0x204000f8
  40043c:	004007b9 	.word	0x004007b9
  400440:	004003d5 	.word	0x004003d5

00400444 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400444:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400446:	4802      	ldr	r0, [pc, #8]	; (400450 <delay_driver_init+0xc>)
  400448:	4b02      	ldr	r3, [pc, #8]	; (400454 <delay_driver_init+0x10>)
  40044a:	4798      	blx	r3
  40044c:	bd08      	pop	{r3, pc}
  40044e:	bf00      	nop
  400450:	e000e010 	.word	0xe000e010
  400454:	004005dd 	.word	0x004005dd

00400458 <TARGET_IO_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400458:	4b0f      	ldr	r3, [pc, #60]	; (400498 <TARGET_IO_PORT_init+0x40>)
  40045a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40045c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400460:	671a      	str	r2, [r3, #112]	; 0x70
  400462:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400464:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400468:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40046a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40046e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400470:	4a0a      	ldr	r2, [pc, #40]	; (40049c <TARGET_IO_PORT_init+0x44>)
  400472:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400476:	f043 0310 	orr.w	r3, r3, #16
  40047a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40047e:	4b08      	ldr	r3, [pc, #32]	; (4004a0 <TARGET_IO_PORT_init+0x48>)
  400480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400482:	f042 0210 	orr.w	r2, r2, #16
  400486:	671a      	str	r2, [r3, #112]	; 0x70
  400488:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40048a:	f042 0210 	orr.w	r2, r2, #16
  40048e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400490:	2210      	movs	r2, #16
  400492:	605a      	str	r2, [r3, #4]
  400494:	4770      	bx	lr
  400496:	bf00      	nop
  400498:	400e0e00 	.word	0x400e0e00
  40049c:	40088000 	.word	0x40088000
  4004a0:	400e1000 	.word	0x400e1000

004004a4 <TARGET_IO_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004a4:	4b04      	ldr	r3, [pc, #16]	; (4004b8 <TARGET_IO_CLOCK_init+0x14>)
  4004a6:	699b      	ldr	r3, [r3, #24]
  4004a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4004ac:	d103      	bne.n	4004b6 <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4004b2:	4b01      	ldr	r3, [pc, #4]	; (4004b8 <TARGET_IO_CLOCK_init+0x14>)
  4004b4:	611a      	str	r2, [r3, #16]
  4004b6:	4770      	bx	lr
  4004b8:	400e0600 	.word	0x400e0600

004004bc <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void TARGET_IO_init(void)
{
  4004bc:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4004be:	4b06      	ldr	r3, [pc, #24]	; (4004d8 <TARGET_IO_init+0x1c>)
  4004c0:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4004c2:	4b06      	ldr	r3, [pc, #24]	; (4004dc <TARGET_IO_init+0x20>)
  4004c4:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, USART1, _usart_get_usart_sync());
  4004c6:	4b06      	ldr	r3, [pc, #24]	; (4004e0 <TARGET_IO_init+0x24>)
  4004c8:	4798      	blx	r3
  4004ca:	4602      	mov	r2, r0
  4004cc:	4905      	ldr	r1, [pc, #20]	; (4004e4 <TARGET_IO_init+0x28>)
  4004ce:	4806      	ldr	r0, [pc, #24]	; (4004e8 <TARGET_IO_init+0x2c>)
  4004d0:	4b06      	ldr	r3, [pc, #24]	; (4004ec <TARGET_IO_init+0x30>)
  4004d2:	4798      	blx	r3
  4004d4:	bd08      	pop	{r3, pc}
  4004d6:	bf00      	nop
  4004d8:	004004a5 	.word	0x004004a5
  4004dc:	00400459 	.word	0x00400459
  4004e0:	00401831 	.word	0x00401831
  4004e4:	40028000 	.word	0x40028000
  4004e8:	204000d4 	.word	0x204000d4
  4004ec:	00400b39 	.word	0x00400b39

004004f0 <system_init>:
}

void system_init(void)
{
  4004f0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4004f2:	4b27      	ldr	r3, [pc, #156]	; (400590 <system_init+0xa0>)
  4004f4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004f6:	4b27      	ldr	r3, [pc, #156]	; (400594 <system_init+0xa4>)
  4004f8:	699b      	ldr	r3, [r3, #24]
  4004fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4004fe:	d103      	bne.n	400508 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400500:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400504:	4b23      	ldr	r3, [pc, #140]	; (400594 <system_init+0xa4>)
  400506:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400508:	4b22      	ldr	r3, [pc, #136]	; (400594 <system_init+0xa4>)
  40050a:	699b      	ldr	r3, [r3, #24]
  40050c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400510:	d103      	bne.n	40051a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400512:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400516:	4b1f      	ldr	r3, [pc, #124]	; (400594 <system_init+0xa4>)
  400518:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40051a:	4b1e      	ldr	r3, [pc, #120]	; (400594 <system_init+0xa4>)
  40051c:	699b      	ldr	r3, [r3, #24]
  40051e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400522:	d103      	bne.n	40052c <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400528:	4b1a      	ldr	r3, [pc, #104]	; (400594 <system_init+0xa4>)
  40052a:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40052c:	4b19      	ldr	r3, [pc, #100]	; (400594 <system_init+0xa4>)
  40052e:	699b      	ldr	r3, [r3, #24]
  400530:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400534:	d103      	bne.n	40053e <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40053a:	4b16      	ldr	r3, [pc, #88]	; (400594 <system_init+0xa4>)
  40053c:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40053e:	4a16      	ldr	r2, [pc, #88]	; (400598 <system_init+0xa8>)
  400540:	6853      	ldr	r3, [r2, #4]
  400542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400546:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_SODR = mask;
  400548:	4b14      	ldr	r3, [pc, #80]	; (40059c <system_init+0xac>)
  40054a:	2201      	movs	r2, #1
  40054c:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_OER = mask;
  40054e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400550:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400556:	f44f 7200 	mov.w	r2, #512	; 0x200
  40055a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40055c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40055e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400560:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400568:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40056a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40056c:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(RF24_CE, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(RF24_CE, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_1_init();
  40056e:	4b0c      	ldr	r3, [pc, #48]	; (4005a0 <system_init+0xb0>)
  400570:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400572:	4b0c      	ldr	r3, [pc, #48]	; (4005a4 <system_init+0xb4>)
  400574:	4798      	blx	r3

	PWM_0_init();
  400576:	4b0c      	ldr	r3, [pc, #48]	; (4005a8 <system_init+0xb8>)
  400578:	4798      	blx	r3

	SPI_0_init();
  40057a:	4b0c      	ldr	r3, [pc, #48]	; (4005ac <system_init+0xbc>)
  40057c:	4798      	blx	r3

	I2C_0_init();
  40057e:	4b0c      	ldr	r3, [pc, #48]	; (4005b0 <system_init+0xc0>)
  400580:	4798      	blx	r3

	delay_driver_init();
  400582:	4b0c      	ldr	r3, [pc, #48]	; (4005b4 <system_init+0xc4>)
  400584:	4798      	blx	r3

	TARGET_IO_init();
  400586:	4b0c      	ldr	r3, [pc, #48]	; (4005b8 <system_init+0xc8>)
  400588:	4798      	blx	r3

	ext_irq_init();
  40058a:	4b0c      	ldr	r3, [pc, #48]	; (4005bc <system_init+0xcc>)
  40058c:	4798      	blx	r3
  40058e:	bd08      	pop	{r3, pc}
  400590:	00400bfd 	.word	0x00400bfd
  400594:	400e0600 	.word	0x400e0600
  400598:	400e1850 	.word	0x400e1850
  40059c:	400e0e00 	.word	0x400e0e00
  4005a0:	00400255 	.word	0x00400255
  4005a4:	00400269 	.word	0x00400269
  4005a8:	004002fd 	.word	0x004002fd
  4005ac:	00400395 	.word	0x00400395
  4005b0:	0040041d 	.word	0x0040041d
  4005b4:	00400445 	.word	0x00400445
  4005b8:	004004bd 	.word	0x004004bd
  4005bc:	00400655 	.word	0x00400655

004005c0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4005c0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4005c4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4005c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4005c8:	f3bf 8f5f 	dmb	sy
  4005cc:	4770      	bx	lr

004005ce <atomic_leave_critical>:
  4005ce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4005d2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4005d4:	f383 8810 	msr	PRIMASK, r3
  4005d8:	4770      	bx	lr
	...

004005dc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4005dc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <delay_init+0xc>)
  4005e0:	6018      	str	r0, [r3, #0]
  4005e2:	4b02      	ldr	r3, [pc, #8]	; (4005ec <delay_init+0x10>)
  4005e4:	4798      	blx	r3
  4005e6:	bd08      	pop	{r3, pc}
  4005e8:	20400080 	.word	0x20400080
  4005ec:	004013e9 	.word	0x004013e9

004005f0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4005f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4005f2:	4b04      	ldr	r3, [pc, #16]	; (400604 <delay_us+0x14>)
  4005f4:	681c      	ldr	r4, [r3, #0]
  4005f6:	4b04      	ldr	r3, [pc, #16]	; (400608 <delay_us+0x18>)
  4005f8:	4798      	blx	r3
  4005fa:	4601      	mov	r1, r0
  4005fc:	4620      	mov	r0, r4
  4005fe:	4b03      	ldr	r3, [pc, #12]	; (40060c <delay_us+0x1c>)
  400600:	4798      	blx	r3
  400602:	bd10      	pop	{r4, pc}
  400604:	20400080 	.word	0x20400080
  400608:	00400bf1 	.word	0x00400bf1
  40060c:	004013f5 	.word	0x004013f5

00400610 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400610:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400612:	2502      	movs	r5, #2
  400614:	2400      	movs	r4, #0

	while (upper >= lower) {
  400616:	e007      	b.n	400628 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400618:	4a0d      	ldr	r2, [pc, #52]	; (400650 <process_ext_irq+0x40>)
  40061a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40061e:	b1b3      	cbz	r3, 40064e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400620:	4798      	blx	r3
  400622:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400624:	3a01      	subs	r2, #1
  400626:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400628:	42ac      	cmp	r4, r5
  40062a:	d810      	bhi.n	40064e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  40062c:	192b      	adds	r3, r5, r4
  40062e:	105b      	asrs	r3, r3, #1
  400630:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400632:	2a01      	cmp	r2, #1
  400634:	d80b      	bhi.n	40064e <process_ext_irq+0x3e>
  400636:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400638:	4905      	ldr	r1, [pc, #20]	; (400650 <process_ext_irq+0x40>)
  40063a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40063e:	6849      	ldr	r1, [r1, #4]
  400640:	4281      	cmp	r1, r0
  400642:	d0e9      	beq.n	400618 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400644:	4281      	cmp	r1, r0
  400646:	d2ed      	bcs.n	400624 <process_ext_irq+0x14>
			lower = middle + 1;
  400648:	3201      	adds	r2, #1
  40064a:	b2d4      	uxtb	r4, r2
  40064c:	e7ec      	b.n	400628 <process_ext_irq+0x18>
  40064e:	bd38      	pop	{r3, r4, r5, pc}
  400650:	20400084 	.word	0x20400084

00400654 <ext_irq_init>:
{
  400654:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400656:	2300      	movs	r3, #0
  400658:	e00a      	b.n	400670 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40065a:	4a08      	ldr	r2, [pc, #32]	; (40067c <ext_irq_init+0x28>)
  40065c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400660:	f04f 30ff 	mov.w	r0, #4294967295
  400664:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400666:	2100      	movs	r1, #0
  400668:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40066c:	3301      	adds	r3, #1
  40066e:	b29b      	uxth	r3, r3
  400670:	2b01      	cmp	r3, #1
  400672:	d9f2      	bls.n	40065a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400674:	4802      	ldr	r0, [pc, #8]	; (400680 <ext_irq_init+0x2c>)
  400676:	4b03      	ldr	r3, [pc, #12]	; (400684 <ext_irq_init+0x30>)
  400678:	4798      	blx	r3
}
  40067a:	bd08      	pop	{r3, pc}
  40067c:	20400084 	.word	0x20400084
  400680:	00400611 	.word	0x00400611
  400684:	00400e85 	.word	0x00400e85

00400688 <ext_irq_register>:
{
  400688:	b5f0      	push	{r4, r5, r6, r7, lr}
  40068a:	b083      	sub	sp, #12
  40068c:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  40068e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400690:	2b01      	cmp	r3, #1
  400692:	d80e      	bhi.n	4006b2 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400694:	4618      	mov	r0, r3
  400696:	4a2e      	ldr	r2, [pc, #184]	; (400750 <ext_irq_register+0xc8>)
  400698:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40069c:	6852      	ldr	r2, [r2, #4]
  40069e:	42aa      	cmp	r2, r5
  4006a0:	d002      	beq.n	4006a8 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4006a2:	3301      	adds	r3, #1
  4006a4:	b2db      	uxtb	r3, r3
  4006a6:	e7f3      	b.n	400690 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4006a8:	4b29      	ldr	r3, [pc, #164]	; (400750 <ext_irq_register+0xc8>)
  4006aa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4006ae:	2701      	movs	r7, #1
			break;
  4006b0:	e000      	b.n	4006b4 <ext_irq_register+0x2c>
	bool    found = false;
  4006b2:	2700      	movs	r7, #0
	if (NULL == cb) {
  4006b4:	b159      	cbz	r1, 4006ce <ext_irq_register+0x46>
	if (!found) {
  4006b6:	2f00      	cmp	r7, #0
  4006b8:	d13d      	bne.n	400736 <ext_irq_register+0xae>
  4006ba:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4006bc:	2e01      	cmp	r6, #1
  4006be:	d813      	bhi.n	4006e8 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4006c0:	4b23      	ldr	r3, [pc, #140]	; (400750 <ext_irq_register+0xc8>)
  4006c2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4006c6:	b143      	cbz	r3, 4006da <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4006c8:	3601      	adds	r6, #1
  4006ca:	b2f6      	uxtb	r6, r6
  4006cc:	e7f6      	b.n	4006bc <ext_irq_register+0x34>
		if (!found) {
  4006ce:	2f00      	cmp	r7, #0
  4006d0:	d038      	beq.n	400744 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4006d2:	4628      	mov	r0, r5
  4006d4:	4b1f      	ldr	r3, [pc, #124]	; (400754 <ext_irq_register+0xcc>)
  4006d6:	4798      	blx	r3
  4006d8:	e032      	b.n	400740 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4006da:	4b1d      	ldr	r3, [pc, #116]	; (400750 <ext_irq_register+0xc8>)
  4006dc:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4006e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4006e4:	605d      	str	r5, [r3, #4]
				found           = true;
  4006e6:	2701      	movs	r7, #1
  4006e8:	2300      	movs	r3, #0
  4006ea:	e001      	b.n	4006f0 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4006ec:	3301      	adds	r3, #1
  4006ee:	b2db      	uxtb	r3, r3
  4006f0:	2b01      	cmp	r3, #1
  4006f2:	bf98      	it	ls
  4006f4:	2e01      	cmpls	r6, #1
  4006f6:	d81e      	bhi.n	400736 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4006f8:	46b6      	mov	lr, r6
  4006fa:	4a15      	ldr	r2, [pc, #84]	; (400750 <ext_irq_register+0xc8>)
  4006fc:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400700:	6848      	ldr	r0, [r1, #4]
  400702:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400706:	6852      	ldr	r2, [r2, #4]
  400708:	4290      	cmp	r0, r2
  40070a:	d2ef      	bcs.n	4006ec <ext_irq_register+0x64>
  40070c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400710:	d0ec      	beq.n	4006ec <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400712:	4c0f      	ldr	r4, [pc, #60]	; (400750 <ext_irq_register+0xc8>)
  400714:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400718:	e892 0003 	ldmia.w	r2, {r0, r1}
  40071c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400720:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400724:	e894 0003 	ldmia.w	r4, {r0, r1}
  400728:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  40072c:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400730:	e884 0003 	stmia.w	r4, {r0, r1}
  400734:	e7da      	b.n	4006ec <ext_irq_register+0x64>
	if (!found) {
  400736:	b147      	cbz	r7, 40074a <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400738:	2101      	movs	r1, #1
  40073a:	4628      	mov	r0, r5
  40073c:	4b05      	ldr	r3, [pc, #20]	; (400754 <ext_irq_register+0xcc>)
  40073e:	4798      	blx	r3
}
  400740:	b003      	add	sp, #12
  400742:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400744:	f06f 000c 	mvn.w	r0, #12
  400748:	e7fa      	b.n	400740 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  40074a:	f06f 000c 	mvn.w	r0, #12
  40074e:	e7f7      	b.n	400740 <ext_irq_register+0xb8>
  400750:	20400084 	.word	0x20400084
  400754:	00400ead 	.word	0x00400ead

00400758 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400758:	b510      	push	{r4, lr}
  40075a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  40075c:	8903      	ldrh	r3, [r0, #8]
  40075e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400762:	4614      	mov	r4, r2
  400764:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  400766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40076a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  40076e:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400770:	a901      	add	r1, sp, #4
  400772:	3814      	subs	r0, #20
  400774:	4b03      	ldr	r3, [pc, #12]	; (400784 <i2c_m_sync_write+0x2c>)
  400776:	4798      	blx	r3

	if (ret) {
  400778:	b910      	cbnz	r0, 400780 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
  40077a:	4620      	mov	r0, r4
  40077c:	b004      	add	sp, #16
  40077e:	bd10      	pop	{r4, pc}
		return ret;
  400780:	4604      	mov	r4, r0
  400782:	e7fa      	b.n	40077a <i2c_m_sync_write+0x22>
  400784:	004014b5 	.word	0x004014b5

00400788 <i2c_m_sync_read>:
{
  400788:	b510      	push	{r4, lr}
  40078a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
  40078c:	8903      	ldrh	r3, [r0, #8]
  40078e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  400792:	4614      	mov	r4, r2
  400794:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400796:	f248 0301 	movw	r3, #32769	; 0x8001
  40079a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  40079e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4007a0:	a901      	add	r1, sp, #4
  4007a2:	3814      	subs	r0, #20
  4007a4:	4b03      	ldr	r3, [pc, #12]	; (4007b4 <i2c_m_sync_read+0x2c>)
  4007a6:	4798      	blx	r3
	if (ret) {
  4007a8:	b910      	cbnz	r0, 4007b0 <i2c_m_sync_read+0x28>
}
  4007aa:	4620      	mov	r0, r4
  4007ac:	b004      	add	sp, #16
  4007ae:	bd10      	pop	{r4, pc}
		return ret;
  4007b0:	4604      	mov	r4, r0
  4007b2:	e7fa      	b.n	4007aa <i2c_m_sync_read+0x22>
  4007b4:	004014b5 	.word	0x004014b5

004007b8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4007b8:	b538      	push	{r3, r4, r5, lr}
  4007ba:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  4007bc:	4604      	mov	r4, r0
  4007be:	225e      	movs	r2, #94	; 0x5e
  4007c0:	4908      	ldr	r1, [pc, #32]	; (4007e4 <i2c_m_sync_init+0x2c>)
  4007c2:	3000      	adds	r0, #0
  4007c4:	bf18      	it	ne
  4007c6:	2001      	movne	r0, #1
  4007c8:	4b07      	ldr	r3, [pc, #28]	; (4007e8 <i2c_m_sync_init+0x30>)
  4007ca:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  4007cc:	4629      	mov	r1, r5
  4007ce:	4620      	mov	r0, r4
  4007d0:	4b06      	ldr	r3, [pc, #24]	; (4007ec <i2c_m_sync_init+0x34>)
  4007d2:	4798      	blx	r3
	if (init_status) {
  4007d4:	4603      	mov	r3, r0
  4007d6:	b918      	cbnz	r0, 4007e0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  4007d8:	4a05      	ldr	r2, [pc, #20]	; (4007f0 <i2c_m_sync_init+0x38>)
  4007da:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  4007dc:	4a05      	ldr	r2, [pc, #20]	; (4007f4 <i2c_m_sync_init+0x3c>)
  4007de:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  4007e0:	4618      	mov	r0, r3
  4007e2:	bd38      	pop	{r3, r4, r5, pc}
  4007e4:	00402db4 	.word	0x00402db4
  4007e8:	00400bad 	.word	0x00400bad
  4007ec:	0040146d 	.word	0x0040146d
  4007f0:	00400789 	.word	0x00400789
  4007f4:	00400759 	.word	0x00400759

004007f8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4007f8:	b570      	push	{r4, r5, r6, lr}
  4007fa:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4007fc:	4604      	mov	r4, r0
  4007fe:	460d      	mov	r5, r1
  400800:	2800      	cmp	r0, #0
  400802:	bf18      	it	ne
  400804:	2900      	cmpne	r1, #0
  400806:	bf14      	ite	ne
  400808:	2001      	movne	r0, #1
  40080a:	2000      	moveq	r0, #0
  40080c:	2234      	movs	r2, #52	; 0x34
  40080e:	4904      	ldr	r1, [pc, #16]	; (400820 <io_write+0x28>)
  400810:	4b04      	ldr	r3, [pc, #16]	; (400824 <io_write+0x2c>)
  400812:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400814:	6823      	ldr	r3, [r4, #0]
  400816:	4632      	mov	r2, r6
  400818:	4629      	mov	r1, r5
  40081a:	4620      	mov	r0, r4
  40081c:	4798      	blx	r3
}
  40081e:	bd70      	pop	{r4, r5, r6, pc}
  400820:	00402dd0 	.word	0x00402dd0
  400824:	00400bad 	.word	0x00400bad

00400828 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400828:	b570      	push	{r4, r5, r6, lr}
  40082a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40082c:	4604      	mov	r4, r0
  40082e:	460d      	mov	r5, r1
  400830:	2800      	cmp	r0, #0
  400832:	bf18      	it	ne
  400834:	2900      	cmpne	r1, #0
  400836:	bf14      	ite	ne
  400838:	2001      	movne	r0, #1
  40083a:	2000      	moveq	r0, #0
  40083c:	223d      	movs	r2, #61	; 0x3d
  40083e:	4904      	ldr	r1, [pc, #16]	; (400850 <io_read+0x28>)
  400840:	4b04      	ldr	r3, [pc, #16]	; (400854 <io_read+0x2c>)
  400842:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400844:	6863      	ldr	r3, [r4, #4]
  400846:	4632      	mov	r2, r6
  400848:	4629      	mov	r1, r5
  40084a:	4620      	mov	r0, r4
  40084c:	4798      	blx	r3
}
  40084e:	bd70      	pop	{r4, r5, r6, pc}
  400850:	00402dd0 	.word	0x00402dd0
  400854:	00400bad 	.word	0x00400bad

00400858 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400858:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40085a:	6943      	ldr	r3, [r0, #20]
  40085c:	b103      	cbz	r3, 400860 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40085e:	4798      	blx	r3
  400860:	bd08      	pop	{r3, pc}

00400862 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400862:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400864:	6983      	ldr	r3, [r0, #24]
  400866:	b103      	cbz	r3, 40086a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400868:	4798      	blx	r3
  40086a:	bd08      	pop	{r3, pc}

0040086c <pwm_init>:
{
  40086c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40086e:	4604      	mov	r4, r0
  400870:	460d      	mov	r5, r1
  400872:	2800      	cmp	r0, #0
  400874:	bf18      	it	ne
  400876:	2900      	cmpne	r1, #0
  400878:	bf14      	ite	ne
  40087a:	2001      	movne	r0, #1
  40087c:	2000      	moveq	r0, #0
  40087e:	2233      	movs	r2, #51	; 0x33
  400880:	4906      	ldr	r1, [pc, #24]	; (40089c <pwm_init+0x30>)
  400882:	4b07      	ldr	r3, [pc, #28]	; (4008a0 <pwm_init+0x34>)
  400884:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400886:	4629      	mov	r1, r5
  400888:	4620      	mov	r0, r4
  40088a:	4b06      	ldr	r3, [pc, #24]	; (4008a4 <pwm_init+0x38>)
  40088c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  40088e:	4b06      	ldr	r3, [pc, #24]	; (4008a8 <pwm_init+0x3c>)
  400890:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400892:	4b06      	ldr	r3, [pc, #24]	; (4008ac <pwm_init+0x40>)
  400894:	6063      	str	r3, [r4, #4]
}
  400896:	2000      	movs	r0, #0
  400898:	bd38      	pop	{r3, r4, r5, pc}
  40089a:	bf00      	nop
  40089c:	00402de4 	.word	0x00402de4
  4008a0:	00400bad 	.word	0x00400bad
  4008a4:	00401025 	.word	0x00401025
  4008a8:	00400859 	.word	0x00400859
  4008ac:	00400863 	.word	0x00400863

004008b0 <pwm_enable>:
{
  4008b0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4008b2:	4604      	mov	r4, r0
  4008b4:	224a      	movs	r2, #74	; 0x4a
  4008b6:	4909      	ldr	r1, [pc, #36]	; (4008dc <pwm_enable+0x2c>)
  4008b8:	3000      	adds	r0, #0
  4008ba:	bf18      	it	ne
  4008bc:	2001      	movne	r0, #1
  4008be:	4b08      	ldr	r3, [pc, #32]	; (4008e0 <pwm_enable+0x30>)
  4008c0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4008c2:	4620      	mov	r0, r4
  4008c4:	4b07      	ldr	r3, [pc, #28]	; (4008e4 <pwm_enable+0x34>)
  4008c6:	4798      	blx	r3
  4008c8:	b920      	cbnz	r0, 4008d4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4008ca:	4620      	mov	r0, r4
  4008cc:	4b06      	ldr	r3, [pc, #24]	; (4008e8 <pwm_enable+0x38>)
  4008ce:	4798      	blx	r3
	return ERR_NONE;
  4008d0:	2000      	movs	r0, #0
  4008d2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4008d4:	f06f 0010 	mvn.w	r0, #16
}
  4008d8:	bd10      	pop	{r4, pc}
  4008da:	bf00      	nop
  4008dc:	00402de4 	.word	0x00402de4
  4008e0:	00400bad 	.word	0x00400bad
  4008e4:	004011a1 	.word	0x004011a1
  4008e8:	0040115d 	.word	0x0040115d

004008ec <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  4008ec:	b538      	push	{r3, r4, r5, lr}
  4008ee:	460d      	mov	r5, r1
	ASSERT(spi);
  4008f0:	4604      	mov	r4, r0
  4008f2:	2239      	movs	r2, #57	; 0x39
  4008f4:	4903      	ldr	r1, [pc, #12]	; (400904 <spi_m_sync_set_func_ptr+0x18>)
  4008f6:	3000      	adds	r0, #0
  4008f8:	bf18      	it	ne
  4008fa:	2001      	movne	r0, #1
  4008fc:	4b02      	ldr	r3, [pc, #8]	; (400908 <spi_m_sync_set_func_ptr+0x1c>)
  4008fe:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400900:	6025      	str	r5, [r4, #0]
  400902:	bd38      	pop	{r3, r4, r5, pc}
  400904:	00402dfc 	.word	0x00402dfc
  400908:	00400bad 	.word	0x00400bad

0040090c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  40090c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40090e:	4604      	mov	r4, r0
  400910:	460d      	mov	r5, r1
  400912:	2800      	cmp	r0, #0
  400914:	bf18      	it	ne
  400916:	2900      	cmpne	r1, #0
  400918:	bf14      	ite	ne
  40091a:	2001      	movne	r0, #1
  40091c:	2000      	moveq	r0, #0
  40091e:	2240      	movs	r2, #64	; 0x40
  400920:	4909      	ldr	r1, [pc, #36]	; (400948 <spi_m_sync_init+0x3c>)
  400922:	4b0a      	ldr	r3, [pc, #40]	; (40094c <spi_m_sync_init+0x40>)
  400924:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400926:	4620      	mov	r0, r4
  400928:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  40092c:	4629      	mov	r1, r5
  40092e:	4b08      	ldr	r3, [pc, #32]	; (400950 <spi_m_sync_init+0x44>)
  400930:	4798      	blx	r3

	if (rc < 0) {
  400932:	2800      	cmp	r0, #0
  400934:	db07      	blt.n	400946 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40093a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  40093c:	4b05      	ldr	r3, [pc, #20]	; (400954 <spi_m_sync_init+0x48>)
  40093e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400940:	4b05      	ldr	r3, [pc, #20]	; (400958 <spi_m_sync_init+0x4c>)
  400942:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400944:	2000      	movs	r0, #0
}
  400946:	bd38      	pop	{r3, r4, r5, pc}
  400948:	00402dfc 	.word	0x00402dfc
  40094c:	00400bad 	.word	0x00400bad
  400950:	004011f5 	.word	0x004011f5
  400954:	00400a01 	.word	0x00400a01
  400958:	004009c5 	.word	0x004009c5

0040095c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  40095c:	b510      	push	{r4, lr}
	ASSERT(spi);
  40095e:	4604      	mov	r4, r0
  400960:	2257      	movs	r2, #87	; 0x57
  400962:	4905      	ldr	r1, [pc, #20]	; (400978 <spi_m_sync_enable+0x1c>)
  400964:	3000      	adds	r0, #0
  400966:	bf18      	it	ne
  400968:	2001      	movne	r0, #1
  40096a:	4b04      	ldr	r3, [pc, #16]	; (40097c <spi_m_sync_enable+0x20>)
  40096c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  40096e:	1d20      	adds	r0, r4, #4
  400970:	4b03      	ldr	r3, [pc, #12]	; (400980 <spi_m_sync_enable+0x24>)
  400972:	4798      	blx	r3
  400974:	bd10      	pop	{r4, pc}
  400976:	bf00      	nop
  400978:	00402dfc 	.word	0x00402dfc
  40097c:	00400bad 	.word	0x00400bad
  400980:	0040129d 	.word	0x0040129d

00400984 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400984:	b530      	push	{r4, r5, lr}
  400986:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400988:	4605      	mov	r5, r0
  40098a:	460c      	mov	r4, r1
  40098c:	2800      	cmp	r0, #0
  40098e:	bf18      	it	ne
  400990:	2900      	cmpne	r1, #0
  400992:	bf14      	ite	ne
  400994:	2001      	movne	r0, #1
  400996:	2000      	moveq	r0, #0
  400998:	22b3      	movs	r2, #179	; 0xb3
  40099a:	4907      	ldr	r1, [pc, #28]	; (4009b8 <spi_m_sync_transfer+0x34>)
  40099c:	4b07      	ldr	r3, [pc, #28]	; (4009bc <spi_m_sync_transfer+0x38>)
  40099e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4009a0:	6823      	ldr	r3, [r4, #0]
  4009a2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4009a4:	6863      	ldr	r3, [r4, #4]
  4009a6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4009a8:	68a3      	ldr	r3, [r4, #8]
  4009aa:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4009ac:	a901      	add	r1, sp, #4
  4009ae:	1d28      	adds	r0, r5, #4
  4009b0:	4b03      	ldr	r3, [pc, #12]	; (4009c0 <spi_m_sync_transfer+0x3c>)
  4009b2:	4798      	blx	r3
}
  4009b4:	b005      	add	sp, #20
  4009b6:	bd30      	pop	{r4, r5, pc}
  4009b8:	00402dfc 	.word	0x00402dfc
  4009bc:	00400bad 	.word	0x00400bad
  4009c0:	004012d1 	.word	0x004012d1

004009c4 <_spi_m_sync_io_write>:
{
  4009c4:	b570      	push	{r4, r5, r6, lr}
  4009c6:	b084      	sub	sp, #16
  4009c8:	460e      	mov	r6, r1
  4009ca:	4615      	mov	r5, r2
	ASSERT(io);
  4009cc:	4604      	mov	r4, r0
  4009ce:	22a3      	movs	r2, #163	; 0xa3
  4009d0:	4908      	ldr	r1, [pc, #32]	; (4009f4 <_spi_m_sync_io_write+0x30>)
  4009d2:	3000      	adds	r0, #0
  4009d4:	bf18      	it	ne
  4009d6:	2001      	movne	r0, #1
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <_spi_m_sync_io_write+0x34>)
  4009da:	4798      	blx	r3
	xfer.rxbuf = 0;
  4009dc:	2300      	movs	r3, #0
  4009de:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  4009e0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  4009e2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4009e4:	a901      	add	r1, sp, #4
  4009e6:	f1a4 000c 	sub.w	r0, r4, #12
  4009ea:	4b04      	ldr	r3, [pc, #16]	; (4009fc <_spi_m_sync_io_write+0x38>)
  4009ec:	4798      	blx	r3
}
  4009ee:	b004      	add	sp, #16
  4009f0:	bd70      	pop	{r4, r5, r6, pc}
  4009f2:	bf00      	nop
  4009f4:	00402dfc 	.word	0x00402dfc
  4009f8:	00400bad 	.word	0x00400bad
  4009fc:	00400985 	.word	0x00400985

00400a00 <_spi_m_sync_io_read>:
{
  400a00:	b570      	push	{r4, r5, r6, lr}
  400a02:	b084      	sub	sp, #16
  400a04:	460e      	mov	r6, r1
  400a06:	4615      	mov	r5, r2
	ASSERT(io);
  400a08:	4604      	mov	r4, r0
  400a0a:	2287      	movs	r2, #135	; 0x87
  400a0c:	4908      	ldr	r1, [pc, #32]	; (400a30 <_spi_m_sync_io_read+0x30>)
  400a0e:	3000      	adds	r0, #0
  400a10:	bf18      	it	ne
  400a12:	2001      	movne	r0, #1
  400a14:	4b07      	ldr	r3, [pc, #28]	; (400a34 <_spi_m_sync_io_read+0x34>)
  400a16:	4798      	blx	r3
	xfer.rxbuf = buf;
  400a18:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  400a1a:	2300      	movs	r3, #0
  400a1c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400a1e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400a20:	a901      	add	r1, sp, #4
  400a22:	f1a4 000c 	sub.w	r0, r4, #12
  400a26:	4b04      	ldr	r3, [pc, #16]	; (400a38 <_spi_m_sync_io_read+0x38>)
  400a28:	4798      	blx	r3
}
  400a2a:	b004      	add	sp, #16
  400a2c:	bd70      	pop	{r4, r5, r6, pc}
  400a2e:	bf00      	nop
  400a30:	00402dfc 	.word	0x00402dfc
  400a34:	00400bad 	.word	0x00400bad
  400a38:	00400985 	.word	0x00400985

00400a3c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400a3c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400a3e:	4604      	mov	r4, r0
  400a40:	460d      	mov	r5, r1
  400a42:	2800      	cmp	r0, #0
  400a44:	bf18      	it	ne
  400a46:	2900      	cmpne	r1, #0
  400a48:	bf14      	ite	ne
  400a4a:	2001      	movne	r0, #1
  400a4c:	2000      	moveq	r0, #0
  400a4e:	22bd      	movs	r2, #189	; 0xbd
  400a50:	4903      	ldr	r1, [pc, #12]	; (400a60 <spi_m_sync_get_io_descriptor+0x24>)
  400a52:	4b04      	ldr	r3, [pc, #16]	; (400a64 <spi_m_sync_get_io_descriptor+0x28>)
  400a54:	4798      	blx	r3
	*io = &spi->io;
  400a56:	340c      	adds	r4, #12
  400a58:	602c      	str	r4, [r5, #0]
	return 0;
}
  400a5a:	2000      	movs	r0, #0
  400a5c:	bd38      	pop	{r3, r4, r5, pc}
  400a5e:	bf00      	nop
  400a60:	00402dfc 	.word	0x00402dfc
  400a64:	00400bad 	.word	0x00400bad

00400a68 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a6a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a6c:	4605      	mov	r5, r0
  400a6e:	460f      	mov	r7, r1
  400a70:	2800      	cmp	r0, #0
  400a72:	bf18      	it	ne
  400a74:	2900      	cmpne	r1, #0
  400a76:	d002      	beq.n	400a7e <usart_sync_write+0x16>
  400a78:	bb0a      	cbnz	r2, 400abe <usart_sync_write+0x56>
  400a7a:	2000      	movs	r0, #0
  400a7c:	e000      	b.n	400a80 <usart_sync_write+0x18>
  400a7e:	2000      	movs	r0, #0
  400a80:	22f1      	movs	r2, #241	; 0xf1
  400a82:	4910      	ldr	r1, [pc, #64]	; (400ac4 <usart_sync_write+0x5c>)
  400a84:	4b10      	ldr	r3, [pc, #64]	; (400ac8 <usart_sync_write+0x60>)
  400a86:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400a88:	f105 0408 	add.w	r4, r5, #8
  400a8c:	4620      	mov	r0, r4
  400a8e:	4b0f      	ldr	r3, [pc, #60]	; (400acc <usart_sync_write+0x64>)
  400a90:	4798      	blx	r3
  400a92:	2800      	cmp	r0, #0
  400a94:	d0f8      	beq.n	400a88 <usart_sync_write+0x20>
  400a96:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400a98:	5d79      	ldrb	r1, [r7, r5]
  400a9a:	4620      	mov	r0, r4
  400a9c:	4b0c      	ldr	r3, [pc, #48]	; (400ad0 <usart_sync_write+0x68>)
  400a9e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400aa0:	4620      	mov	r0, r4
  400aa2:	4b0a      	ldr	r3, [pc, #40]	; (400acc <usart_sync_write+0x64>)
  400aa4:	4798      	blx	r3
  400aa6:	2800      	cmp	r0, #0
  400aa8:	d0fa      	beq.n	400aa0 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400aaa:	3501      	adds	r5, #1
  400aac:	42b5      	cmp	r5, r6
  400aae:	d3f3      	bcc.n	400a98 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400ab0:	4620      	mov	r0, r4
  400ab2:	4b08      	ldr	r3, [pc, #32]	; (400ad4 <usart_sync_write+0x6c>)
  400ab4:	4798      	blx	r3
  400ab6:	2800      	cmp	r0, #0
  400ab8:	d0fa      	beq.n	400ab0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400aba:	4628      	mov	r0, r5
  400abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400abe:	2001      	movs	r0, #1
  400ac0:	e7de      	b.n	400a80 <usart_sync_write+0x18>
  400ac2:	bf00      	nop
  400ac4:	00402e18 	.word	0x00402e18
  400ac8:	00400bad 	.word	0x00400bad
  400acc:	004017b9 	.word	0x004017b9
  400ad0:	00401771 	.word	0x00401771
  400ad4:	004017e1 	.word	0x004017e1

00400ad8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400adc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400ade:	4605      	mov	r5, r0
  400ae0:	4688      	mov	r8, r1
  400ae2:	2800      	cmp	r0, #0
  400ae4:	bf18      	it	ne
  400ae6:	2900      	cmpne	r1, #0
  400ae8:	d002      	beq.n	400af0 <usart_sync_read+0x18>
  400aea:	b9d2      	cbnz	r2, 400b22 <usart_sync_read+0x4a>
  400aec:	2000      	movs	r0, #0
  400aee:	e000      	b.n	400af2 <usart_sync_read+0x1a>
  400af0:	2000      	movs	r0, #0
  400af2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400af6:	490c      	ldr	r1, [pc, #48]	; (400b28 <usart_sync_read+0x50>)
  400af8:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <usart_sync_read+0x54>)
  400afa:	4798      	blx	r3
	uint32_t                      offset = 0;
  400afc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400afe:	f105 0408 	add.w	r4, r5, #8
  400b02:	4620      	mov	r0, r4
  400b04:	4b0a      	ldr	r3, [pc, #40]	; (400b30 <usart_sync_read+0x58>)
  400b06:	4798      	blx	r3
  400b08:	2800      	cmp	r0, #0
  400b0a:	d0f8      	beq.n	400afe <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400b0c:	4620      	mov	r0, r4
  400b0e:	4b09      	ldr	r3, [pc, #36]	; (400b34 <usart_sync_read+0x5c>)
  400b10:	4798      	blx	r3
  400b12:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400b16:	3601      	adds	r6, #1
  400b18:	42be      	cmp	r6, r7
  400b1a:	d3f0      	bcc.n	400afe <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400b1c:	4630      	mov	r0, r6
  400b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400b22:	2001      	movs	r0, #1
  400b24:	e7e5      	b.n	400af2 <usart_sync_read+0x1a>
  400b26:	bf00      	nop
  400b28:	00402e18 	.word	0x00402e18
  400b2c:	00400bad 	.word	0x00400bad
  400b30:	00401809 	.word	0x00401809
  400b34:	00401795 	.word	0x00401795

00400b38 <usart_sync_init>:
{
  400b38:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b3a:	4604      	mov	r4, r0
  400b3c:	460d      	mov	r5, r1
  400b3e:	2800      	cmp	r0, #0
  400b40:	bf18      	it	ne
  400b42:	2900      	cmpne	r1, #0
  400b44:	bf14      	ite	ne
  400b46:	2001      	movne	r0, #1
  400b48:	2000      	moveq	r0, #0
  400b4a:	2234      	movs	r2, #52	; 0x34
  400b4c:	4907      	ldr	r1, [pc, #28]	; (400b6c <usart_sync_init+0x34>)
  400b4e:	4b08      	ldr	r3, [pc, #32]	; (400b70 <usart_sync_init+0x38>)
  400b50:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400b52:	4629      	mov	r1, r5
  400b54:	f104 0008 	add.w	r0, r4, #8
  400b58:	4b06      	ldr	r3, [pc, #24]	; (400b74 <usart_sync_init+0x3c>)
  400b5a:	4798      	blx	r3
	if (init_status) {
  400b5c:	4603      	mov	r3, r0
  400b5e:	b918      	cbnz	r0, 400b68 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400b60:	4a05      	ldr	r2, [pc, #20]	; (400b78 <usart_sync_init+0x40>)
  400b62:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400b64:	4a05      	ldr	r2, [pc, #20]	; (400b7c <usart_sync_init+0x44>)
  400b66:	6022      	str	r2, [r4, #0]
}
  400b68:	4618      	mov	r0, r3
  400b6a:	bd38      	pop	{r3, r4, r5, pc}
  400b6c:	00402e18 	.word	0x00402e18
  400b70:	00400bad 	.word	0x00400bad
  400b74:	00401705 	.word	0x00401705
  400b78:	00400ad9 	.word	0x00400ad9
  400b7c:	00400a69 	.word	0x00400a69

00400b80 <usart_sync_enable>:
{
  400b80:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b82:	4604      	mov	r4, r0
  400b84:	2253      	movs	r2, #83	; 0x53
  400b86:	4906      	ldr	r1, [pc, #24]	; (400ba0 <usart_sync_enable+0x20>)
  400b88:	3000      	adds	r0, #0
  400b8a:	bf18      	it	ne
  400b8c:	2001      	movne	r0, #1
  400b8e:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <usart_sync_enable+0x24>)
  400b90:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400b92:	f104 0008 	add.w	r0, r4, #8
  400b96:	4b04      	ldr	r3, [pc, #16]	; (400ba8 <usart_sync_enable+0x28>)
  400b98:	4798      	blx	r3
}
  400b9a:	2000      	movs	r0, #0
  400b9c:	bd10      	pop	{r4, pc}
  400b9e:	bf00      	nop
  400ba0:	00402e18 	.word	0x00402e18
  400ba4:	00400bad 	.word	0x00400bad
  400ba8:	0040173d 	.word	0x0040173d

00400bac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400bac:	b900      	cbnz	r0, 400bb0 <assert+0x4>
		__asm("BKPT #0");
  400bae:	be00      	bkpt	0x0000
  400bb0:	4770      	bx	lr
	...

00400bb4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400bb4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400bb6:	4a06      	ldr	r2, [pc, #24]	; (400bd0 <_sbrk+0x1c>)
  400bb8:	6812      	ldr	r2, [r2, #0]
  400bba:	b122      	cbz	r2, 400bc6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bbc:	4a04      	ldr	r2, [pc, #16]	; (400bd0 <_sbrk+0x1c>)
  400bbe:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400bc0:	4403      	add	r3, r0
  400bc2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400bc4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400bc6:	4903      	ldr	r1, [pc, #12]	; (400bd4 <_sbrk+0x20>)
  400bc8:	4a01      	ldr	r2, [pc, #4]	; (400bd0 <_sbrk+0x1c>)
  400bca:	6011      	str	r1, [r2, #0]
  400bcc:	e7f6      	b.n	400bbc <_sbrk+0x8>
  400bce:	bf00      	nop
  400bd0:	20400094 	.word	0x20400094
  400bd4:	20400728 	.word	0x20400728

00400bd8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400bd8:	f04f 30ff 	mov.w	r0, #4294967295
  400bdc:	4770      	bx	lr

00400bde <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400be2:	604b      	str	r3, [r1, #4]

	return 0;
}
  400be4:	2000      	movs	r0, #0
  400be6:	4770      	bx	lr

00400be8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400be8:	2001      	movs	r0, #1
  400bea:	4770      	bx	lr

00400bec <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400bec:	2000      	movs	r0, #0
  400bee:	4770      	bx	lr

00400bf0 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400bf0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400bf4:	fb03 f000 	mul.w	r0, r3, r0
  400bf8:	4770      	bx	lr
	...

00400bfc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400bfc:	b500      	push	{lr}
  400bfe:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400c00:	a801      	add	r0, sp, #4
  400c02:	4b0e      	ldr	r3, [pc, #56]	; (400c3c <_init_chip+0x40>)
  400c04:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400c06:	4a0e      	ldr	r2, [pc, #56]	; (400c40 <_init_chip+0x44>)
  400c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c18:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400c1c:	a801      	add	r0, sp, #4
  400c1e:	4b09      	ldr	r3, [pc, #36]	; (400c44 <_init_chip+0x48>)
  400c20:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400c22:	4a09      	ldr	r2, [pc, #36]	; (400c48 <_init_chip+0x4c>)
  400c24:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400c2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400c2e:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400c30:	4b06      	ldr	r3, [pc, #24]	; (400c4c <_init_chip+0x50>)
  400c32:	4798      	blx	r3
}
  400c34:	b003      	add	sp, #12
  400c36:	f85d fb04 	ldr.w	pc, [sp], #4
  400c3a:	bf00      	nop
  400c3c:	004005c1 	.word	0x004005c1
  400c40:	e000ed00 	.word	0xe000ed00
  400c44:	004005cf 	.word	0x004005cf
  400c48:	400e0c00 	.word	0x400e0c00
  400c4c:	00400fa9 	.word	0x00400fa9

00400c50 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400c50:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400c52:	2500      	movs	r5, #0
  400c54:	428d      	cmp	r5, r1
  400c56:	d210      	bcs.n	400c7a <_ffs+0x2a>
  400c58:	2201      	movs	r2, #1
  400c5a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400c5c:	2b1f      	cmp	r3, #31
  400c5e:	d80a      	bhi.n	400c76 <_ffs+0x26>
			if (v[i] & bit) {
  400c60:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400c64:	4222      	tst	r2, r4
  400c66:	d102      	bne.n	400c6e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400c68:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400c6a:	3301      	adds	r3, #1
  400c6c:	e7f6      	b.n	400c5c <_ffs+0xc>
				return i * 32 + j;
  400c6e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400c72:	bc30      	pop	{r4, r5}
  400c74:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400c76:	3501      	adds	r5, #1
  400c78:	e7ec      	b.n	400c54 <_ffs+0x4>
	return -1;
  400c7a:	f04f 30ff 	mov.w	r0, #4294967295
  400c7e:	e7f8      	b.n	400c72 <_ffs+0x22>

00400c80 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400c80:	b510      	push	{r4, lr}
  400c82:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400c84:	2300      	movs	r3, #0
  400c86:	9301      	str	r3, [sp, #4]
  400c88:	9302      	str	r3, [sp, #8]
  400c8a:	9303      	str	r3, [sp, #12]
  400c8c:	9304      	str	r3, [sp, #16]
  400c8e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400c90:	4b21      	ldr	r3, [pc, #132]	; (400d18 <_ext_irq_handler+0x98>)
  400c92:	6818      	ldr	r0, [r3, #0]
  400c94:	22f8      	movs	r2, #248	; 0xf8
  400c96:	4921      	ldr	r1, [pc, #132]	; (400d1c <_ext_irq_handler+0x9c>)
  400c98:	3000      	adds	r0, #0
  400c9a:	bf18      	it	ne
  400c9c:	2001      	movne	r0, #1
  400c9e:	4b20      	ldr	r3, [pc, #128]	; (400d20 <_ext_irq_handler+0xa0>)
  400ca0:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400ca2:	4b20      	ldr	r3, [pc, #128]	; (400d24 <_ext_irq_handler+0xa4>)
  400ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400ca8:	4013      	ands	r3, r2
  400caa:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400cac:	491e      	ldr	r1, [pc, #120]	; (400d28 <_ext_irq_handler+0xa8>)
  400cae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400cb0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400cb2:	400a      	ands	r2, r1
  400cb4:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  400cb6:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400cb8:	e025      	b.n	400d06 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400cba:	4b17      	ldr	r3, [pc, #92]	; (400d18 <_ext_irq_handler+0x98>)
  400cbc:	681b      	ldr	r3, [r3, #0]
  400cbe:	4620      	mov	r0, r4
  400cc0:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400cc2:	1163      	asrs	r3, r4, #5
  400cc4:	f004 041f 	and.w	r4, r4, #31
  400cc8:	2201      	movs	r2, #1
  400cca:	fa02 f404 	lsl.w	r4, r2, r4
  400cce:	aa06      	add	r2, sp, #24
  400cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400cd4:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400cd8:	ea22 0204 	bic.w	r2, r2, r4
  400cdc:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400ce0:	2105      	movs	r1, #5
  400ce2:	a801      	add	r0, sp, #4
  400ce4:	4b11      	ldr	r3, [pc, #68]	; (400d2c <_ext_irq_handler+0xac>)
  400ce6:	4798      	blx	r3
  400ce8:	4604      	mov	r4, r0
		while (-1 != pos) {
  400cea:	f1b4 3fff 	cmp.w	r4, #4294967295
  400cee:	d1e4      	bne.n	400cba <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400cf0:	4a0c      	ldr	r2, [pc, #48]	; (400d24 <_ext_irq_handler+0xa4>)
  400cf2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400cf4:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400cf6:	400b      	ands	r3, r1
  400cf8:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400cfa:	490b      	ldr	r1, [pc, #44]	; (400d28 <_ext_irq_handler+0xa8>)
  400cfc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400cfe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400d00:	4002      	ands	r2, r0
  400d02:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  400d04:	4313      	orrs	r3, r2
	while (flag_total) {
  400d06:	b12b      	cbz	r3, 400d14 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400d08:	2105      	movs	r1, #5
  400d0a:	a801      	add	r0, sp, #4
  400d0c:	4b07      	ldr	r3, [pc, #28]	; (400d2c <_ext_irq_handler+0xac>)
  400d0e:	4798      	blx	r3
  400d10:	4604      	mov	r4, r0
		while (-1 != pos) {
  400d12:	e7ea      	b.n	400cea <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400d14:	b006      	add	sp, #24
  400d16:	bd10      	pop	{r4, pc}
  400d18:	20400098 	.word	0x20400098
  400d1c:	00402e74 	.word	0x00402e74
  400d20:	00400bad 	.word	0x00400bad
  400d24:	400e0e00 	.word	0x400e0e00
  400d28:	400e1000 	.word	0x400e1000
  400d2c:	00400c51 	.word	0x00400c51

00400d30 <_pio_get_hardware_index>:
{
  400d30:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d32:	4604      	mov	r4, r0
  400d34:	22d2      	movs	r2, #210	; 0xd2
  400d36:	4905      	ldr	r1, [pc, #20]	; (400d4c <_pio_get_hardware_index+0x1c>)
  400d38:	3000      	adds	r0, #0
  400d3a:	bf18      	it	ne
  400d3c:	2001      	movne	r0, #1
  400d3e:	4b04      	ldr	r3, [pc, #16]	; (400d50 <_pio_get_hardware_index+0x20>)
  400d40:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400d42:	4804      	ldr	r0, [pc, #16]	; (400d54 <_pio_get_hardware_index+0x24>)
  400d44:	4420      	add	r0, r4
}
  400d46:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400d4a:	bd10      	pop	{r4, pc}
  400d4c:	00402e74 	.word	0x00402e74
  400d50:	00400bad 	.word	0x00400bad
  400d54:	bff1f200 	.word	0xbff1f200

00400d58 <_pio_get_index>:
{
  400d58:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d5a:	4604      	mov	r4, r0
  400d5c:	22e0      	movs	r2, #224	; 0xe0
  400d5e:	490d      	ldr	r1, [pc, #52]	; (400d94 <_pio_get_index+0x3c>)
  400d60:	3000      	adds	r0, #0
  400d62:	bf18      	it	ne
  400d64:	2001      	movne	r0, #1
  400d66:	4b0c      	ldr	r3, [pc, #48]	; (400d98 <_pio_get_index+0x40>)
  400d68:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400d6a:	4620      	mov	r0, r4
  400d6c:	4b0b      	ldr	r3, [pc, #44]	; (400d9c <_pio_get_index+0x44>)
  400d6e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400d70:	2300      	movs	r3, #0
  400d72:	2b01      	cmp	r3, #1
  400d74:	d80b      	bhi.n	400d8e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400d76:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400d7a:	008a      	lsls	r2, r1, #2
  400d7c:	4908      	ldr	r1, [pc, #32]	; (400da0 <_pio_get_index+0x48>)
  400d7e:	5c8a      	ldrb	r2, [r1, r2]
  400d80:	4290      	cmp	r0, r2
  400d82:	d002      	beq.n	400d8a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400d84:	3301      	adds	r3, #1
  400d86:	b2db      	uxtb	r3, r3
  400d88:	e7f3      	b.n	400d72 <_pio_get_index+0x1a>
			return i;
  400d8a:	b258      	sxtb	r0, r3
  400d8c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400d8e:	f04f 30ff 	mov.w	r0, #4294967295
}
  400d92:	bd10      	pop	{r4, pc}
  400d94:	00402e74 	.word	0x00402e74
  400d98:	00400bad 	.word	0x00400bad
  400d9c:	00400d31 	.word	0x00400d31
  400da0:	00402e34 	.word	0x00402e34

00400da4 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400da4:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400da6:	4604      	mov	r4, r0
  400da8:	f240 1259 	movw	r2, #345	; 0x159
  400dac:	4929      	ldr	r1, [pc, #164]	; (400e54 <_pio_init+0xb0>)
  400dae:	3000      	adds	r0, #0
  400db0:	bf18      	it	ne
  400db2:	2001      	movne	r0, #1
  400db4:	4b28      	ldr	r3, [pc, #160]	; (400e58 <_pio_init+0xb4>)
  400db6:	4798      	blx	r3

	i = _pio_get_index(hw);
  400db8:	4620      	mov	r0, r4
  400dba:	4b28      	ldr	r3, [pc, #160]	; (400e5c <_pio_init+0xb8>)
  400dbc:	4798      	blx	r3
	if (i < 0) {
  400dbe:	2800      	cmp	r0, #0
  400dc0:	db43      	blt.n	400e4a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400dc2:	4d27      	ldr	r5, [pc, #156]	; (400e60 <_pio_init+0xbc>)
  400dc4:	00c2      	lsls	r2, r0, #3
  400dc6:	1a11      	subs	r1, r2, r0
  400dc8:	008b      	lsls	r3, r1, #2
  400dca:	442b      	add	r3, r5
  400dcc:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400dce:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400dd2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400dd4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400dd8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400dda:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400dde:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400de0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400de4:	1a10      	subs	r0, r2, r0
  400de6:	0083      	lsls	r3, r0, #2
  400de8:	442b      	add	r3, r5
  400dea:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400dec:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400df0:	4620      	mov	r0, r4
  400df2:	4b1c      	ldr	r3, [pc, #112]	; (400e64 <_pio_init+0xc0>)
  400df4:	4798      	blx	r3
  400df6:	4428      	add	r0, r5
  400df8:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400dfc:	2b00      	cmp	r3, #0
  400dfe:	db0c      	blt.n	400e1a <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e00:	095a      	lsrs	r2, r3, #5
  400e02:	f003 001f 	and.w	r0, r3, #31
  400e06:	2101      	movs	r1, #1
  400e08:	4081      	lsls	r1, r0
  400e0a:	3220      	adds	r2, #32
  400e0c:	4816      	ldr	r0, [pc, #88]	; (400e68 <_pio_init+0xc4>)
  400e0e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400e12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e16:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400e1a:	2b00      	cmp	r3, #0
  400e1c:	db08      	blt.n	400e30 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e1e:	095a      	lsrs	r2, r3, #5
  400e20:	f003 001f 	and.w	r0, r3, #31
  400e24:	2101      	movs	r1, #1
  400e26:	4081      	lsls	r1, r0
  400e28:	3260      	adds	r2, #96	; 0x60
  400e2a:	480f      	ldr	r0, [pc, #60]	; (400e68 <_pio_init+0xc4>)
  400e2c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  400e30:	2b00      	cmp	r3, #0
  400e32:	db0d      	blt.n	400e50 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e34:	0959      	lsrs	r1, r3, #5
  400e36:	f003 031f 	and.w	r3, r3, #31
  400e3a:	2201      	movs	r2, #1
  400e3c:	fa02 f303 	lsl.w	r3, r2, r3
  400e40:	4a09      	ldr	r2, [pc, #36]	; (400e68 <_pio_init+0xc4>)
  400e42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  400e46:	2000      	movs	r0, #0
  400e48:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  400e4a:	f06f 0010 	mvn.w	r0, #16
  400e4e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  400e50:	2000      	movs	r0, #0
}
  400e52:	bd38      	pop	{r3, r4, r5, pc}
  400e54:	00402e74 	.word	0x00402e74
  400e58:	00400bad 	.word	0x00400bad
  400e5c:	00400d59 	.word	0x00400d59
  400e60:	00402e34 	.word	0x00402e34
  400e64:	00400d31 	.word	0x00400d31
  400e68:	e000e100 	.word	0xe000e100

00400e6c <PIOB_Handler>:
{
  400e6c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400e6e:	4b01      	ldr	r3, [pc, #4]	; (400e74 <PIOB_Handler+0x8>)
  400e70:	4798      	blx	r3
  400e72:	bd08      	pop	{r3, pc}
  400e74:	00400c81 	.word	0x00400c81

00400e78 <PIOA_Handler>:
{
  400e78:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400e7a:	4b01      	ldr	r3, [pc, #4]	; (400e80 <PIOA_Handler+0x8>)
  400e7c:	4798      	blx	r3
  400e7e:	bd08      	pop	{r3, pc}
  400e80:	00400c81 	.word	0x00400c81

00400e84 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  400e84:	b538      	push	{r3, r4, r5, lr}
  400e86:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  400e88:	4804      	ldr	r0, [pc, #16]	; (400e9c <_ext_irq_init+0x18>)
  400e8a:	4c05      	ldr	r4, [pc, #20]	; (400ea0 <_ext_irq_init+0x1c>)
  400e8c:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  400e8e:	4805      	ldr	r0, [pc, #20]	; (400ea4 <_ext_irq_init+0x20>)
  400e90:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  400e92:	4b05      	ldr	r3, [pc, #20]	; (400ea8 <_ext_irq_init+0x24>)
  400e94:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  400e96:	2000      	movs	r0, #0
  400e98:	bd38      	pop	{r3, r4, r5, pc}
  400e9a:	bf00      	nop
  400e9c:	400e0e00 	.word	0x400e0e00
  400ea0:	00400da5 	.word	0x00400da5
  400ea4:	400e1000 	.word	0x400e1000
  400ea8:	20400098 	.word	0x20400098

00400eac <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  400eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400eb0:	4604      	mov	r4, r0
  400eb2:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  400eb4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 400f08 <_ext_irq_enable+0x5c>
  400eb8:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  400ebc:	4641      	mov	r1, r8
  400ebe:	289f      	cmp	r0, #159	; 0x9f
  400ec0:	bf8c      	ite	hi
  400ec2:	2000      	movhi	r0, #0
  400ec4:	2001      	movls	r0, #1
  400ec6:	4e0e      	ldr	r6, [pc, #56]	; (400f00 <_ext_irq_enable+0x54>)
  400ec8:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  400eca:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  400ecc:	22c3      	movs	r2, #195	; 0xc3
  400ece:	4641      	mov	r1, r8
  400ed0:	2d9f      	cmp	r5, #159	; 0x9f
  400ed2:	bf8c      	ite	hi
  400ed4:	2000      	movhi	r0, #0
  400ed6:	2001      	movls	r0, #1
  400ed8:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  400eda:	096d      	lsrs	r5, r5, #5
  400edc:	4b09      	ldr	r3, [pc, #36]	; (400f04 <_ext_irq_enable+0x58>)
  400ede:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  400ee2:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  400ee6:	b937      	cbnz	r7, 400ef6 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  400ee8:	2301      	movs	r3, #1
  400eea:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  400eee:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  400ef0:	2000      	movs	r0, #0
  400ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  400ef6:	2301      	movs	r3, #1
  400ef8:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  400efc:	642c      	str	r4, [r5, #64]	; 0x40
  400efe:	e7f7      	b.n	400ef0 <_ext_irq_enable+0x44>
  400f00:	00400bad 	.word	0x00400bad
  400f04:	400e0e00 	.word	0x400e0e00
  400f08:	00402e74 	.word	0x00402e74

00400f0c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400f0c:	490e      	ldr	r1, [pc, #56]	; (400f48 <_pmc_init_sources+0x3c>)
  400f0e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400f10:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400f14:	4b0d      	ldr	r3, [pc, #52]	; (400f4c <_pmc_init_sources+0x40>)
  400f16:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400f18:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400f1a:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <_pmc_init_sources+0x3c>)
  400f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400f1e:	f013 0f01 	tst.w	r3, #1
  400f22:	d0fa      	beq.n	400f1a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400f24:	4b08      	ldr	r3, [pc, #32]	; (400f48 <_pmc_init_sources+0x3c>)
  400f26:	6a19      	ldr	r1, [r3, #32]
  400f28:	4a09      	ldr	r2, [pc, #36]	; (400f50 <_pmc_init_sources+0x44>)
  400f2a:	430a      	orrs	r2, r1
  400f2c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400f30:	4a08      	ldr	r2, [pc, #32]	; (400f54 <_pmc_init_sources+0x48>)
  400f32:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400f34:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400f36:	4a08      	ldr	r2, [pc, #32]	; (400f58 <_pmc_init_sources+0x4c>)
  400f38:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400f3a:	4b03      	ldr	r3, [pc, #12]	; (400f48 <_pmc_init_sources+0x3c>)
  400f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400f3e:	f013 0f02 	tst.w	r3, #2
  400f42:	d0fa      	beq.n	400f3a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400f44:	4770      	bx	lr
  400f46:	bf00      	nop
  400f48:	400e0600 	.word	0x400e0600
  400f4c:	00373e01 	.word	0x00373e01
  400f50:	01370000 	.word	0x01370000
  400f54:	f800ffff 	.word	0xf800ffff
  400f58:	20183f01 	.word	0x20183f01

00400f5c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400f5c:	4a11      	ldr	r2, [pc, #68]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400f64:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400f66:	4b0f      	ldr	r3, [pc, #60]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400f6a:	f013 0f08 	tst.w	r3, #8
  400f6e:	d0fa      	beq.n	400f66 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400f70:	4a0c      	ldr	r2, [pc, #48]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400f7c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400f7e:	4b09      	ldr	r3, [pc, #36]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400f82:	f013 0f08 	tst.w	r3, #8
  400f86:	d0fa      	beq.n	400f7e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400f88:	4a06      	ldr	r2, [pc, #24]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400f8c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400f90:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400f94:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400f96:	4b03      	ldr	r3, [pc, #12]	; (400fa4 <_pmc_init_master_clock+0x48>)
  400f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400f9a:	f013 0f08 	tst.w	r3, #8
  400f9e:	d0fa      	beq.n	400f96 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop
  400fa4:	400e0600 	.word	0x400e0600

00400fa8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400fa8:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400faa:	4b02      	ldr	r3, [pc, #8]	; (400fb4 <_pmc_init+0xc>)
  400fac:	4798      	blx	r3
	_pmc_init_master_clock();
  400fae:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <_pmc_init+0x10>)
  400fb0:	4798      	blx	r3
  400fb2:	bd08      	pop	{r3, pc}
  400fb4:	00400f0d 	.word	0x00400f0d
  400fb8:	00400f5d 	.word	0x00400f5d

00400fbc <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400fbc:	2300      	movs	r3, #0
  400fbe:	b10b      	cbz	r3, 400fc4 <_pwm_get_cfg+0x8>
		if (_pwms[i].hw == hw) {
			return (_pwms + i);
		}
	}

	return NULL;
  400fc0:	2000      	movs	r0, #0
}
  400fc2:	4770      	bx	lr
		if (_pwms[i].hw == hw) {
  400fc4:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  400fc8:	008a      	lsls	r2, r1, #2
  400fca:	4906      	ldr	r1, [pc, #24]	; (400fe4 <_pwm_get_cfg+0x28>)
  400fcc:	588a      	ldr	r2, [r1, r2]
  400fce:	4282      	cmp	r2, r0
  400fd0:	d002      	beq.n	400fd8 <_pwm_get_cfg+0x1c>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400fd2:	3301      	adds	r3, #1
  400fd4:	b2db      	uxtb	r3, r3
  400fd6:	e7f2      	b.n	400fbe <_pwm_get_cfg+0x2>
			return (_pwms + i);
  400fd8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  400fdc:	009a      	lsls	r2, r3, #2
  400fde:	4608      	mov	r0, r1
  400fe0:	4410      	add	r0, r2
  400fe2:	4770      	bx	lr
  400fe4:	00402e90 	.word	0x00402e90

00400fe8 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  400fe8:	4b03      	ldr	r3, [pc, #12]	; (400ff8 <_pwm_init_irq_param+0x10>)
  400fea:	4298      	cmp	r0, r3
  400fec:	d000      	beq.n	400ff0 <_pwm_init_irq_param+0x8>
  400fee:	4770      	bx	lr
		_pwm0_dev = dev;
  400ff0:	4b02      	ldr	r3, [pc, #8]	; (400ffc <_pwm_init_irq_param+0x14>)
  400ff2:	6019      	str	r1, [r3, #0]
	}
}
  400ff4:	e7fb      	b.n	400fee <_pwm_init_irq_param+0x6>
  400ff6:	bf00      	nop
  400ff8:	40020000 	.word	0x40020000
  400ffc:	2040009c 	.word	0x2040009c

00401000 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401000:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401002:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401004:	69db      	ldr	r3, [r3, #28]
  401006:	b113      	cbz	r3, 40100e <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401008:	6803      	ldr	r3, [r0, #0]
  40100a:	b103      	cbz	r3, 40100e <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  40100c:	4798      	blx	r3
  40100e:	bd08      	pop	{r3, pc}

00401010 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401010:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401012:	4b02      	ldr	r3, [pc, #8]	; (40101c <PWM0_Handler+0xc>)
  401014:	6818      	ldr	r0, [r3, #0]
  401016:	4b02      	ldr	r3, [pc, #8]	; (401020 <PWM0_Handler+0x10>)
  401018:	4798      	blx	r3
  40101a:	bd08      	pop	{r3, pc}
  40101c:	2040009c 	.word	0x2040009c
  401020:	00401001 	.word	0x00401001

00401024 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401026:	4606      	mov	r6, r0
	ASSERT(hw);
  401028:	460c      	mov	r4, r1
  40102a:	1c08      	adds	r0, r1, #0
  40102c:	bf18      	it	ne
  40102e:	2001      	movne	r0, #1
  401030:	f240 1271 	movw	r2, #369	; 0x171
  401034:	4944      	ldr	r1, [pc, #272]	; (401148 <_pwm_init+0x124>)
  401036:	4b45      	ldr	r3, [pc, #276]	; (40114c <_pwm_init+0x128>)
  401038:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  40103a:	4620      	mov	r0, r4
  40103c:	4b44      	ldr	r3, [pc, #272]	; (401150 <_pwm_init+0x12c>)
  40103e:	4798      	blx	r3
  401040:	4605      	mov	r5, r0

	device->hw = hw;
  401042:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401044:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401046:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401048:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  40104a:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  40104c:	6903      	ldr	r3, [r0, #16]
  40104e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401052:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401054:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401056:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401058:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  40105a:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  40105c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401060:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401062:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401064:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401066:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40106a:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  40106c:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401070:	2300      	movs	r3, #0
  401072:	e019      	b.n	4010a8 <_pwm_init+0x84>
		ch = cfg->ch + i;
  401074:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401076:	0118      	lsls	r0, r3, #4
  401078:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  40107c:	5c3a      	ldrb	r2, [r7, r0]
  40107e:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401082:	3210      	adds	r2, #16
  401084:	0152      	lsls	r2, r2, #5
  401086:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401088:	5c3a      	ldrb	r2, [r7, r0]
  40108a:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40108e:	3210      	adds	r2, #16
  401090:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401094:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401096:	5c3a      	ldrb	r2, [r7, r0]
  401098:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  40109c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4010a0:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4010a4:	3301      	adds	r3, #1
  4010a6:	b25b      	sxtb	r3, r3
  4010a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4010aa:	4293      	cmp	r3, r2
  4010ac:	d3e2      	bcc.n	401074 <_pwm_init+0x50>
  4010ae:	2300      	movs	r3, #0
  4010b0:	e014      	b.n	4010dc <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4010b2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4010b4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4010b8:	0082      	lsls	r2, r0, #2
  4010ba:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4010be:	5c88      	ldrb	r0, [r1, r2]
  4010c0:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4010c4:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4010c8:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4010cc:	5c8a      	ldrb	r2, [r1, r2]
  4010ce:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4010d2:	3213      	adds	r2, #19
  4010d4:	0112      	lsls	r2, r2, #4
  4010d6:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4010d8:	3301      	adds	r3, #1
  4010da:	b25b      	sxtb	r3, r3
  4010dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4010de:	4293      	cmp	r3, r2
  4010e0:	d3e7      	bcc.n	4010b2 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4010e2:	4631      	mov	r1, r6
  4010e4:	4620      	mov	r0, r4
  4010e6:	4b1b      	ldr	r3, [pc, #108]	; (401154 <_pwm_init+0x130>)
  4010e8:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4010ea:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	db0d      	blt.n	40110e <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4010f2:	095a      	lsrs	r2, r3, #5
  4010f4:	f003 031f 	and.w	r3, r3, #31
  4010f8:	2101      	movs	r1, #1
  4010fa:	fa01 f303 	lsl.w	r3, r1, r3
  4010fe:	3220      	adds	r2, #32
  401100:	4915      	ldr	r1, [pc, #84]	; (401158 <_pwm_init+0x134>)
  401102:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401106:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40110a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40110e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401112:	2b00      	cmp	r3, #0
  401114:	db09      	blt.n	40112a <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401116:	095a      	lsrs	r2, r3, #5
  401118:	f003 031f 	and.w	r3, r3, #31
  40111c:	2101      	movs	r1, #1
  40111e:	fa01 f303 	lsl.w	r3, r1, r3
  401122:	3260      	adds	r2, #96	; 0x60
  401124:	490c      	ldr	r1, [pc, #48]	; (401158 <_pwm_init+0x134>)
  401126:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40112a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40112e:	2b00      	cmp	r3, #0
  401130:	db08      	blt.n	401144 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401132:	0959      	lsrs	r1, r3, #5
  401134:	f003 031f 	and.w	r3, r3, #31
  401138:	2201      	movs	r2, #1
  40113a:	fa02 f303 	lsl.w	r3, r2, r3
  40113e:	4a06      	ldr	r2, [pc, #24]	; (401158 <_pwm_init+0x134>)
  401140:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401144:	2000      	movs	r0, #0
  401146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401148:	00402f0c 	.word	0x00402f0c
  40114c:	00400bad 	.word	0x00400bad
  401150:	00400fbd 	.word	0x00400fbd
  401154:	00400fe9 	.word	0x00400fe9
  401158:	e000e100 	.word	0xe000e100

0040115c <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  40115c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40115e:	4604      	mov	r4, r0
  401160:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401164:	490b      	ldr	r1, [pc, #44]	; (401194 <_pwm_enable+0x38>)
  401166:	3000      	adds	r0, #0
  401168:	bf18      	it	ne
  40116a:	2001      	movne	r0, #1
  40116c:	4b0a      	ldr	r3, [pc, #40]	; (401198 <_pwm_enable+0x3c>)
  40116e:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401170:	6920      	ldr	r0, [r4, #16]
  401172:	4b0a      	ldr	r3, [pc, #40]	; (40119c <_pwm_enable+0x40>)
  401174:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401176:	2300      	movs	r3, #0
  401178:	e008      	b.n	40118c <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40117a:	6921      	ldr	r1, [r4, #16]
  40117c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40117e:	011a      	lsls	r2, r3, #4
  401180:	5cad      	ldrb	r5, [r5, r2]
  401182:	2201      	movs	r2, #1
  401184:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401186:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401188:	3301      	adds	r3, #1
  40118a:	b25b      	sxtb	r3, r3
  40118c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40118e:	4293      	cmp	r3, r2
  401190:	d3f3      	bcc.n	40117a <_pwm_enable+0x1e>
	}
}
  401192:	bd38      	pop	{r3, r4, r5, pc}
  401194:	00402f0c 	.word	0x00402f0c
  401198:	00400bad 	.word	0x00400bad
  40119c:	00400fbd 	.word	0x00400fbd

004011a0 <_pwm_is_enabled>:
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
	}
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4011a0:	b510      	push	{r4, lr}
	ASSERT(device);
  4011a2:	4604      	mov	r4, r0
  4011a4:	f240 12d1 	movw	r2, #465	; 0x1d1
  4011a8:	4907      	ldr	r1, [pc, #28]	; (4011c8 <_pwm_is_enabled+0x28>)
  4011aa:	3000      	adds	r0, #0
  4011ac:	bf18      	it	ne
  4011ae:	2001      	movne	r0, #1
  4011b0:	4b06      	ldr	r3, [pc, #24]	; (4011cc <_pwm_is_enabled+0x2c>)
  4011b2:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4011b4:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4011b6:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4011b8:	f013 0f0f 	tst.w	r3, #15
  4011bc:	d001      	beq.n	4011c2 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4011be:	2001      	movs	r0, #1
	}
}
  4011c0:	bd10      	pop	{r4, pc}
		return false;
  4011c2:	2000      	movs	r0, #0
  4011c4:	bd10      	pop	{r4, pc}
  4011c6:	bf00      	nop
  4011c8:	00402f0c 	.word	0x00402f0c
  4011cc:	00400bad 	.word	0x00400bad

004011d0 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4011d0:	2000      	movs	r0, #0
  4011d2:	4770      	bx	lr

004011d4 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4011d4:	2301      	movs	r3, #1
  4011d6:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  4011d8:	2000      	movs	r0, #0
  4011da:	4770      	bx	lr

004011dc <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4011dc:	4b04      	ldr	r3, [pc, #16]	; (4011f0 <_spi_get_hardware_index+0x14>)
  4011de:	4403      	add	r3, r0
  4011e0:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  4011e4:	2b05      	cmp	r3, #5
  4011e6:	d001      	beq.n	4011ec <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  4011e8:	2000      	movs	r0, #0
	}
}
  4011ea:	4770      	bx	lr
		return 1;
  4011ec:	2001      	movs	r0, #1
  4011ee:	4770      	bx	lr
  4011f0:	bfff8000 	.word	0xbfff8000

004011f4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  4011f4:	b570      	push	{r4, r5, r6, lr}
  4011f6:	4606      	mov	r6, r0
  4011f8:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4011fa:	4608      	mov	r0, r1
  4011fc:	4b20      	ldr	r3, [pc, #128]	; (401280 <_spi_m_sync_init+0x8c>)
  4011fe:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401200:	2300      	movs	r3, #0
  401202:	b33b      	cbz	r3, 401254 <_spi_m_sync_init+0x60>
	return NULL;
  401204:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  401206:	f44f 729a 	mov.w	r2, #308	; 0x134
  40120a:	491e      	ldr	r1, [pc, #120]	; (401284 <_spi_m_sync_init+0x90>)
  40120c:	2e00      	cmp	r6, #0
  40120e:	bf18      	it	ne
  401210:	2c00      	cmpne	r4, #0
  401212:	bf14      	ite	ne
  401214:	2001      	movne	r0, #1
  401216:	2000      	moveq	r0, #0
  401218:	4b1b      	ldr	r3, [pc, #108]	; (401288 <_spi_m_sync_init+0x94>)
  40121a:	4798      	blx	r3

	if (regs == NULL) {
  40121c:	b355      	cbz	r5, 401274 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  40121e:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401220:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401224:	d129      	bne.n	40127a <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  401226:	2380      	movs	r3, #128	; 0x80
  401228:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  40122a:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  40122c:	686a      	ldr	r2, [r5, #4]
  40122e:	4b17      	ldr	r3, [pc, #92]	; (40128c <_spi_m_sync_init+0x98>)
  401230:	4013      	ands	r3, r2
  401232:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401234:	68ab      	ldr	r3, [r5, #8]
  401236:	4a16      	ldr	r2, [pc, #88]	; (401290 <_spi_m_sync_init+0x9c>)
  401238:	401a      	ands	r2, r3
  40123a:	4b16      	ldr	r3, [pc, #88]	; (401294 <_spi_m_sync_init+0xa0>)
  40123c:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  40123e:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  401240:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  401242:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  401244:	8a2b      	ldrh	r3, [r5, #16]
  401246:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  401248:	68eb      	ldr	r3, [r5, #12]
  40124a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40124e:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  401250:	2000      	movs	r0, #0
  401252:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  401254:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401258:	008a      	lsls	r2, r1, #2
  40125a:	490f      	ldr	r1, [pc, #60]	; (401298 <_spi_m_sync_init+0xa4>)
  40125c:	5c8a      	ldrb	r2, [r1, r2]
  40125e:	4290      	cmp	r0, r2
  401260:	d002      	beq.n	401268 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401262:	3301      	adds	r3, #1
  401264:	b2db      	uxtb	r3, r3
  401266:	e7cc      	b.n	401202 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  401268:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  40126c:	00ab      	lsls	r3, r5, #2
  40126e:	460d      	mov	r5, r1
  401270:	441d      	add	r5, r3
  401272:	e7c8      	b.n	401206 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  401274:	f06f 000c 	mvn.w	r0, #12
  401278:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  40127a:	f06f 0010 	mvn.w	r0, #16
}
  40127e:	bd70      	pop	{r4, r5, r6, pc}
  401280:	004011dd 	.word	0x004011dd
  401284:	00402f38 	.word	0x00402f38
  401288:	00400bad 	.word	0x00400bad
  40128c:	feffff7c 	.word	0xfeffff7c
  401290:	fff1ff6f 	.word	0xfff1ff6f
  401294:	000e0010 	.word	0x000e0010
  401298:	00402f24 	.word	0x00402f24

0040129c <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  40129c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  40129e:	4604      	mov	r4, r0
  4012a0:	b168      	cbz	r0, 4012be <_spi_m_sync_enable+0x22>
  4012a2:	6803      	ldr	r3, [r0, #0]
  4012a4:	b14b      	cbz	r3, 4012ba <_spi_m_sync_enable+0x1e>
  4012a6:	2001      	movs	r0, #1
  4012a8:	f44f 72b9 	mov.w	r2, #370	; 0x172
  4012ac:	4905      	ldr	r1, [pc, #20]	; (4012c4 <_spi_m_sync_enable+0x28>)
  4012ae:	4b06      	ldr	r3, [pc, #24]	; (4012c8 <_spi_m_sync_enable+0x2c>)
  4012b0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  4012b2:	6820      	ldr	r0, [r4, #0]
  4012b4:	4b05      	ldr	r3, [pc, #20]	; (4012cc <_spi_m_sync_enable+0x30>)
  4012b6:	4798      	blx	r3
}
  4012b8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  4012ba:	2000      	movs	r0, #0
  4012bc:	e7f4      	b.n	4012a8 <_spi_m_sync_enable+0xc>
  4012be:	2000      	movs	r0, #0
  4012c0:	e7f2      	b.n	4012a8 <_spi_m_sync_enable+0xc>
  4012c2:	bf00      	nop
  4012c4:	00402f38 	.word	0x00402f38
  4012c8:	00400bad 	.word	0x00400bad
  4012cc:	004011d5 	.word	0x004011d5

004012d0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  4012d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012d4:	b086      	sub	sp, #24
  4012d6:	4607      	mov	r7, r0
  4012d8:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  4012da:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  4012dc:	680b      	ldr	r3, [r1, #0]
  4012de:	9301      	str	r3, [sp, #4]
  4012e0:	684b      	ldr	r3, [r1, #4]
  4012e2:	9302      	str	r3, [sp, #8]
  4012e4:	2300      	movs	r3, #0
  4012e6:	9303      	str	r3, [sp, #12]
  4012e8:	9304      	str	r3, [sp, #16]
  4012ea:	7903      	ldrb	r3, [r0, #4]
  4012ec:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  4012f0:	1c26      	adds	r6, r4, #0
  4012f2:	bf18      	it	ne
  4012f4:	2601      	movne	r6, #1
  4012f6:	f240 2231 	movw	r2, #561	; 0x231
  4012fa:	4933      	ldr	r1, [pc, #204]	; (4013c8 <_spi_m_sync_trans+0xf8>)
  4012fc:	2800      	cmp	r0, #0
  4012fe:	bf0c      	ite	eq
  401300:	2000      	moveq	r0, #0
  401302:	f006 0001 	andne.w	r0, r6, #1
  401306:	4b31      	ldr	r3, [pc, #196]	; (4013cc <_spi_m_sync_trans+0xfc>)
  401308:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  40130a:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  40130c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401310:	d122      	bne.n	401358 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  401312:	f06f 0013 	mvn.w	r0, #19
  401316:	e053      	b.n	4013c0 <_spi_m_sync_trans+0xf0>
		return false;
  401318:	2300      	movs	r3, #0
  40131a:	e035      	b.n	401388 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  40131c:	7850      	ldrb	r0, [r2, #1]
  40131e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  401322:	3202      	adds	r2, #2
  401324:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  401326:	3301      	adds	r3, #1
  401328:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  40132a:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  40132c:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  401330:	f240 2222 	movw	r2, #546	; 0x222
  401334:	4924      	ldr	r1, [pc, #144]	; (4013c8 <_spi_m_sync_trans+0xf8>)
  401336:	4630      	mov	r0, r6
  401338:	4b24      	ldr	r3, [pc, #144]	; (4013cc <_spi_m_sync_trans+0xfc>)
  40133a:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  40133c:	f018 0f08 	tst.w	r8, #8
  401340:	d038      	beq.n	4013b4 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  401342:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  401346:	2800      	cmp	r0, #0
  401348:	db36      	blt.n	4013b8 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  40134a:	9803      	ldr	r0, [sp, #12]
  40134c:	68ab      	ldr	r3, [r5, #8]
  40134e:	4298      	cmp	r0, r3
  401350:	d302      	bcc.n	401358 <_spi_m_sync_trans+0x88>
  401352:	9a04      	ldr	r2, [sp, #16]
  401354:	4293      	cmp	r3, r2
  401356:	d92f      	bls.n	4013b8 <_spi_m_sync_trans+0xe8>
  401358:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  40135a:	f013 0f01 	tst.w	r3, #1
  40135e:	d0db      	beq.n	401318 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  401360:	68a3      	ldr	r3, [r4, #8]
  401362:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  401364:	9a02      	ldr	r2, [sp, #8]
  401366:	b15a      	cbz	r2, 401380 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  401368:	1c51      	adds	r1, r2, #1
  40136a:	9102      	str	r1, [sp, #8]
  40136c:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  40136e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  401372:	2a01      	cmp	r2, #1
  401374:	d904      	bls.n	401380 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  401376:	460a      	mov	r2, r1
  401378:	3101      	adds	r1, #1
  40137a:	9102      	str	r1, [sp, #8]
  40137c:	0a1b      	lsrs	r3, r3, #8
  40137e:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  401380:	9b04      	ldr	r3, [sp, #16]
  401382:	3301      	adds	r3, #1
  401384:	9304      	str	r3, [sp, #16]
	return true;
  401386:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401388:	2b00      	cmp	r3, #0
  40138a:	d1cf      	bne.n	40132c <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  40138c:	9b03      	ldr	r3, [sp, #12]
  40138e:	9a04      	ldr	r2, [sp, #16]
  401390:	429a      	cmp	r2, r3
  401392:	d3cb      	bcc.n	40132c <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  401394:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  401396:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401398:	f012 0f02 	tst.w	r2, #2
  40139c:	d0c6      	beq.n	40132c <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  40139e:	9a01      	ldr	r2, [sp, #4]
  4013a0:	2a00      	cmp	r2, #0
  4013a2:	d0c0      	beq.n	401326 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  4013a4:	1c51      	adds	r1, r2, #1
  4013a6:	9101      	str	r1, [sp, #4]
  4013a8:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  4013aa:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4013ae:	2801      	cmp	r0, #1
  4013b0:	d8b4      	bhi.n	40131c <_spi_m_sync_trans+0x4c>
  4013b2:	e7b8      	b.n	401326 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  4013b4:	2000      	movs	r0, #0
  4013b6:	e7c6      	b.n	401346 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  4013b8:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  4013ba:	f413 7f00 	tst.w	r3, #512	; 0x200
  4013be:	d0fb      	beq.n	4013b8 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  4013c0:	b006      	add	sp, #24
  4013c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013c6:	bf00      	nop
  4013c8:	00402f38 	.word	0x00402f38
  4013cc:	00400bad 	.word	0x00400bad

004013d0 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  4013d0:	2000      	movs	r0, #0
  4013d2:	4770      	bx	lr

004013d4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4013d4:	4b03      	ldr	r3, [pc, #12]	; (4013e4 <_system_time_init+0x10>)
  4013d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4013da:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4013dc:	2205      	movs	r2, #5
  4013de:	601a      	str	r2, [r3, #0]
  4013e0:	4770      	bx	lr
  4013e2:	bf00      	nop
  4013e4:	e000e010 	.word	0xe000e010

004013e8 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4013e8:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4013ea:	4b01      	ldr	r3, [pc, #4]	; (4013f0 <_delay_init+0x8>)
  4013ec:	4798      	blx	r3
  4013ee:	bd08      	pop	{r3, pc}
  4013f0:	004013d5 	.word	0x004013d5

004013f4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4013f4:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4013f6:	e00d      	b.n	401414 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4013f8:	4b0d      	ldr	r3, [pc, #52]	; (401430 <_delay_cycles+0x3c>)
  4013fa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4013fe:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401400:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401402:	4b0b      	ldr	r3, [pc, #44]	; (401430 <_delay_cycles+0x3c>)
  401404:	681b      	ldr	r3, [r3, #0]
  401406:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40140a:	d0fa      	beq.n	401402 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  40140c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401410:	3101      	adds	r1, #1
	while (n--) {
  401412:	4610      	mov	r0, r2
  401414:	1e43      	subs	r3, r0, #1
  401416:	b2da      	uxtb	r2, r3
  401418:	2800      	cmp	r0, #0
  40141a:	d1ed      	bne.n	4013f8 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  40141c:	4b04      	ldr	r3, [pc, #16]	; (401430 <_delay_cycles+0x3c>)
  40141e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401420:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401422:	4b03      	ldr	r3, [pc, #12]	; (401430 <_delay_cycles+0x3c>)
  401424:	681b      	ldr	r3, [r3, #0]
  401426:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40142a:	d0fa      	beq.n	401422 <_delay_cycles+0x2e>
		;
}
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	e000e010 	.word	0xe000e010

00401434 <_get_i2cm_sync_cfg>:
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401434:	2300      	movs	r3, #0
  401436:	b13b      	cbz	r3, 401448 <_get_i2cm_sync_cfg+0x14>
		if (_i2cm_sync_cfgs[i].hw == hw) {
			return &(_i2cm_sync_cfgs[i]);
		}
	}
	return NULL;
  401438:	2000      	movs	r0, #0
  40143a:	4770      	bx	lr
			return &(_i2cm_sync_cfgs[i]);
  40143c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401440:	00e3      	lsls	r3, r4, #3
  401442:	4608      	mov	r0, r1
  401444:	4418      	add	r0, r3
  401446:	e00c      	b.n	401462 <_get_i2cm_sync_cfg+0x2e>
{
  401448:	b410      	push	{r4}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  40144a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  40144e:	00ca      	lsls	r2, r1, #3
  401450:	4905      	ldr	r1, [pc, #20]	; (401468 <_get_i2cm_sync_cfg+0x34>)
  401452:	588a      	ldr	r2, [r1, r2]
  401454:	4282      	cmp	r2, r0
  401456:	d0f1      	beq.n	40143c <_get_i2cm_sync_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  401458:	3301      	adds	r3, #1
  40145a:	b2db      	uxtb	r3, r3
  40145c:	2b00      	cmp	r3, #0
  40145e:	d0f4      	beq.n	40144a <_get_i2cm_sync_cfg+0x16>
	return NULL;
  401460:	2000      	movs	r0, #0
}
  401462:	f85d 4b04 	ldr.w	r4, [sp], #4
  401466:	4770      	bx	lr
  401468:	00402f50 	.word	0x00402f50

0040146c <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  40146c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  40146e:	4604      	mov	r4, r0
  401470:	460d      	mov	r5, r1
  401472:	2800      	cmp	r0, #0
  401474:	bf18      	it	ne
  401476:	2900      	cmpne	r1, #0
  401478:	bf14      	ite	ne
  40147a:	2001      	movne	r0, #1
  40147c:	2000      	moveq	r0, #0
  40147e:	2278      	movs	r2, #120	; 0x78
  401480:	4909      	ldr	r1, [pc, #36]	; (4014a8 <_i2c_m_sync_init+0x3c>)
  401482:	4b0a      	ldr	r3, [pc, #40]	; (4014ac <_i2c_m_sync_init+0x40>)
  401484:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  401486:	6125      	str	r5, [r4, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  401488:	4628      	mov	r0, r5
  40148a:	4b09      	ldr	r3, [pc, #36]	; (4014b0 <_i2c_m_sync_init+0x44>)
  40148c:	4798      	blx	r3

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  40148e:	6843      	ldr	r3, [r0, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  401490:	602b      	str	r3, [r5, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  401492:	6923      	ldr	r3, [r4, #16]
  401494:	6882      	ldr	r2, [r0, #8]
	((Twihs *)hw)->TWIHS_SMBTR = data;
  401496:	639a      	str	r2, [r3, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  401498:	6923      	ldr	r3, [r4, #16]
  40149a:	68c2      	ldr	r2, [r0, #12]
	((Twihs *)hw)->TWIHS_FILTR = data;
  40149c:	645a      	str	r2, [r3, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  40149e:	6923      	ldr	r3, [r4, #16]
  4014a0:	6902      	ldr	r2, [r0, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  4014a2:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
}
  4014a4:	2000      	movs	r0, #0
  4014a6:	bd38      	pop	{r3, r4, r5, pc}
  4014a8:	00402f68 	.word	0x00402f68
  4014ac:	00400bad 	.word	0x00400bad
  4014b0:	00401435 	.word	0x00401435

004014b4 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  4014b4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && msg);
  4014b6:	4604      	mov	r4, r0
  4014b8:	460d      	mov	r5, r1
  4014ba:	2800      	cmp	r0, #0
  4014bc:	bf18      	it	ne
  4014be:	2900      	cmpne	r1, #0
  4014c0:	bf14      	ite	ne
  4014c2:	2001      	movne	r0, #1
  4014c4:	2000      	moveq	r0, #0
  4014c6:	22ba      	movs	r2, #186	; 0xba
  4014c8:	4952      	ldr	r1, [pc, #328]	; (401614 <_i2c_m_sync_transfer+0x160>)
  4014ca:	4b53      	ldr	r3, [pc, #332]	; (401618 <_i2c_m_sync_transfer+0x164>)
  4014cc:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  4014ce:	8863      	ldrh	r3, [r4, #2]
  4014d0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4014d4:	f040 809a 	bne.w	40160c <_i2c_m_sync_transfer+0x158>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  4014d8:	886b      	ldrh	r3, [r5, #2]
  4014da:	f013 0f01 	tst.w	r3, #1
  4014de:	d118      	bne.n	401512 <_i2c_m_sync_transfer+0x5e>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  4014e0:	886b      	ldrh	r3, [r5, #2]
  4014e2:	b29b      	uxth	r3, r3
  4014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4014e8:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  4014ea:	882b      	ldrh	r3, [r5, #0]
  4014ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4014f0:	d05f      	beq.n	4015b2 <_i2c_m_sync_transfer+0xfe>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  4014f2:	6922      	ldr	r2, [r4, #16]
  4014f4:	0a1b      	lsrs	r3, r3, #8
  4014f6:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  4014fa:	041b      	lsls	r3, r3, #16
  4014fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  401504:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401506:	6923      	ldr	r3, [r4, #16]
  401508:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  40150a:	60da      	str	r2, [r3, #12]
	for (i = 0; i < msg->len; i++) {
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  40150c:	2000      	movs	r0, #0
  40150e:	4601      	mov	r1, r0
  401510:	e05c      	b.n	4015cc <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  401512:	886b      	ldrh	r3, [r5, #2]
  401514:	b29b      	uxth	r3, r3
  401516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40151a:	806b      	strh	r3, [r5, #2]

	if (msg->addr & I2C_M_TEN) {
  40151c:	882b      	ldrh	r3, [r5, #0]
  40151e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401522:	d022      	beq.n	40156a <_i2c_m_sync_transfer+0xb6>
		hri_twihs_write_MMR_reg(dev->hw,
  401524:	6922      	ldr	r2, [r4, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  401526:	0a1b      	lsrs	r3, r3, #8
  401528:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40152c:	041b      	lsls	r3, r3, #16
  40152e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401532:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  401536:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  401538:	6923      	ldr	r3, [r4, #16]
  40153a:	782a      	ldrb	r2, [r5, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  40153c:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  40153e:	6923      	ldr	r3, [r4, #16]
  401540:	686a      	ldr	r2, [r5, #4]
  401542:	2a01      	cmp	r2, #1
  401544:	d019      	beq.n	40157a <_i2c_m_sync_transfer+0xc6>
  401546:	2201      	movs	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  401548:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  40154a:	2100      	movs	r1, #0
  40154c:	686b      	ldr	r3, [r5, #4]
  40154e:	4299      	cmp	r1, r3
  401550:	d222      	bcs.n	401598 <_i2c_m_sync_transfer+0xe4>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  401552:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  401554:	6a1a      	ldr	r2, [r3, #32]
  401556:	f012 0f02 	tst.w	r2, #2
  40155a:	d110      	bne.n	40157e <_i2c_m_sync_transfer+0xca>
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_NACK) > 0;
  40155c:	6a1b      	ldr	r3, [r3, #32]
			/* Check whether slave acknowledge received after the address byte */
			if (hri_twihs_get_SR_NACK_bit(dev->hw))
  40155e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401562:	d0f6      	beq.n	401552 <_i2c_m_sync_transfer+0x9e>
				return I2C_NACK;
  401564:	f06f 0001 	mvn.w	r0, #1
		return _i2c_m_sync_read(dev, msg);
  401568:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  40156a:	6922      	ldr	r2, [r4, #16]
  40156c:	041b      	lsls	r3, r3, #16
  40156e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  401576:	6053      	str	r3, [r2, #4]
  401578:	e7e1      	b.n	40153e <_i2c_m_sync_transfer+0x8a>
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  40157a:	2203      	movs	r2, #3
  40157c:	e7e4      	b.n	401548 <_i2c_m_sync_transfer+0x94>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  40157e:	68aa      	ldr	r2, [r5, #8]
	return ((Twihs *)hw)->TWIHS_RHR;
  401580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401582:	5453      	strb	r3, [r2, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  401584:	686b      	ldr	r3, [r5, #4]
  401586:	3b02      	subs	r3, #2
  401588:	4299      	cmp	r1, r3
  40158a:	d001      	beq.n	401590 <_i2c_m_sync_transfer+0xdc>
	for (i = 0; i < msg->len; i++) {
  40158c:	3101      	adds	r1, #1
  40158e:	e7dd      	b.n	40154c <_i2c_m_sync_transfer+0x98>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401590:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401592:	2202      	movs	r2, #2
  401594:	601a      	str	r2, [r3, #0]
  401596:	e7f9      	b.n	40158c <_i2c_m_sync_transfer+0xd8>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401598:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  40159a:	6a1b      	ldr	r3, [r3, #32]
  40159c:	f013 0f01 	tst.w	r3, #1
  4015a0:	d0fa      	beq.n	401598 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  4015a2:	8863      	ldrh	r3, [r4, #2]
  4015a4:	b29b      	uxth	r3, r3
  4015a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4015aa:	b29b      	uxth	r3, r3
  4015ac:	8063      	strh	r3, [r4, #2]

	return ERR_NONE;
  4015ae:	2000      	movs	r0, #0
  4015b0:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  4015b2:	6922      	ldr	r2, [r4, #16]
  4015b4:	041b      	lsls	r3, r3, #16
  4015b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  4015ba:	6053      	str	r3, [r2, #4]
  4015bc:	e7a6      	b.n	40150c <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  4015be:	f06f 0001 	mvn.w	r0, #1
		if (ret != ERR_NONE)
  4015c2:	b978      	cbnz	r0, 4015e4 <_i2c_m_sync_transfer+0x130>
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  4015c4:	68ab      	ldr	r3, [r5, #8]
  4015c6:	5c5b      	ldrb	r3, [r3, r1]
}

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  4015c8:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  4015ca:	3101      	adds	r1, #1
  4015cc:	686b      	ldr	r3, [r5, #4]
  4015ce:	4299      	cmp	r1, r3
  4015d0:	d208      	bcs.n	4015e4 <_i2c_m_sync_transfer+0x130>
			sr = hri_twihs_read_SR_reg(dev->hw);
  4015d2:	6922      	ldr	r2, [r4, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  4015d4:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  4015d6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015da:	d1f0      	bne.n	4015be <_i2c_m_sync_transfer+0x10a>
		} while (!(sr & TWIHS_SR_TXRDY));
  4015dc:	f013 0f04 	tst.w	r3, #4
  4015e0:	d0f7      	beq.n	4015d2 <_i2c_m_sync_transfer+0x11e>
  4015e2:	e7ee      	b.n	4015c2 <_i2c_m_sync_transfer+0x10e>
	if (msg->flags & I2C_M_STOP) {
  4015e4:	886b      	ldrh	r3, [r5, #2]
  4015e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4015ea:	d106      	bne.n	4015fa <_i2c_m_sync_transfer+0x146>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  4015ec:	8863      	ldrh	r3, [r4, #2]
  4015ee:	b29b      	uxth	r3, r3
  4015f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4015f4:	b29b      	uxth	r3, r3
  4015f6:	8063      	strh	r3, [r4, #2]
		return _i2c_m_sync_write(dev, msg);
  4015f8:	bd38      	pop	{r3, r4, r5, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  4015fa:	6923      	ldr	r3, [r4, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  4015fc:	2202      	movs	r2, #2
  4015fe:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401600:	6923      	ldr	r3, [r4, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401602:	6a1b      	ldr	r3, [r3, #32]
  401604:	f013 0f01 	tst.w	r3, #1
  401608:	d0fa      	beq.n	401600 <_i2c_m_sync_transfer+0x14c>
  40160a:	e7ef      	b.n	4015ec <_i2c_m_sync_transfer+0x138>
		return I2C_ERR_BUSY;
  40160c:	f06f 0005 	mvn.w	r0, #5
}
  401610:	bd38      	pop	{r3, r4, r5, pc}
  401612:	bf00      	nop
  401614:	00402f68 	.word	0x00402f68
  401618:	00400bad 	.word	0x00400bad

0040161c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  40161c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40161e:	4604      	mov	r4, r0
  401620:	f240 222b 	movw	r2, #555	; 0x22b
  401624:	4905      	ldr	r1, [pc, #20]	; (40163c <_usart_get_hardware_index+0x20>)
  401626:	3000      	adds	r0, #0
  401628:	bf18      	it	ne
  40162a:	2001      	movne	r0, #1
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <_usart_get_hardware_index+0x24>)
  40162e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401630:	4804      	ldr	r0, [pc, #16]	; (401644 <_usart_get_hardware_index+0x28>)
  401632:	4420      	add	r0, r4
}
  401634:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401638:	bd10      	pop	{r4, pc}
  40163a:	bf00      	nop
  40163c:	00402f90 	.word	0x00402f90
  401640:	00400bad 	.word	0x00400bad
  401644:	bffdc000 	.word	0xbffdc000

00401648 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401648:	b510      	push	{r4, lr}
	ASSERT(hw);
  40164a:	4604      	mov	r4, r0
  40164c:	f240 2287 	movw	r2, #647	; 0x287
  401650:	490e      	ldr	r1, [pc, #56]	; (40168c <_get_usart_index+0x44>)
  401652:	3000      	adds	r0, #0
  401654:	bf18      	it	ne
  401656:	2001      	movne	r0, #1
  401658:	4b0d      	ldr	r3, [pc, #52]	; (401690 <_get_usart_index+0x48>)
  40165a:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  40165c:	4620      	mov	r0, r4
  40165e:	4b0d      	ldr	r3, [pc, #52]	; (401694 <_get_usart_index+0x4c>)
  401660:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401662:	2300      	movs	r3, #0
  401664:	b143      	cbz	r3, 401678 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401666:	f240 2291 	movw	r2, #657	; 0x291
  40166a:	4908      	ldr	r1, [pc, #32]	; (40168c <_get_usart_index+0x44>)
  40166c:	2000      	movs	r0, #0
  40166e:	4b08      	ldr	r3, [pc, #32]	; (401690 <_get_usart_index+0x48>)
  401670:	4798      	blx	r3
	return 0;
  401672:	2300      	movs	r3, #0
}
  401674:	4618      	mov	r0, r3
  401676:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401678:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  40167c:	008a      	lsls	r2, r1, #2
  40167e:	4906      	ldr	r1, [pc, #24]	; (401698 <_get_usart_index+0x50>)
  401680:	5c8a      	ldrb	r2, [r1, r2]
  401682:	4290      	cmp	r0, r2
  401684:	d0f6      	beq.n	401674 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401686:	3301      	adds	r3, #1
  401688:	b2db      	uxtb	r3, r3
  40168a:	e7eb      	b.n	401664 <_get_usart_index+0x1c>
  40168c:	00402f90 	.word	0x00402f90
  401690:	00400bad 	.word	0x00400bad
  401694:	0040161d 	.word	0x0040161d
  401698:	00402f84 	.word	0x00402f84

0040169c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  40169c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40169e:	4604      	mov	r4, r0
  4016a0:	f240 229e 	movw	r2, #670	; 0x29e
  4016a4:	4911      	ldr	r1, [pc, #68]	; (4016ec <_usart_init+0x50>)
  4016a6:	3000      	adds	r0, #0
  4016a8:	bf18      	it	ne
  4016aa:	2001      	movne	r0, #1
  4016ac:	4b10      	ldr	r3, [pc, #64]	; (4016f0 <_usart_init+0x54>)
  4016ae:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  4016b0:	4620      	mov	r0, r4
  4016b2:	4b10      	ldr	r3, [pc, #64]	; (4016f4 <_usart_init+0x58>)
  4016b4:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  4016b6:	4b10      	ldr	r3, [pc, #64]	; (4016f8 <_usart_init+0x5c>)
  4016b8:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  4016bc:	2300      	movs	r3, #0
  4016be:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  4016c0:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  4016c2:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  4016c4:	22ac      	movs	r2, #172	; 0xac
  4016c6:	6022      	str	r2, [r4, #0]
  4016c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4016cc:	6022      	str	r2, [r4, #0]
  4016ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4016d2:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4016d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4016d8:	0081      	lsls	r1, r0, #2
  4016da:	4a08      	ldr	r2, [pc, #32]	; (4016fc <_usart_init+0x60>)
  4016dc:	440a      	add	r2, r1
  4016de:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4016e0:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4016e2:	4a07      	ldr	r2, [pc, #28]	; (401700 <_usart_init+0x64>)
  4016e4:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4016e6:	4618      	mov	r0, r3
  4016e8:	bd10      	pop	{r4, pc}
  4016ea:	bf00      	nop
  4016ec:	00402f90 	.word	0x00402f90
  4016f0:	00400bad 	.word	0x00400bad
  4016f4:	00401649 	.word	0x00401649
  4016f8:	55534100 	.word	0x55534100
  4016fc:	00402f84 	.word	0x00402f84
  401700:	000100f4 	.word	0x000100f4

00401704 <_usart_sync_init>:
{
  401704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401706:	460c      	mov	r4, r1
	ASSERT(device);
  401708:	4e09      	ldr	r6, [pc, #36]	; (401730 <_usart_sync_init+0x2c>)
  40170a:	4607      	mov	r7, r0
  40170c:	22bd      	movs	r2, #189	; 0xbd
  40170e:	4631      	mov	r1, r6
  401710:	3000      	adds	r0, #0
  401712:	bf18      	it	ne
  401714:	2001      	movne	r0, #1
  401716:	4d07      	ldr	r5, [pc, #28]	; (401734 <_usart_sync_init+0x30>)
  401718:	47a8      	blx	r5
	ASSERT(hw);
  40171a:	22be      	movs	r2, #190	; 0xbe
  40171c:	4631      	mov	r1, r6
  40171e:	1c20      	adds	r0, r4, #0
  401720:	bf18      	it	ne
  401722:	2001      	movne	r0, #1
  401724:	47a8      	blx	r5
	device->hw = hw;
  401726:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401728:	4620      	mov	r0, r4
  40172a:	4b03      	ldr	r3, [pc, #12]	; (401738 <_usart_sync_init+0x34>)
  40172c:	4798      	blx	r3
}
  40172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401730:	00402f90 	.word	0x00402f90
  401734:	00400bad 	.word	0x00400bad
  401738:	0040169d 	.word	0x0040169d

0040173c <_usart_sync_enable>:
{
  40173c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40173e:	4e0a      	ldr	r6, [pc, #40]	; (401768 <_usart_sync_enable+0x2c>)
  401740:	4604      	mov	r4, r0
  401742:	f240 1205 	movw	r2, #261	; 0x105
  401746:	4631      	mov	r1, r6
  401748:	3000      	adds	r0, #0
  40174a:	bf18      	it	ne
  40174c:	2001      	movne	r0, #1
  40174e:	4d07      	ldr	r5, [pc, #28]	; (40176c <_usart_sync_enable+0x30>)
  401750:	47a8      	blx	r5
	_usart_enable(device->hw);
  401752:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401754:	f240 22c7 	movw	r2, #711	; 0x2c7
  401758:	4631      	mov	r1, r6
  40175a:	1c20      	adds	r0, r4, #0
  40175c:	bf18      	it	ne
  40175e:	2001      	movne	r0, #1
  401760:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401762:	2350      	movs	r3, #80	; 0x50
  401764:	6023      	str	r3, [r4, #0]
  401766:	bd70      	pop	{r4, r5, r6, pc}
  401768:	00402f90 	.word	0x00402f90
  40176c:	00400bad 	.word	0x00400bad

00401770 <_usart_sync_write_byte>:
{
  401770:	b538      	push	{r3, r4, r5, lr}
  401772:	460c      	mov	r4, r1
	ASSERT(device);
  401774:	4605      	mov	r5, r0
  401776:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40177a:	4904      	ldr	r1, [pc, #16]	; (40178c <_usart_sync_write_byte+0x1c>)
  40177c:	3000      	adds	r0, #0
  40177e:	bf18      	it	ne
  401780:	2001      	movne	r0, #1
  401782:	4b03      	ldr	r3, [pc, #12]	; (401790 <_usart_sync_write_byte+0x20>)
  401784:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401786:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401788:	61dc      	str	r4, [r3, #28]
  40178a:	bd38      	pop	{r3, r4, r5, pc}
  40178c:	00402f90 	.word	0x00402f90
  401790:	00400bad 	.word	0x00400bad

00401794 <_usart_sync_read_byte>:
{
  401794:	b510      	push	{r4, lr}
	ASSERT(device);
  401796:	4604      	mov	r4, r0
  401798:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  40179c:	4904      	ldr	r1, [pc, #16]	; (4017b0 <_usart_sync_read_byte+0x1c>)
  40179e:	3000      	adds	r0, #0
  4017a0:	bf18      	it	ne
  4017a2:	2001      	movne	r0, #1
  4017a4:	4b03      	ldr	r3, [pc, #12]	; (4017b4 <_usart_sync_read_byte+0x20>)
  4017a6:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  4017a8:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  4017aa:	6998      	ldr	r0, [r3, #24]
}
  4017ac:	b2c0      	uxtb	r0, r0
  4017ae:	bd10      	pop	{r4, pc}
  4017b0:	00402f90 	.word	0x00402f90
  4017b4:	00400bad 	.word	0x00400bad

004017b8 <_usart_sync_is_ready_to_send>:
{
  4017b8:	b510      	push	{r4, lr}
	ASSERT(device);
  4017ba:	4604      	mov	r4, r0
  4017bc:	f240 12c3 	movw	r2, #451	; 0x1c3
  4017c0:	4905      	ldr	r1, [pc, #20]	; (4017d8 <_usart_sync_is_ready_to_send+0x20>)
  4017c2:	3000      	adds	r0, #0
  4017c4:	bf18      	it	ne
  4017c6:	2001      	movne	r0, #1
  4017c8:	4b04      	ldr	r3, [pc, #16]	; (4017dc <_usart_sync_is_ready_to_send+0x24>)
  4017ca:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  4017cc:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4017ce:	6958      	ldr	r0, [r3, #20]
}
  4017d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4017d4:	bd10      	pop	{r4, pc}
  4017d6:	bf00      	nop
  4017d8:	00402f90 	.word	0x00402f90
  4017dc:	00400bad 	.word	0x00400bad

004017e0 <_usart_sync_is_transmit_done>:
{
  4017e0:	b510      	push	{r4, lr}
	ASSERT(device);
  4017e2:	4604      	mov	r4, r0
  4017e4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4017e8:	4905      	ldr	r1, [pc, #20]	; (401800 <_usart_sync_is_transmit_done+0x20>)
  4017ea:	3000      	adds	r0, #0
  4017ec:	bf18      	it	ne
  4017ee:	2001      	movne	r0, #1
  4017f0:	4b04      	ldr	r3, [pc, #16]	; (401804 <_usart_sync_is_transmit_done+0x24>)
  4017f2:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4017f4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4017f6:	6958      	ldr	r0, [r3, #20]
}
  4017f8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4017fc:	bd10      	pop	{r4, pc}
  4017fe:	bf00      	nop
  401800:	00402f90 	.word	0x00402f90
  401804:	00400bad 	.word	0x00400bad

00401808 <_usart_sync_is_byte_received>:
{
  401808:	b510      	push	{r4, lr}
	ASSERT(device);
  40180a:	4604      	mov	r4, r0
  40180c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401810:	4905      	ldr	r1, [pc, #20]	; (401828 <_usart_sync_is_byte_received+0x20>)
  401812:	3000      	adds	r0, #0
  401814:	bf18      	it	ne
  401816:	2001      	movne	r0, #1
  401818:	4b04      	ldr	r3, [pc, #16]	; (40182c <_usart_sync_is_byte_received+0x24>)
  40181a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  40181c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40181e:	6958      	ldr	r0, [r3, #20]
  401820:	f000 0001 	and.w	r0, r0, #1
}
  401824:	bd10      	pop	{r4, pc}
  401826:	bf00      	nop
  401828:	00402f90 	.word	0x00402f90
  40182c:	00400bad 	.word	0x00400bad

00401830 <_usart_get_usart_sync>:
}
  401830:	2000      	movs	r0, #0
  401832:	4770      	bx	lr

00401834 <main>:
#include "nRF24_driver.h"
#include "PWM_driver.h"


int main(void)
{
  401834:	b500      	push	{lr}
  401836:	b089      	sub	sp, #36	; 0x24
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401838:	4b11      	ldr	r3, [pc, #68]	; (401880 <main+0x4c>)
  40183a:	4798      	blx	r3
	/*Initialize the IMU, making sure to pass in the address of the start of the float array that will hold the quaternion coefficients*/
	
	//init_IMU(&imu_vector_buffer[0]);
	
	uint8_t data_store[32];
	memset(&data_store[0], 0, sizeof(uint8_t)*32);
  40183c:	2220      	movs	r2, #32
  40183e:	2100      	movs	r1, #0
  401840:	4668      	mov	r0, sp
  401842:	4b10      	ldr	r3, [pc, #64]	; (401884 <main+0x50>)
  401844:	4798      	blx	r3
	nRF24_init(data_store);
  401846:	4668      	mov	r0, sp
  401848:	4b0f      	ldr	r3, [pc, #60]	; (401888 <main+0x54>)
  40184a:	4798      	blx	r3
	delay_us(200); //Should be 200 us, setting higher for testing
  40184c:	20c8      	movs	r0, #200	; 0xc8
  40184e:	4b0f      	ldr	r3, [pc, #60]	; (40188c <main+0x58>)
  401850:	4798      	blx	r3
	nRF24_enter_receive();
  401852:	4b0f      	ldr	r3, [pc, #60]	; (401890 <main+0x5c>)
  401854:	4798      	blx	r3
	pwm_enable(&PWM_0);
  401856:	4c0f      	ldr	r4, [pc, #60]	; (401894 <main+0x60>)
  401858:	4620      	mov	r0, r4
  40185a:	4b0f      	ldr	r3, [pc, #60]	; (401898 <main+0x64>)
  40185c:	4798      	blx	r3
	set_pwm_motor_0(&(PWM_0.device), 100);
  40185e:	2164      	movs	r1, #100	; 0x64
  401860:	4620      	mov	r0, r4
  401862:	4b0e      	ldr	r3, [pc, #56]	; (40189c <main+0x68>)
  401864:	4798      	blx	r3
	set_pwm_motor_1(&(PWM_0.device), 100);
  401866:	2164      	movs	r1, #100	; 0x64
  401868:	4620      	mov	r0, r4
  40186a:	4b0d      	ldr	r3, [pc, #52]	; (4018a0 <main+0x6c>)
  40186c:	4798      	blx	r3
	set_pwm_motor_2(&(PWM_0.device), 100);
  40186e:	2164      	movs	r1, #100	; 0x64
  401870:	4620      	mov	r0, r4
  401872:	4b0c      	ldr	r3, [pc, #48]	; (4018a4 <main+0x70>)
  401874:	4798      	blx	r3
	set_pwm_motor_3(&(PWM_0.device), 100);
  401876:	2164      	movs	r1, #100	; 0x64
  401878:	4620      	mov	r0, r4
  40187a:	4b0b      	ldr	r3, [pc, #44]	; (4018a8 <main+0x74>)
  40187c:	4798      	blx	r3
  40187e:	e7fe      	b.n	40187e <main+0x4a>
  401880:	004001d5 	.word	0x004001d5
  401884:	00401ce1 	.word	0x00401ce1
  401888:	00401a41 	.word	0x00401a41
  40188c:	004005f1 	.word	0x004005f1
  401890:	00401af9 	.word	0x00401af9
  401894:	204000b8 	.word	0x204000b8
  401898:	004008b1 	.word	0x004008b1
  40189c:	00401b69 	.word	0x00401b69
  4018a0:	00401b79 	.word	0x00401b79
  4018a4:	00401b89 	.word	0x00401b89
  4018a8:	00401b99 	.word	0x00401b99

004018ac <nRF24_write_to_register>:
/* The io_descriptor and pointer for the received byte array are declared. */
struct io_descriptor *spi_0_io;
uint8_t* global_data_pointer;

/* This function takes in a byte indicating which of the nRF24's registers should be written to, and then a single byte of data to write to that register */
void nRF24_write_to_register(uint8_t registerd, uint8_t data){
  4018ac:	b530      	push	{r4, r5, lr}
  4018ae:	b083      	sub	sp, #12
	memset(&buffer[0], 0, sizeof(uint8_t)*2);
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer[0] = buffer[0] | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer[0] = (buffer[0]) | registerd;
  4018b0:	f040 0020 	orr.w	r0, r0, #32
  4018b4:	f88d 0004 	strb.w	r0, [sp, #4]
	/* Set the second byte of the buffer equal to the passed in data to be written to the register */
	buffer[1] = data;
  4018b8:	f88d 1005 	strb.w	r1, [sp, #5]
	((Pio *)hw)->PIO_CODR = mask;
  4018bc:	4c06      	ldr	r4, [pc, #24]	; (4018d8 <nRF24_write_to_register+0x2c>)
  4018be:	f44f 7500 	mov.w	r5, #512	; 0x200
  4018c2:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, buffer, 2); //Write the constructed 2 byte packet to the nRF24 over SPI
  4018c4:	2202      	movs	r2, #2
  4018c6:	a901      	add	r1, sp, #4
  4018c8:	4b04      	ldr	r3, [pc, #16]	; (4018dc <nRF24_write_to_register+0x30>)
  4018ca:	6818      	ldr	r0, [r3, #0]
  4018cc:	4b04      	ldr	r3, [pc, #16]	; (4018e0 <nRF24_write_to_register+0x34>)
  4018ce:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4018d0:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  4018d2:	b003      	add	sp, #12
  4018d4:	bd30      	pop	{r4, r5, pc}
  4018d6:	bf00      	nop
  4018d8:	400e1200 	.word	0x400e1200
  4018dc:	2040011c 	.word	0x2040011c
  4018e0:	004007f9 	.word	0x004007f9

004018e4 <nRF24_write_to_register_multi_byte>:

/* This function takes in a byte indicating which of the nRF24's registers should be written to, a pointer to multiple bytes of data to be written to that register, and the length
(in number of bytes) of the data to be sent to the register */
void nRF24_write_to_register_multi_byte(uint8_t registerd, uint8_t *data, int length){
  4018e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018e8:	b083      	sub	sp, #12
  4018ea:	4688      	mov	r8, r1
  4018ec:	4691      	mov	r9, r2
	buffer = 0;
	/* Set bits 7:5 to be equal to the Write to Register SPI command word (001). 32 = 0010 000. */
	buffer = buffer | 32;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  4018ee:	f040 0020 	orr.w	r0, r0, #32
  4018f2:	a902      	add	r1, sp, #8
  4018f4:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  4018f8:	4c08      	ldr	r4, [pc, #32]	; (40191c <nRF24_write_to_register_multi_byte+0x38>)
  4018fa:	f44f 7500 	mov.w	r5, #512	; 0x200
  4018fe:	6365      	str	r5, [r4, #52]	; 0x34
	/* Send the constructed packet to the nRF24 over SPI */
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); //Write the constructed 1 byte (does not contain any of the data to be written to the register) packet to the nRF24 over SPI
  401900:	4f07      	ldr	r7, [pc, #28]	; (401920 <nRF24_write_to_register_multi_byte+0x3c>)
  401902:	2201      	movs	r2, #1
  401904:	6838      	ldr	r0, [r7, #0]
  401906:	4e07      	ldr	r6, [pc, #28]	; (401924 <nRF24_write_to_register_multi_byte+0x40>)
  401908:	47b0      	blx	r6
	io_write(spi_0_io, data, length); //Write all of the data to be written to the register to the nRF24 over SPI
  40190a:	fa1f f289 	uxth.w	r2, r9
  40190e:	4641      	mov	r1, r8
  401910:	6838      	ldr	r0, [r7, #0]
  401912:	47b0      	blx	r6
	((Pio *)hw)->PIO_SODR = mask;
  401914:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  401916:	b003      	add	sp, #12
  401918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40191c:	400e1200 	.word	0x400e1200
  401920:	2040011c 	.word	0x2040011c
  401924:	004007f9 	.word	0x004007f9

00401928 <nRF24_read_from_register>:

/* This function takes in a byte indicating which of the nRF24's registers should be read from, and then reads in a single byte from that register and returns it to the function caller */
uint8_t nRF24_read_from_register(uint8_t registerd){
  401928:	b570      	push	{r4, r5, r6, lr}
  40192a:	b082      	sub	sp, #8
	/* Initialize a 1 byte buffer to all zeros. Bits 7:5 will be the Read to Register SPI command word (000), and then bits 4:0 will be the 5 bit long register number to read from */
	uint8_t buffer;
	buffer = 0;
	/* Set bits 4:0 to be equal to the 5 bit long register number to write to. If editing this code later, be careful not to use the word register as a variable, as it is a reserved
	word by another library we use. */
	buffer = buffer | registerd;
  40192c:	a902      	add	r1, sp, #8
  40192e:	f801 0d02 	strb.w	r0, [r1, #-2]!
	((Pio *)hw)->PIO_CODR = mask;
  401932:	4c0a      	ldr	r4, [pc, #40]	; (40195c <nRF24_read_from_register+0x34>)
  401934:	f44f 7500 	mov.w	r5, #512	; 0x200
  401938:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &buffer, 1); /* Write the constructed 1 byte packet to the nRF24 over SPI. This will tell the nRF24 that the next time we read, we would like it to return the 1 byte
  40193a:	4e09      	ldr	r6, [pc, #36]	; (401960 <nRF24_read_from_register+0x38>)
  40193c:	2201      	movs	r2, #1
  40193e:	6830      	ldr	r0, [r6, #0]
  401940:	4b08      	ldr	r3, [pc, #32]	; (401964 <nRF24_read_from_register+0x3c>)
  401942:	4798      	blx	r3
	of data from the target register */
	io_read(spi_0_io, &in_byte, 1); /* Read the 1 byte of data into the in_byte buffer */
  401944:	2201      	movs	r2, #1
  401946:	f10d 0107 	add.w	r1, sp, #7
  40194a:	6830      	ldr	r0, [r6, #0]
  40194c:	4b06      	ldr	r3, [pc, #24]	; (401968 <nRF24_read_from_register+0x40>)
  40194e:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401950:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
	/* Return the 1 read byte back to the function caller */
	return in_byte;
}
  401952:	f89d 0007 	ldrb.w	r0, [sp, #7]
  401956:	b002      	add	sp, #8
  401958:	bd70      	pop	{r4, r5, r6, pc}
  40195a:	bf00      	nop
  40195c:	400e1200 	.word	0x400e1200
  401960:	2040011c 	.word	0x2040011c
  401964:	004007f9 	.word	0x004007f9
  401968:	00400829 	.word	0x00400829

0040196c <nRF24_send_SPI_command>:
	io_read(spi_0_io, data_pointer, length); /* Read the multiple bytes of data into the pointer that was passed in as a parameter */
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}

/* This function will send a raw SPI command to the nRF24, without reading or writing to or from a particular register. */
void nRF24_send_SPI_command(uint8_t command){
  40196c:	b530      	push	{r4, r5, lr}
  40196e:	b083      	sub	sp, #12
  401970:	a902      	add	r1, sp, #8
  401972:	f801 0d01 	strb.w	r0, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  401976:	4c06      	ldr	r4, [pc, #24]	; (401990 <nRF24_send_SPI_command+0x24>)
  401978:	f44f 7500 	mov.w	r5, #512	; 0x200
  40197c:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //Drive low before doing SPI transmissions
	io_write(spi_0_io, &command, 1); //Send the 1 byte command that was received as a parameter to the nRF24 over SPI
  40197e:	2201      	movs	r2, #1
  401980:	4b04      	ldr	r3, [pc, #16]	; (401994 <nRF24_send_SPI_command+0x28>)
  401982:	6818      	ldr	r0, [r3, #0]
  401984:	4b04      	ldr	r3, [pc, #16]	; (401998 <nRF24_send_SPI_command+0x2c>)
  401986:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401988:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //Drive back to high after doing SPI transmissions
}
  40198a:	b003      	add	sp, #12
  40198c:	bd30      	pop	{r4, r5, pc}
  40198e:	bf00      	nop
  401990:	400e1200 	.word	0x400e1200
  401994:	2040011c 	.word	0x2040011c
  401998:	004007f9 	.word	0x004007f9

0040199c <nRF24_receive_data>:
	nRF24_write_to_register_multi_byte(RX_ADDR_P1, &rx_address[0], 5);
	nRF24_write_to_register(RX_PW_P1,32); //32 bytes packet size
	gpio_set_pin_level(RF24_CE, true);
}

void nRF24_receive_data(){
  40199c:	b570      	push	{r4, r5, r6, lr}
  40199e:	b082      	sub	sp, #8
	uint8_t cmd = R_RX_PAYLOAD;
  4019a0:	a902      	add	r1, sp, #8
  4019a2:	2361      	movs	r3, #97	; 0x61
  4019a4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	((Pio *)hw)->PIO_CODR = mask;
  4019a8:	4c18      	ldr	r4, [pc, #96]	; (401a0c <nRF24_receive_data+0x70>)
  4019aa:	f44f 7500 	mov.w	r5, #512	; 0x200
  4019ae:	6365      	str	r5, [r4, #52]	; 0x34
	gpio_set_pin_level(RF24_CSN, false); //drive this low before doing SPI transmissions
	io_write(spi_0_io, &cmd, 1);
  4019b0:	4e17      	ldr	r6, [pc, #92]	; (401a10 <nRF24_receive_data+0x74>)
  4019b2:	2201      	movs	r2, #1
  4019b4:	6830      	ldr	r0, [r6, #0]
  4019b6:	4b17      	ldr	r3, [pc, #92]	; (401a14 <nRF24_receive_data+0x78>)
  4019b8:	4798      	blx	r3
	io_read(spi_0_io, global_data_pointer, 32);
  4019ba:	2220      	movs	r2, #32
  4019bc:	4b16      	ldr	r3, [pc, #88]	; (401a18 <nRF24_receive_data+0x7c>)
  4019be:	6819      	ldr	r1, [r3, #0]
  4019c0:	6830      	ldr	r0, [r6, #0]
  4019c2:	4b16      	ldr	r3, [pc, #88]	; (401a1c <nRF24_receive_data+0x80>)
  4019c4:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4019c6:	6325      	str	r5, [r4, #48]	; 0x30
	gpio_set_pin_level(RF24_CSN, true); //return to high after SPI transmissions
	delay_us(11); //Make sure we had enough time to grab the data before flushing
  4019c8:	200b      	movs	r0, #11
  4019ca:	4b15      	ldr	r3, [pc, #84]	; (401a20 <nRF24_receive_data+0x84>)
  4019cc:	4798      	blx	r3
	cmd = FLUSH_RX;
  4019ce:	20e2      	movs	r0, #226	; 0xe2
  4019d0:	f88d 0007 	strb.w	r0, [sp, #7]
	nRF24_send_SPI_command(cmd);
  4019d4:	4b13      	ldr	r3, [pc, #76]	; (401a24 <nRF24_receive_data+0x88>)
  4019d6:	4798      	blx	r3
	uint8_t status_read = nRF24_read_from_register(STATUS);
  4019d8:	2007      	movs	r0, #7
  4019da:	4b13      	ldr	r3, [pc, #76]	; (401a28 <nRF24_receive_data+0x8c>)
  4019dc:	4798      	blx	r3
	status_read = status_read | 64;
  4019de:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  4019e2:	b2c9      	uxtb	r1, r1
  4019e4:	2007      	movs	r0, #7
  4019e6:	4b11      	ldr	r3, [pc, #68]	; (401a2c <nRF24_receive_data+0x90>)
  4019e8:	4798      	blx	r3
	//uint8_t charray[64];
	for(int x = 0; x < 32; x++){
  4019ea:	2400      	movs	r4, #0
  4019ec:	e006      	b.n	4019fc <nRF24_receive_data+0x60>
		printf("%02x ", global_data_pointer[x]);
  4019ee:	4b0a      	ldr	r3, [pc, #40]	; (401a18 <nRF24_receive_data+0x7c>)
  4019f0:	681b      	ldr	r3, [r3, #0]
  4019f2:	5d19      	ldrb	r1, [r3, r4]
  4019f4:	480e      	ldr	r0, [pc, #56]	; (401a30 <nRF24_receive_data+0x94>)
  4019f6:	4b0f      	ldr	r3, [pc, #60]	; (401a34 <nRF24_receive_data+0x98>)
  4019f8:	4798      	blx	r3
	for(int x = 0; x < 32; x++){
  4019fa:	3401      	adds	r4, #1
  4019fc:	2c1f      	cmp	r4, #31
  4019fe:	ddf6      	ble.n	4019ee <nRF24_receive_data+0x52>
	}
	printf("\r\n");
  401a00:	480d      	ldr	r0, [pc, #52]	; (401a38 <nRF24_receive_data+0x9c>)
  401a02:	4b0e      	ldr	r3, [pc, #56]	; (401a3c <nRF24_receive_data+0xa0>)
  401a04:	4798      	blx	r3
}
  401a06:	b002      	add	sp, #8
  401a08:	bd70      	pop	{r4, r5, r6, pc}
  401a0a:	bf00      	nop
  401a0c:	400e1200 	.word	0x400e1200
  401a10:	2040011c 	.word	0x2040011c
  401a14:	004007f9 	.word	0x004007f9
  401a18:	20400118 	.word	0x20400118
  401a1c:	00400829 	.word	0x00400829
  401a20:	004005f1 	.word	0x004005f1
  401a24:	0040196d 	.word	0x0040196d
  401a28:	00401929 	.word	0x00401929
  401a2c:	004018ad 	.word	0x004018ad
  401a30:	00402fb4 	.word	0x00402fb4
  401a34:	00401e49 	.word	0x00401e49
  401a38:	00402fbc 	.word	0x00402fbc
  401a3c:	00401f31 	.word	0x00401f31

00401a40 <nRF24_init>:
void nRF24_init(uint8_t* data_pointer){
  401a40:	b530      	push	{r4, r5, lr}
  401a42:	b083      	sub	sp, #12
  401a44:	4605      	mov	r5, r0
	spi_m_sync_get_io_descriptor(&SPI_0, &spi_0_io);
  401a46:	4c20      	ldr	r4, [pc, #128]	; (401ac8 <nRF24_init+0x88>)
  401a48:	4920      	ldr	r1, [pc, #128]	; (401acc <nRF24_init+0x8c>)
  401a4a:	4620      	mov	r0, r4
  401a4c:	4b20      	ldr	r3, [pc, #128]	; (401ad0 <nRF24_init+0x90>)
  401a4e:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  401a50:	4620      	mov	r0, r4
  401a52:	4b20      	ldr	r3, [pc, #128]	; (401ad4 <nRF24_init+0x94>)
  401a54:	4798      	blx	r3
	global_data_pointer = data_pointer;
  401a56:	4b20      	ldr	r3, [pc, #128]	; (401ad8 <nRF24_init+0x98>)
  401a58:	601d      	str	r5, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401a5e:	4b1f      	ldr	r3, [pc, #124]	; (401adc <nRF24_init+0x9c>)
  401a60:	635a      	str	r2, [r3, #52]	; 0x34
	nRF24_write_to_register(CONFIG,0); //0000 0000 Keep us in power down mode, IRQ pin assertion set to default, CRC disabled, RX / TX control in RX mode
  401a62:	2100      	movs	r1, #0
  401a64:	4608      	mov	r0, r1
  401a66:	4c1e      	ldr	r4, [pc, #120]	; (401ae0 <nRF24_init+0xa0>)
  401a68:	47a0      	blx	r4
	uint8_t status_read = nRF24_read_from_register(STATUS);
  401a6a:	2007      	movs	r0, #7
  401a6c:	4b1d      	ldr	r3, [pc, #116]	; (401ae4 <nRF24_init+0xa4>)
  401a6e:	4798      	blx	r3
	status_read = status_read | 64;
  401a70:	f040 0140 	orr.w	r1, r0, #64	; 0x40
	nRF24_write_to_register(STATUS, status_read);
  401a74:	b2c9      	uxtb	r1, r1
  401a76:	2007      	movs	r0, #7
  401a78:	47a0      	blx	r4
	nRF24_write_to_register(EN_AA,0); //0000 0000 no auto ACK
  401a7a:	2100      	movs	r1, #0
  401a7c:	2001      	movs	r0, #1
  401a7e:	47a0      	blx	r4
	nRF24_write_to_register(EN_RXADDR,0); //0000 0000 disable all RX pipes
  401a80:	2100      	movs	r1, #0
  401a82:	2002      	movs	r0, #2
  401a84:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_AW,3); //0000 0011 5 byte tx rx address fields
  401a86:	2103      	movs	r1, #3
  401a88:	4608      	mov	r0, r1
  401a8a:	47a0      	blx	r4
	nRF24_write_to_register(SETUP_RETR,0); //0000 0000 no auto retransmission
  401a8c:	2100      	movs	r1, #0
  401a8e:	2004      	movs	r0, #4
  401a90:	47a0      	blx	r4
	nRF24_write_to_register(RF_CH,120); //0111 1000 first bit must be 0, 0111 1000 = 120, freq = 2400 + 120 = 2520 = 2.52 GHz, tested to have low interference in UH
  401a92:	2178      	movs	r1, #120	; 0x78
  401a94:	2005      	movs	r0, #5
  401a96:	47a0      	blx	r4
	nRF24_write_to_register(RF_SETUP,6); //0000 0110 1 Mbps and maximum power output
  401a98:	2106      	movs	r1, #6
  401a9a:	4608      	mov	r0, r1
  401a9c:	47a0      	blx	r4
	uint8_t tx_address[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA}; //Needs to be the same on the other nRF24L01+ device
  401a9e:	4b12      	ldr	r3, [pc, #72]	; (401ae8 <nRF24_init+0xa8>)
  401aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
  401aa4:	9000      	str	r0, [sp, #0]
  401aa6:	f88d 1004 	strb.w	r1, [sp, #4]
	nRF24_write_to_register_multi_byte(TX_ADDR, &tx_address[0], 5);
  401aaa:	2205      	movs	r2, #5
  401aac:	4669      	mov	r1, sp
  401aae:	2010      	movs	r0, #16
  401ab0:	4b0e      	ldr	r3, [pc, #56]	; (401aec <nRF24_init+0xac>)
  401ab2:	4798      	blx	r3
	nRF24_write_to_register(CONFIG,2); //0000 0020 enter standby-1, disable checksums
  401ab4:	2102      	movs	r1, #2
  401ab6:	2000      	movs	r0, #0
  401ab8:	47a0      	blx	r4
	ext_irq_register(PB1, nRF24_receive_data); //enable interrupt
  401aba:	490d      	ldr	r1, [pc, #52]	; (401af0 <nRF24_init+0xb0>)
  401abc:	2021      	movs	r0, #33	; 0x21
  401abe:	4b0d      	ldr	r3, [pc, #52]	; (401af4 <nRF24_init+0xb4>)
  401ac0:	4798      	blx	r3
}
  401ac2:	b003      	add	sp, #12
  401ac4:	bd30      	pop	{r4, r5, pc}
  401ac6:	bf00      	nop
  401ac8:	204000e0 	.word	0x204000e0
  401acc:	2040011c 	.word	0x2040011c
  401ad0:	00400a3d 	.word	0x00400a3d
  401ad4:	0040095d 	.word	0x0040095d
  401ad8:	20400118 	.word	0x20400118
  401adc:	400e1400 	.word	0x400e1400
  401ae0:	004018ad 	.word	0x004018ad
  401ae4:	00401929 	.word	0x00401929
  401ae8:	00402fac 	.word	0x00402fac
  401aec:	004018e5 	.word	0x004018e5
  401af0:	0040199d 	.word	0x0040199d
  401af4:	00400689 	.word	0x00400689

00401af8 <nRF24_enter_receive>:
void nRF24_enter_receive(){ //You are in receive at the end of this call
  401af8:	b510      	push	{r4, lr}
  401afa:	b082      	sub	sp, #8
	config_reg = nRF24_read_from_register(CONFIG);
  401afc:	2000      	movs	r0, #0
  401afe:	4b0f      	ldr	r3, [pc, #60]	; (401b3c <nRF24_enter_receive+0x44>)
  401b00:	4798      	blx	r3
	config_reg = config_reg | 1; //XXXX XXX1 PRIM_RX to 1
  401b02:	f040 0101 	orr.w	r1, r0, #1
	nRF24_write_to_register(CONFIG, config_reg);
  401b06:	b2c9      	uxtb	r1, r1
  401b08:	2000      	movs	r0, #0
  401b0a:	4c0d      	ldr	r4, [pc, #52]	; (401b40 <nRF24_enter_receive+0x48>)
  401b0c:	47a0      	blx	r4
	nRF24_write_to_register(EN_RXADDR, 2); //0000 0010 set data pipe 1 to on
  401b0e:	2102      	movs	r1, #2
  401b10:	4608      	mov	r0, r1
  401b12:	47a0      	blx	r4
	uint8_t rx_address[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
  401b14:	4b0b      	ldr	r3, [pc, #44]	; (401b44 <nRF24_enter_receive+0x4c>)
  401b16:	e893 0003 	ldmia.w	r3, {r0, r1}
  401b1a:	9000      	str	r0, [sp, #0]
  401b1c:	f88d 1004 	strb.w	r1, [sp, #4]
	nRF24_write_to_register_multi_byte(RX_ADDR_P1, &rx_address[0], 5);
  401b20:	2205      	movs	r2, #5
  401b22:	4669      	mov	r1, sp
  401b24:	200b      	movs	r0, #11
  401b26:	4b08      	ldr	r3, [pc, #32]	; (401b48 <nRF24_enter_receive+0x50>)
  401b28:	4798      	blx	r3
	nRF24_write_to_register(RX_PW_P1,32); //32 bytes packet size
  401b2a:	2120      	movs	r1, #32
  401b2c:	2012      	movs	r0, #18
  401b2e:	47a0      	blx	r4
	((Pio *)hw)->PIO_SODR = mask;
  401b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401b34:	4b05      	ldr	r3, [pc, #20]	; (401b4c <nRF24_enter_receive+0x54>)
  401b36:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b38:	b002      	add	sp, #8
  401b3a:	bd10      	pop	{r4, pc}
  401b3c:	00401929 	.word	0x00401929
  401b40:	004018ad 	.word	0x004018ad
  401b44:	00402fac 	.word	0x00402fac
  401b48:	004018e5 	.word	0x004018e5
  401b4c:	400e1400 	.word	0x400e1400

00401b50 <set_pwm_channel>:
//uint8_t channel
//uint32_t period
//uint32_t duty_cycle
//sets duty cycle / period of a specified PWM channel
void set_pwm_channel(struct _pwm_device *const device, uint8_t channel, uint32_t duty_cycle){
	hri_pwm_write_CDTYUPD_reg(device->hw, channel, duty_cycle);
  401b50:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401b52:	0149      	lsls	r1, r1, #5
  401b54:	440b      	add	r3, r1
  401b56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hri_pwm_write_CPRDUPD_reg(device->hw, channel, PWM_PERIOD);
  401b5a:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401b5c:	4419      	add	r1, r3
  401b5e:	f44f 6337 	mov.w	r3, #2928	; 0xb70
  401b62:	f8c1 3210 	str.w	r3, [r1, #528]	; 0x210
  401b66:	4770      	bx	lr

00401b68 <set_pwm_motor_0>:
}

//motor 0, D5
void set_pwm_motor_0(struct _pwm_device *const device, uint32_t duty_cycle){
  401b68:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_0, duty_cycle);
  401b6a:	460a      	mov	r2, r1
  401b6c:	2100      	movs	r1, #0
  401b6e:	4b01      	ldr	r3, [pc, #4]	; (401b74 <set_pwm_motor_0+0xc>)
  401b70:	4798      	blx	r3
  401b72:	bd08      	pop	{r3, pc}
  401b74:	00401b51 	.word	0x00401b51

00401b78 <set_pwm_motor_1>:
}
//motor 1, D7
void set_pwm_motor_1(struct _pwm_device *const device, uint32_t duty_cycle){
  401b78:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_1, duty_cycle);
  401b7a:	460a      	mov	r2, r1
  401b7c:	2101      	movs	r1, #1
  401b7e:	4b01      	ldr	r3, [pc, #4]	; (401b84 <set_pwm_motor_1+0xc>)
  401b80:	4798      	blx	r3
  401b82:	bd08      	pop	{r3, pc}
  401b84:	00401b51 	.word	0x00401b51

00401b88 <set_pwm_motor_2>:
}
//motor 2, D6
void set_pwm_motor_2(struct _pwm_device *const device,  uint32_t duty_cycle){
  401b88:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_2, duty_cycle);
  401b8a:	460a      	mov	r2, r1
  401b8c:	2102      	movs	r1, #2
  401b8e:	4b01      	ldr	r3, [pc, #4]	; (401b94 <set_pwm_motor_2+0xc>)
  401b90:	4798      	blx	r3
  401b92:	bd08      	pop	{r3, pc}
  401b94:	00401b51 	.word	0x00401b51

00401b98 <set_pwm_motor_3>:
}
//motor 3, A4 (PC13)
void set_pwm_motor_3(struct _pwm_device *const device,  uint32_t duty_cycle){
  401b98:	b508      	push	{r3, lr}
	set_pwm_channel(device, CHANNEL_3, duty_cycle);
  401b9a:	460a      	mov	r2, r1
  401b9c:	2103      	movs	r1, #3
  401b9e:	4b01      	ldr	r3, [pc, #4]	; (401ba4 <set_pwm_motor_3+0xc>)
  401ba0:	4798      	blx	r3
  401ba2:	bd08      	pop	{r3, pc}
  401ba4:	00401b51 	.word	0x00401b51

00401ba8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401ba8:	b958      	cbnz	r0, 401bc2 <_read+0x1a>
{
  401baa:	b508      	push	{r3, lr}
  401bac:	460b      	mov	r3, r1
  401bae:	4611      	mov	r1, r2
  401bb0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401bb2:	4b05      	ldr	r3, [pc, #20]	; (401bc8 <_read+0x20>)
  401bb4:	4798      	blx	r3
	if (n < 0) {
  401bb6:	2800      	cmp	r0, #0
  401bb8:	db00      	blt.n	401bbc <_read+0x14>
		return -1;
	}

	return n;
}
  401bba:	bd08      	pop	{r3, pc}
		return -1;
  401bbc:	f04f 30ff 	mov.w	r0, #4294967295
  401bc0:	bd08      	pop	{r3, pc}
		return -1;
  401bc2:	f04f 30ff 	mov.w	r0, #4294967295
  401bc6:	4770      	bx	lr
  401bc8:	00401c21 	.word	0x00401c21

00401bcc <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401bcc:	3801      	subs	r0, #1
  401bce:	2802      	cmp	r0, #2
  401bd0:	d80b      	bhi.n	401bea <_write+0x1e>
{
  401bd2:	b508      	push	{r3, lr}
  401bd4:	460b      	mov	r3, r1
  401bd6:	4611      	mov	r1, r2
  401bd8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401bda:	4b05      	ldr	r3, [pc, #20]	; (401bf0 <_write+0x24>)
  401bdc:	4798      	blx	r3
	if (n < 0) {
  401bde:	2800      	cmp	r0, #0
  401be0:	db00      	blt.n	401be4 <_write+0x18>
		return -1;
	}

	return n;
}
  401be2:	bd08      	pop	{r3, pc}
		return -1;
  401be4:	f04f 30ff 	mov.w	r0, #4294967295
  401be8:	bd08      	pop	{r3, pc}
		return -1;
  401bea:	f04f 30ff 	mov.w	r0, #4294967295
  401bee:	4770      	bx	lr
  401bf0:	00401c45 	.word	0x00401c45

00401bf4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401bf4:	b570      	push	{r4, r5, r6, lr}
  401bf6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401bf8:	4d06      	ldr	r5, [pc, #24]	; (401c14 <stdio_io_init+0x20>)
  401bfa:	682b      	ldr	r3, [r5, #0]
  401bfc:	2100      	movs	r1, #0
  401bfe:	6898      	ldr	r0, [r3, #8]
  401c00:	4c05      	ldr	r4, [pc, #20]	; (401c18 <stdio_io_init+0x24>)
  401c02:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401c04:	682b      	ldr	r3, [r5, #0]
  401c06:	2100      	movs	r1, #0
  401c08:	6858      	ldr	r0, [r3, #4]
  401c0a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401c0c:	4b03      	ldr	r3, [pc, #12]	; (401c1c <stdio_io_init+0x28>)
  401c0e:	601e      	str	r6, [r3, #0]
  401c10:	bd70      	pop	{r4, r5, r6, pc}
  401c12:	bf00      	nop
  401c14:	20400000 	.word	0x20400000
  401c18:	00401f61 	.word	0x00401f61
  401c1c:	204000ac 	.word	0x204000ac

00401c20 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401c20:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401c22:	4b06      	ldr	r3, [pc, #24]	; (401c3c <stdio_io_read+0x1c>)
  401c24:	681b      	ldr	r3, [r3, #0]
  401c26:	b133      	cbz	r3, 401c36 <stdio_io_read+0x16>
  401c28:	460a      	mov	r2, r1
  401c2a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401c2c:	b292      	uxth	r2, r2
  401c2e:	4618      	mov	r0, r3
  401c30:	4b03      	ldr	r3, [pc, #12]	; (401c40 <stdio_io_read+0x20>)
  401c32:	4798      	blx	r3
  401c34:	bd08      	pop	{r3, pc}
		return 0;
  401c36:	2000      	movs	r0, #0
}
  401c38:	bd08      	pop	{r3, pc}
  401c3a:	bf00      	nop
  401c3c:	204000ac 	.word	0x204000ac
  401c40:	00400829 	.word	0x00400829

00401c44 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401c44:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401c46:	4b06      	ldr	r3, [pc, #24]	; (401c60 <stdio_io_write+0x1c>)
  401c48:	681b      	ldr	r3, [r3, #0]
  401c4a:	b133      	cbz	r3, 401c5a <stdio_io_write+0x16>
  401c4c:	460a      	mov	r2, r1
  401c4e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401c50:	b292      	uxth	r2, r2
  401c52:	4618      	mov	r0, r3
  401c54:	4b03      	ldr	r3, [pc, #12]	; (401c64 <stdio_io_write+0x20>)
  401c56:	4798      	blx	r3
  401c58:	bd08      	pop	{r3, pc}
		return 0;
  401c5a:	2000      	movs	r0, #0
}
  401c5c:	bd08      	pop	{r3, pc}
  401c5e:	bf00      	nop
  401c60:	204000ac 	.word	0x204000ac
  401c64:	004007f9 	.word	0x004007f9

00401c68 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401c68:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  401c6a:	4c04      	ldr	r4, [pc, #16]	; (401c7c <stdio_redirect_init+0x14>)
  401c6c:	4620      	mov	r0, r4
  401c6e:	4b04      	ldr	r3, [pc, #16]	; (401c80 <stdio_redirect_init+0x18>)
  401c70:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  401c72:	4620      	mov	r0, r4
  401c74:	4b03      	ldr	r3, [pc, #12]	; (401c84 <stdio_redirect_init+0x1c>)
  401c76:	4798      	blx	r3
  401c78:	bd10      	pop	{r4, pc}
  401c7a:	bf00      	nop
  401c7c:	204000d4 	.word	0x204000d4
  401c80:	00400b81 	.word	0x00400b81
  401c84:	00401bf5 	.word	0x00401bf5

00401c88 <__libc_init_array>:
  401c88:	b570      	push	{r4, r5, r6, lr}
  401c8a:	4e0d      	ldr	r6, [pc, #52]	; (401cc0 <__libc_init_array+0x38>)
  401c8c:	4c0d      	ldr	r4, [pc, #52]	; (401cc4 <__libc_init_array+0x3c>)
  401c8e:	1ba4      	subs	r4, r4, r6
  401c90:	10a4      	asrs	r4, r4, #2
  401c92:	2500      	movs	r5, #0
  401c94:	42a5      	cmp	r5, r4
  401c96:	d109      	bne.n	401cac <__libc_init_array+0x24>
  401c98:	4e0b      	ldr	r6, [pc, #44]	; (401cc8 <__libc_init_array+0x40>)
  401c9a:	4c0c      	ldr	r4, [pc, #48]	; (401ccc <__libc_init_array+0x44>)
  401c9c:	f001 f9dc 	bl	403058 <_init>
  401ca0:	1ba4      	subs	r4, r4, r6
  401ca2:	10a4      	asrs	r4, r4, #2
  401ca4:	2500      	movs	r5, #0
  401ca6:	42a5      	cmp	r5, r4
  401ca8:	d105      	bne.n	401cb6 <__libc_init_array+0x2e>
  401caa:	bd70      	pop	{r4, r5, r6, pc}
  401cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401cb0:	4798      	blx	r3
  401cb2:	3501      	adds	r5, #1
  401cb4:	e7ee      	b.n	401c94 <__libc_init_array+0xc>
  401cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401cba:	4798      	blx	r3
  401cbc:	3501      	adds	r5, #1
  401cbe:	e7f2      	b.n	401ca6 <__libc_init_array+0x1e>
  401cc0:	00403064 	.word	0x00403064
  401cc4:	00403064 	.word	0x00403064
  401cc8:	00403064 	.word	0x00403064
  401ccc:	00403068 	.word	0x00403068

00401cd0 <malloc>:
  401cd0:	4b02      	ldr	r3, [pc, #8]	; (401cdc <malloc+0xc>)
  401cd2:	4601      	mov	r1, r0
  401cd4:	6818      	ldr	r0, [r3, #0]
  401cd6:	f000 b859 	b.w	401d8c <_malloc_r>
  401cda:	bf00      	nop
  401cdc:	20400000 	.word	0x20400000

00401ce0 <memset>:
  401ce0:	4402      	add	r2, r0
  401ce2:	4603      	mov	r3, r0
  401ce4:	4293      	cmp	r3, r2
  401ce6:	d100      	bne.n	401cea <memset+0xa>
  401ce8:	4770      	bx	lr
  401cea:	f803 1b01 	strb.w	r1, [r3], #1
  401cee:	e7f9      	b.n	401ce4 <memset+0x4>

00401cf0 <_free_r>:
  401cf0:	b538      	push	{r3, r4, r5, lr}
  401cf2:	4605      	mov	r5, r0
  401cf4:	2900      	cmp	r1, #0
  401cf6:	d045      	beq.n	401d84 <_free_r+0x94>
  401cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401cfc:	1f0c      	subs	r4, r1, #4
  401cfe:	2b00      	cmp	r3, #0
  401d00:	bfb8      	it	lt
  401d02:	18e4      	addlt	r4, r4, r3
  401d04:	f000 fc82 	bl	40260c <__malloc_lock>
  401d08:	4a1f      	ldr	r2, [pc, #124]	; (401d88 <_free_r+0x98>)
  401d0a:	6813      	ldr	r3, [r2, #0]
  401d0c:	4610      	mov	r0, r2
  401d0e:	b933      	cbnz	r3, 401d1e <_free_r+0x2e>
  401d10:	6063      	str	r3, [r4, #4]
  401d12:	6014      	str	r4, [r2, #0]
  401d14:	4628      	mov	r0, r5
  401d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401d1a:	f000 bc78 	b.w	40260e <__malloc_unlock>
  401d1e:	42a3      	cmp	r3, r4
  401d20:	d90c      	bls.n	401d3c <_free_r+0x4c>
  401d22:	6821      	ldr	r1, [r4, #0]
  401d24:	1862      	adds	r2, r4, r1
  401d26:	4293      	cmp	r3, r2
  401d28:	bf04      	itt	eq
  401d2a:	681a      	ldreq	r2, [r3, #0]
  401d2c:	685b      	ldreq	r3, [r3, #4]
  401d2e:	6063      	str	r3, [r4, #4]
  401d30:	bf04      	itt	eq
  401d32:	1852      	addeq	r2, r2, r1
  401d34:	6022      	streq	r2, [r4, #0]
  401d36:	6004      	str	r4, [r0, #0]
  401d38:	e7ec      	b.n	401d14 <_free_r+0x24>
  401d3a:	4613      	mov	r3, r2
  401d3c:	685a      	ldr	r2, [r3, #4]
  401d3e:	b10a      	cbz	r2, 401d44 <_free_r+0x54>
  401d40:	42a2      	cmp	r2, r4
  401d42:	d9fa      	bls.n	401d3a <_free_r+0x4a>
  401d44:	6819      	ldr	r1, [r3, #0]
  401d46:	1858      	adds	r0, r3, r1
  401d48:	42a0      	cmp	r0, r4
  401d4a:	d10b      	bne.n	401d64 <_free_r+0x74>
  401d4c:	6820      	ldr	r0, [r4, #0]
  401d4e:	4401      	add	r1, r0
  401d50:	1858      	adds	r0, r3, r1
  401d52:	4282      	cmp	r2, r0
  401d54:	6019      	str	r1, [r3, #0]
  401d56:	d1dd      	bne.n	401d14 <_free_r+0x24>
  401d58:	6810      	ldr	r0, [r2, #0]
  401d5a:	6852      	ldr	r2, [r2, #4]
  401d5c:	605a      	str	r2, [r3, #4]
  401d5e:	4401      	add	r1, r0
  401d60:	6019      	str	r1, [r3, #0]
  401d62:	e7d7      	b.n	401d14 <_free_r+0x24>
  401d64:	d902      	bls.n	401d6c <_free_r+0x7c>
  401d66:	230c      	movs	r3, #12
  401d68:	602b      	str	r3, [r5, #0]
  401d6a:	e7d3      	b.n	401d14 <_free_r+0x24>
  401d6c:	6820      	ldr	r0, [r4, #0]
  401d6e:	1821      	adds	r1, r4, r0
  401d70:	428a      	cmp	r2, r1
  401d72:	bf04      	itt	eq
  401d74:	6811      	ldreq	r1, [r2, #0]
  401d76:	6852      	ldreq	r2, [r2, #4]
  401d78:	6062      	str	r2, [r4, #4]
  401d7a:	bf04      	itt	eq
  401d7c:	1809      	addeq	r1, r1, r0
  401d7e:	6021      	streq	r1, [r4, #0]
  401d80:	605c      	str	r4, [r3, #4]
  401d82:	e7c7      	b.n	401d14 <_free_r+0x24>
  401d84:	bd38      	pop	{r3, r4, r5, pc}
  401d86:	bf00      	nop
  401d88:	204000b0 	.word	0x204000b0

00401d8c <_malloc_r>:
  401d8c:	b570      	push	{r4, r5, r6, lr}
  401d8e:	1ccd      	adds	r5, r1, #3
  401d90:	f025 0503 	bic.w	r5, r5, #3
  401d94:	3508      	adds	r5, #8
  401d96:	2d0c      	cmp	r5, #12
  401d98:	bf38      	it	cc
  401d9a:	250c      	movcc	r5, #12
  401d9c:	2d00      	cmp	r5, #0
  401d9e:	4606      	mov	r6, r0
  401da0:	db01      	blt.n	401da6 <_malloc_r+0x1a>
  401da2:	42a9      	cmp	r1, r5
  401da4:	d903      	bls.n	401dae <_malloc_r+0x22>
  401da6:	230c      	movs	r3, #12
  401da8:	6033      	str	r3, [r6, #0]
  401daa:	2000      	movs	r0, #0
  401dac:	bd70      	pop	{r4, r5, r6, pc}
  401dae:	f000 fc2d 	bl	40260c <__malloc_lock>
  401db2:	4a23      	ldr	r2, [pc, #140]	; (401e40 <_malloc_r+0xb4>)
  401db4:	6814      	ldr	r4, [r2, #0]
  401db6:	4621      	mov	r1, r4
  401db8:	b991      	cbnz	r1, 401de0 <_malloc_r+0x54>
  401dba:	4c22      	ldr	r4, [pc, #136]	; (401e44 <_malloc_r+0xb8>)
  401dbc:	6823      	ldr	r3, [r4, #0]
  401dbe:	b91b      	cbnz	r3, 401dc8 <_malloc_r+0x3c>
  401dc0:	4630      	mov	r0, r6
  401dc2:	f000 f8bd 	bl	401f40 <_sbrk_r>
  401dc6:	6020      	str	r0, [r4, #0]
  401dc8:	4629      	mov	r1, r5
  401dca:	4630      	mov	r0, r6
  401dcc:	f000 f8b8 	bl	401f40 <_sbrk_r>
  401dd0:	1c43      	adds	r3, r0, #1
  401dd2:	d126      	bne.n	401e22 <_malloc_r+0x96>
  401dd4:	230c      	movs	r3, #12
  401dd6:	6033      	str	r3, [r6, #0]
  401dd8:	4630      	mov	r0, r6
  401dda:	f000 fc18 	bl	40260e <__malloc_unlock>
  401dde:	e7e4      	b.n	401daa <_malloc_r+0x1e>
  401de0:	680b      	ldr	r3, [r1, #0]
  401de2:	1b5b      	subs	r3, r3, r5
  401de4:	d41a      	bmi.n	401e1c <_malloc_r+0x90>
  401de6:	2b0b      	cmp	r3, #11
  401de8:	d90f      	bls.n	401e0a <_malloc_r+0x7e>
  401dea:	600b      	str	r3, [r1, #0]
  401dec:	50cd      	str	r5, [r1, r3]
  401dee:	18cc      	adds	r4, r1, r3
  401df0:	4630      	mov	r0, r6
  401df2:	f000 fc0c 	bl	40260e <__malloc_unlock>
  401df6:	f104 000b 	add.w	r0, r4, #11
  401dfa:	1d23      	adds	r3, r4, #4
  401dfc:	f020 0007 	bic.w	r0, r0, #7
  401e00:	1ac3      	subs	r3, r0, r3
  401e02:	d01b      	beq.n	401e3c <_malloc_r+0xb0>
  401e04:	425a      	negs	r2, r3
  401e06:	50e2      	str	r2, [r4, r3]
  401e08:	bd70      	pop	{r4, r5, r6, pc}
  401e0a:	428c      	cmp	r4, r1
  401e0c:	bf0d      	iteet	eq
  401e0e:	6863      	ldreq	r3, [r4, #4]
  401e10:	684b      	ldrne	r3, [r1, #4]
  401e12:	6063      	strne	r3, [r4, #4]
  401e14:	6013      	streq	r3, [r2, #0]
  401e16:	bf18      	it	ne
  401e18:	460c      	movne	r4, r1
  401e1a:	e7e9      	b.n	401df0 <_malloc_r+0x64>
  401e1c:	460c      	mov	r4, r1
  401e1e:	6849      	ldr	r1, [r1, #4]
  401e20:	e7ca      	b.n	401db8 <_malloc_r+0x2c>
  401e22:	1cc4      	adds	r4, r0, #3
  401e24:	f024 0403 	bic.w	r4, r4, #3
  401e28:	42a0      	cmp	r0, r4
  401e2a:	d005      	beq.n	401e38 <_malloc_r+0xac>
  401e2c:	1a21      	subs	r1, r4, r0
  401e2e:	4630      	mov	r0, r6
  401e30:	f000 f886 	bl	401f40 <_sbrk_r>
  401e34:	3001      	adds	r0, #1
  401e36:	d0cd      	beq.n	401dd4 <_malloc_r+0x48>
  401e38:	6025      	str	r5, [r4, #0]
  401e3a:	e7d9      	b.n	401df0 <_malloc_r+0x64>
  401e3c:	bd70      	pop	{r4, r5, r6, pc}
  401e3e:	bf00      	nop
  401e40:	204000b0 	.word	0x204000b0
  401e44:	204000b4 	.word	0x204000b4

00401e48 <iprintf>:
  401e48:	b40f      	push	{r0, r1, r2, r3}
  401e4a:	4b0a      	ldr	r3, [pc, #40]	; (401e74 <iprintf+0x2c>)
  401e4c:	b513      	push	{r0, r1, r4, lr}
  401e4e:	681c      	ldr	r4, [r3, #0]
  401e50:	b124      	cbz	r4, 401e5c <iprintf+0x14>
  401e52:	69a3      	ldr	r3, [r4, #24]
  401e54:	b913      	cbnz	r3, 401e5c <iprintf+0x14>
  401e56:	4620      	mov	r0, r4
  401e58:	f000 faea 	bl	402430 <__sinit>
  401e5c:	ab05      	add	r3, sp, #20
  401e5e:	9a04      	ldr	r2, [sp, #16]
  401e60:	68a1      	ldr	r1, [r4, #8]
  401e62:	9301      	str	r3, [sp, #4]
  401e64:	4620      	mov	r0, r4
  401e66:	f000 fbfb 	bl	402660 <_vfiprintf_r>
  401e6a:	b002      	add	sp, #8
  401e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401e70:	b004      	add	sp, #16
  401e72:	4770      	bx	lr
  401e74:	20400000 	.word	0x20400000

00401e78 <_puts_r>:
  401e78:	b570      	push	{r4, r5, r6, lr}
  401e7a:	460e      	mov	r6, r1
  401e7c:	4605      	mov	r5, r0
  401e7e:	b118      	cbz	r0, 401e88 <_puts_r+0x10>
  401e80:	6983      	ldr	r3, [r0, #24]
  401e82:	b90b      	cbnz	r3, 401e88 <_puts_r+0x10>
  401e84:	f000 fad4 	bl	402430 <__sinit>
  401e88:	69ab      	ldr	r3, [r5, #24]
  401e8a:	68ac      	ldr	r4, [r5, #8]
  401e8c:	b913      	cbnz	r3, 401e94 <_puts_r+0x1c>
  401e8e:	4628      	mov	r0, r5
  401e90:	f000 face 	bl	402430 <__sinit>
  401e94:	4b23      	ldr	r3, [pc, #140]	; (401f24 <_puts_r+0xac>)
  401e96:	429c      	cmp	r4, r3
  401e98:	d117      	bne.n	401eca <_puts_r+0x52>
  401e9a:	686c      	ldr	r4, [r5, #4]
  401e9c:	89a3      	ldrh	r3, [r4, #12]
  401e9e:	071b      	lsls	r3, r3, #28
  401ea0:	d51d      	bpl.n	401ede <_puts_r+0x66>
  401ea2:	6923      	ldr	r3, [r4, #16]
  401ea4:	b1db      	cbz	r3, 401ede <_puts_r+0x66>
  401ea6:	3e01      	subs	r6, #1
  401ea8:	68a3      	ldr	r3, [r4, #8]
  401eaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  401eae:	3b01      	subs	r3, #1
  401eb0:	60a3      	str	r3, [r4, #8]
  401eb2:	b9e9      	cbnz	r1, 401ef0 <_puts_r+0x78>
  401eb4:	2b00      	cmp	r3, #0
  401eb6:	da2e      	bge.n	401f16 <_puts_r+0x9e>
  401eb8:	4622      	mov	r2, r4
  401eba:	210a      	movs	r1, #10
  401ebc:	4628      	mov	r0, r5
  401ebe:	f000 f905 	bl	4020cc <__swbuf_r>
  401ec2:	3001      	adds	r0, #1
  401ec4:	d011      	beq.n	401eea <_puts_r+0x72>
  401ec6:	200a      	movs	r0, #10
  401ec8:	bd70      	pop	{r4, r5, r6, pc}
  401eca:	4b17      	ldr	r3, [pc, #92]	; (401f28 <_puts_r+0xb0>)
  401ecc:	429c      	cmp	r4, r3
  401ece:	d101      	bne.n	401ed4 <_puts_r+0x5c>
  401ed0:	68ac      	ldr	r4, [r5, #8]
  401ed2:	e7e3      	b.n	401e9c <_puts_r+0x24>
  401ed4:	4b15      	ldr	r3, [pc, #84]	; (401f2c <_puts_r+0xb4>)
  401ed6:	429c      	cmp	r4, r3
  401ed8:	bf08      	it	eq
  401eda:	68ec      	ldreq	r4, [r5, #12]
  401edc:	e7de      	b.n	401e9c <_puts_r+0x24>
  401ede:	4621      	mov	r1, r4
  401ee0:	4628      	mov	r0, r5
  401ee2:	f000 f945 	bl	402170 <__swsetup_r>
  401ee6:	2800      	cmp	r0, #0
  401ee8:	d0dd      	beq.n	401ea6 <_puts_r+0x2e>
  401eea:	f04f 30ff 	mov.w	r0, #4294967295
  401eee:	bd70      	pop	{r4, r5, r6, pc}
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	da04      	bge.n	401efe <_puts_r+0x86>
  401ef4:	69a2      	ldr	r2, [r4, #24]
  401ef6:	4293      	cmp	r3, r2
  401ef8:	db06      	blt.n	401f08 <_puts_r+0x90>
  401efa:	290a      	cmp	r1, #10
  401efc:	d004      	beq.n	401f08 <_puts_r+0x90>
  401efe:	6823      	ldr	r3, [r4, #0]
  401f00:	1c5a      	adds	r2, r3, #1
  401f02:	6022      	str	r2, [r4, #0]
  401f04:	7019      	strb	r1, [r3, #0]
  401f06:	e7cf      	b.n	401ea8 <_puts_r+0x30>
  401f08:	4622      	mov	r2, r4
  401f0a:	4628      	mov	r0, r5
  401f0c:	f000 f8de 	bl	4020cc <__swbuf_r>
  401f10:	3001      	adds	r0, #1
  401f12:	d1c9      	bne.n	401ea8 <_puts_r+0x30>
  401f14:	e7e9      	b.n	401eea <_puts_r+0x72>
  401f16:	6823      	ldr	r3, [r4, #0]
  401f18:	200a      	movs	r0, #10
  401f1a:	1c5a      	adds	r2, r3, #1
  401f1c:	6022      	str	r2, [r4, #0]
  401f1e:	7018      	strb	r0, [r3, #0]
  401f20:	bd70      	pop	{r4, r5, r6, pc}
  401f22:	bf00      	nop
  401f24:	00402fe4 	.word	0x00402fe4
  401f28:	00403004 	.word	0x00403004
  401f2c:	00402fc4 	.word	0x00402fc4

00401f30 <puts>:
  401f30:	4b02      	ldr	r3, [pc, #8]	; (401f3c <puts+0xc>)
  401f32:	4601      	mov	r1, r0
  401f34:	6818      	ldr	r0, [r3, #0]
  401f36:	f7ff bf9f 	b.w	401e78 <_puts_r>
  401f3a:	bf00      	nop
  401f3c:	20400000 	.word	0x20400000

00401f40 <_sbrk_r>:
  401f40:	b538      	push	{r3, r4, r5, lr}
  401f42:	4c06      	ldr	r4, [pc, #24]	; (401f5c <_sbrk_r+0x1c>)
  401f44:	2300      	movs	r3, #0
  401f46:	4605      	mov	r5, r0
  401f48:	4608      	mov	r0, r1
  401f4a:	6023      	str	r3, [r4, #0]
  401f4c:	f7fe fe32 	bl	400bb4 <_sbrk>
  401f50:	1c43      	adds	r3, r0, #1
  401f52:	d102      	bne.n	401f5a <_sbrk_r+0x1a>
  401f54:	6823      	ldr	r3, [r4, #0]
  401f56:	b103      	cbz	r3, 401f5a <_sbrk_r+0x1a>
  401f58:	602b      	str	r3, [r5, #0]
  401f5a:	bd38      	pop	{r3, r4, r5, pc}
  401f5c:	20400120 	.word	0x20400120

00401f60 <setbuf>:
  401f60:	2900      	cmp	r1, #0
  401f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401f66:	bf0c      	ite	eq
  401f68:	2202      	moveq	r2, #2
  401f6a:	2200      	movne	r2, #0
  401f6c:	f000 b800 	b.w	401f70 <setvbuf>

00401f70 <setvbuf>:
  401f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401f74:	461d      	mov	r5, r3
  401f76:	4b51      	ldr	r3, [pc, #324]	; (4020bc <setvbuf+0x14c>)
  401f78:	681e      	ldr	r6, [r3, #0]
  401f7a:	4604      	mov	r4, r0
  401f7c:	460f      	mov	r7, r1
  401f7e:	4690      	mov	r8, r2
  401f80:	b126      	cbz	r6, 401f8c <setvbuf+0x1c>
  401f82:	69b3      	ldr	r3, [r6, #24]
  401f84:	b913      	cbnz	r3, 401f8c <setvbuf+0x1c>
  401f86:	4630      	mov	r0, r6
  401f88:	f000 fa52 	bl	402430 <__sinit>
  401f8c:	4b4c      	ldr	r3, [pc, #304]	; (4020c0 <setvbuf+0x150>)
  401f8e:	429c      	cmp	r4, r3
  401f90:	d152      	bne.n	402038 <setvbuf+0xc8>
  401f92:	6874      	ldr	r4, [r6, #4]
  401f94:	f1b8 0f02 	cmp.w	r8, #2
  401f98:	d006      	beq.n	401fa8 <setvbuf+0x38>
  401f9a:	f1b8 0f01 	cmp.w	r8, #1
  401f9e:	f200 8089 	bhi.w	4020b4 <setvbuf+0x144>
  401fa2:	2d00      	cmp	r5, #0
  401fa4:	f2c0 8086 	blt.w	4020b4 <setvbuf+0x144>
  401fa8:	4621      	mov	r1, r4
  401faa:	4630      	mov	r0, r6
  401fac:	f000 f9d6 	bl	40235c <_fflush_r>
  401fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401fb2:	b141      	cbz	r1, 401fc6 <setvbuf+0x56>
  401fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401fb8:	4299      	cmp	r1, r3
  401fba:	d002      	beq.n	401fc2 <setvbuf+0x52>
  401fbc:	4630      	mov	r0, r6
  401fbe:	f7ff fe97 	bl	401cf0 <_free_r>
  401fc2:	2300      	movs	r3, #0
  401fc4:	6363      	str	r3, [r4, #52]	; 0x34
  401fc6:	2300      	movs	r3, #0
  401fc8:	61a3      	str	r3, [r4, #24]
  401fca:	6063      	str	r3, [r4, #4]
  401fcc:	89a3      	ldrh	r3, [r4, #12]
  401fce:	061b      	lsls	r3, r3, #24
  401fd0:	d503      	bpl.n	401fda <setvbuf+0x6a>
  401fd2:	6921      	ldr	r1, [r4, #16]
  401fd4:	4630      	mov	r0, r6
  401fd6:	f7ff fe8b 	bl	401cf0 <_free_r>
  401fda:	89a3      	ldrh	r3, [r4, #12]
  401fdc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401fe0:	f023 0303 	bic.w	r3, r3, #3
  401fe4:	f1b8 0f02 	cmp.w	r8, #2
  401fe8:	81a3      	strh	r3, [r4, #12]
  401fea:	d05d      	beq.n	4020a8 <setvbuf+0x138>
  401fec:	ab01      	add	r3, sp, #4
  401fee:	466a      	mov	r2, sp
  401ff0:	4621      	mov	r1, r4
  401ff2:	4630      	mov	r0, r6
  401ff4:	f000 faa6 	bl	402544 <__swhatbuf_r>
  401ff8:	89a3      	ldrh	r3, [r4, #12]
  401ffa:	4318      	orrs	r0, r3
  401ffc:	81a0      	strh	r0, [r4, #12]
  401ffe:	bb2d      	cbnz	r5, 40204c <setvbuf+0xdc>
  402000:	9d00      	ldr	r5, [sp, #0]
  402002:	4628      	mov	r0, r5
  402004:	f7ff fe64 	bl	401cd0 <malloc>
  402008:	4607      	mov	r7, r0
  40200a:	2800      	cmp	r0, #0
  40200c:	d14e      	bne.n	4020ac <setvbuf+0x13c>
  40200e:	f8dd 9000 	ldr.w	r9, [sp]
  402012:	45a9      	cmp	r9, r5
  402014:	d13c      	bne.n	402090 <setvbuf+0x120>
  402016:	f04f 30ff 	mov.w	r0, #4294967295
  40201a:	89a3      	ldrh	r3, [r4, #12]
  40201c:	f043 0302 	orr.w	r3, r3, #2
  402020:	81a3      	strh	r3, [r4, #12]
  402022:	2300      	movs	r3, #0
  402024:	60a3      	str	r3, [r4, #8]
  402026:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40202a:	6023      	str	r3, [r4, #0]
  40202c:	6123      	str	r3, [r4, #16]
  40202e:	2301      	movs	r3, #1
  402030:	6163      	str	r3, [r4, #20]
  402032:	b003      	add	sp, #12
  402034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402038:	4b22      	ldr	r3, [pc, #136]	; (4020c4 <setvbuf+0x154>)
  40203a:	429c      	cmp	r4, r3
  40203c:	d101      	bne.n	402042 <setvbuf+0xd2>
  40203e:	68b4      	ldr	r4, [r6, #8]
  402040:	e7a8      	b.n	401f94 <setvbuf+0x24>
  402042:	4b21      	ldr	r3, [pc, #132]	; (4020c8 <setvbuf+0x158>)
  402044:	429c      	cmp	r4, r3
  402046:	bf08      	it	eq
  402048:	68f4      	ldreq	r4, [r6, #12]
  40204a:	e7a3      	b.n	401f94 <setvbuf+0x24>
  40204c:	2f00      	cmp	r7, #0
  40204e:	d0d8      	beq.n	402002 <setvbuf+0x92>
  402050:	69b3      	ldr	r3, [r6, #24]
  402052:	b913      	cbnz	r3, 40205a <setvbuf+0xea>
  402054:	4630      	mov	r0, r6
  402056:	f000 f9eb 	bl	402430 <__sinit>
  40205a:	f1b8 0f01 	cmp.w	r8, #1
  40205e:	bf08      	it	eq
  402060:	89a3      	ldrheq	r3, [r4, #12]
  402062:	6027      	str	r7, [r4, #0]
  402064:	bf04      	itt	eq
  402066:	f043 0301 	orreq.w	r3, r3, #1
  40206a:	81a3      	strheq	r3, [r4, #12]
  40206c:	89a3      	ldrh	r3, [r4, #12]
  40206e:	6127      	str	r7, [r4, #16]
  402070:	f013 0008 	ands.w	r0, r3, #8
  402074:	6165      	str	r5, [r4, #20]
  402076:	d01b      	beq.n	4020b0 <setvbuf+0x140>
  402078:	f013 0001 	ands.w	r0, r3, #1
  40207c:	bf18      	it	ne
  40207e:	426d      	negne	r5, r5
  402080:	f04f 0300 	mov.w	r3, #0
  402084:	bf1d      	ittte	ne
  402086:	60a3      	strne	r3, [r4, #8]
  402088:	61a5      	strne	r5, [r4, #24]
  40208a:	4618      	movne	r0, r3
  40208c:	60a5      	streq	r5, [r4, #8]
  40208e:	e7d0      	b.n	402032 <setvbuf+0xc2>
  402090:	4648      	mov	r0, r9
  402092:	f7ff fe1d 	bl	401cd0 <malloc>
  402096:	4607      	mov	r7, r0
  402098:	2800      	cmp	r0, #0
  40209a:	d0bc      	beq.n	402016 <setvbuf+0xa6>
  40209c:	89a3      	ldrh	r3, [r4, #12]
  40209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4020a2:	81a3      	strh	r3, [r4, #12]
  4020a4:	464d      	mov	r5, r9
  4020a6:	e7d3      	b.n	402050 <setvbuf+0xe0>
  4020a8:	2000      	movs	r0, #0
  4020aa:	e7b6      	b.n	40201a <setvbuf+0xaa>
  4020ac:	46a9      	mov	r9, r5
  4020ae:	e7f5      	b.n	40209c <setvbuf+0x12c>
  4020b0:	60a0      	str	r0, [r4, #8]
  4020b2:	e7be      	b.n	402032 <setvbuf+0xc2>
  4020b4:	f04f 30ff 	mov.w	r0, #4294967295
  4020b8:	e7bb      	b.n	402032 <setvbuf+0xc2>
  4020ba:	bf00      	nop
  4020bc:	20400000 	.word	0x20400000
  4020c0:	00402fe4 	.word	0x00402fe4
  4020c4:	00403004 	.word	0x00403004
  4020c8:	00402fc4 	.word	0x00402fc4

004020cc <__swbuf_r>:
  4020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4020ce:	460e      	mov	r6, r1
  4020d0:	4614      	mov	r4, r2
  4020d2:	4605      	mov	r5, r0
  4020d4:	b118      	cbz	r0, 4020de <__swbuf_r+0x12>
  4020d6:	6983      	ldr	r3, [r0, #24]
  4020d8:	b90b      	cbnz	r3, 4020de <__swbuf_r+0x12>
  4020da:	f000 f9a9 	bl	402430 <__sinit>
  4020de:	4b21      	ldr	r3, [pc, #132]	; (402164 <__swbuf_r+0x98>)
  4020e0:	429c      	cmp	r4, r3
  4020e2:	d12a      	bne.n	40213a <__swbuf_r+0x6e>
  4020e4:	686c      	ldr	r4, [r5, #4]
  4020e6:	69a3      	ldr	r3, [r4, #24]
  4020e8:	60a3      	str	r3, [r4, #8]
  4020ea:	89a3      	ldrh	r3, [r4, #12]
  4020ec:	071a      	lsls	r2, r3, #28
  4020ee:	d52e      	bpl.n	40214e <__swbuf_r+0x82>
  4020f0:	6923      	ldr	r3, [r4, #16]
  4020f2:	b363      	cbz	r3, 40214e <__swbuf_r+0x82>
  4020f4:	6923      	ldr	r3, [r4, #16]
  4020f6:	6820      	ldr	r0, [r4, #0]
  4020f8:	1ac0      	subs	r0, r0, r3
  4020fa:	6963      	ldr	r3, [r4, #20]
  4020fc:	b2f6      	uxtb	r6, r6
  4020fe:	4298      	cmp	r0, r3
  402100:	4637      	mov	r7, r6
  402102:	db04      	blt.n	40210e <__swbuf_r+0x42>
  402104:	4621      	mov	r1, r4
  402106:	4628      	mov	r0, r5
  402108:	f000 f928 	bl	40235c <_fflush_r>
  40210c:	bb28      	cbnz	r0, 40215a <__swbuf_r+0x8e>
  40210e:	68a3      	ldr	r3, [r4, #8]
  402110:	3b01      	subs	r3, #1
  402112:	60a3      	str	r3, [r4, #8]
  402114:	6823      	ldr	r3, [r4, #0]
  402116:	1c5a      	adds	r2, r3, #1
  402118:	6022      	str	r2, [r4, #0]
  40211a:	701e      	strb	r6, [r3, #0]
  40211c:	6963      	ldr	r3, [r4, #20]
  40211e:	3001      	adds	r0, #1
  402120:	4298      	cmp	r0, r3
  402122:	d004      	beq.n	40212e <__swbuf_r+0x62>
  402124:	89a3      	ldrh	r3, [r4, #12]
  402126:	07db      	lsls	r3, r3, #31
  402128:	d519      	bpl.n	40215e <__swbuf_r+0x92>
  40212a:	2e0a      	cmp	r6, #10
  40212c:	d117      	bne.n	40215e <__swbuf_r+0x92>
  40212e:	4621      	mov	r1, r4
  402130:	4628      	mov	r0, r5
  402132:	f000 f913 	bl	40235c <_fflush_r>
  402136:	b190      	cbz	r0, 40215e <__swbuf_r+0x92>
  402138:	e00f      	b.n	40215a <__swbuf_r+0x8e>
  40213a:	4b0b      	ldr	r3, [pc, #44]	; (402168 <__swbuf_r+0x9c>)
  40213c:	429c      	cmp	r4, r3
  40213e:	d101      	bne.n	402144 <__swbuf_r+0x78>
  402140:	68ac      	ldr	r4, [r5, #8]
  402142:	e7d0      	b.n	4020e6 <__swbuf_r+0x1a>
  402144:	4b09      	ldr	r3, [pc, #36]	; (40216c <__swbuf_r+0xa0>)
  402146:	429c      	cmp	r4, r3
  402148:	bf08      	it	eq
  40214a:	68ec      	ldreq	r4, [r5, #12]
  40214c:	e7cb      	b.n	4020e6 <__swbuf_r+0x1a>
  40214e:	4621      	mov	r1, r4
  402150:	4628      	mov	r0, r5
  402152:	f000 f80d 	bl	402170 <__swsetup_r>
  402156:	2800      	cmp	r0, #0
  402158:	d0cc      	beq.n	4020f4 <__swbuf_r+0x28>
  40215a:	f04f 37ff 	mov.w	r7, #4294967295
  40215e:	4638      	mov	r0, r7
  402160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402162:	bf00      	nop
  402164:	00402fe4 	.word	0x00402fe4
  402168:	00403004 	.word	0x00403004
  40216c:	00402fc4 	.word	0x00402fc4

00402170 <__swsetup_r>:
  402170:	4b32      	ldr	r3, [pc, #200]	; (40223c <__swsetup_r+0xcc>)
  402172:	b570      	push	{r4, r5, r6, lr}
  402174:	681d      	ldr	r5, [r3, #0]
  402176:	4606      	mov	r6, r0
  402178:	460c      	mov	r4, r1
  40217a:	b125      	cbz	r5, 402186 <__swsetup_r+0x16>
  40217c:	69ab      	ldr	r3, [r5, #24]
  40217e:	b913      	cbnz	r3, 402186 <__swsetup_r+0x16>
  402180:	4628      	mov	r0, r5
  402182:	f000 f955 	bl	402430 <__sinit>
  402186:	4b2e      	ldr	r3, [pc, #184]	; (402240 <__swsetup_r+0xd0>)
  402188:	429c      	cmp	r4, r3
  40218a:	d10f      	bne.n	4021ac <__swsetup_r+0x3c>
  40218c:	686c      	ldr	r4, [r5, #4]
  40218e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402192:	b29a      	uxth	r2, r3
  402194:	0715      	lsls	r5, r2, #28
  402196:	d42c      	bmi.n	4021f2 <__swsetup_r+0x82>
  402198:	06d0      	lsls	r0, r2, #27
  40219a:	d411      	bmi.n	4021c0 <__swsetup_r+0x50>
  40219c:	2209      	movs	r2, #9
  40219e:	6032      	str	r2, [r6, #0]
  4021a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021a4:	81a3      	strh	r3, [r4, #12]
  4021a6:	f04f 30ff 	mov.w	r0, #4294967295
  4021aa:	bd70      	pop	{r4, r5, r6, pc}
  4021ac:	4b25      	ldr	r3, [pc, #148]	; (402244 <__swsetup_r+0xd4>)
  4021ae:	429c      	cmp	r4, r3
  4021b0:	d101      	bne.n	4021b6 <__swsetup_r+0x46>
  4021b2:	68ac      	ldr	r4, [r5, #8]
  4021b4:	e7eb      	b.n	40218e <__swsetup_r+0x1e>
  4021b6:	4b24      	ldr	r3, [pc, #144]	; (402248 <__swsetup_r+0xd8>)
  4021b8:	429c      	cmp	r4, r3
  4021ba:	bf08      	it	eq
  4021bc:	68ec      	ldreq	r4, [r5, #12]
  4021be:	e7e6      	b.n	40218e <__swsetup_r+0x1e>
  4021c0:	0751      	lsls	r1, r2, #29
  4021c2:	d512      	bpl.n	4021ea <__swsetup_r+0x7a>
  4021c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4021c6:	b141      	cbz	r1, 4021da <__swsetup_r+0x6a>
  4021c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4021cc:	4299      	cmp	r1, r3
  4021ce:	d002      	beq.n	4021d6 <__swsetup_r+0x66>
  4021d0:	4630      	mov	r0, r6
  4021d2:	f7ff fd8d 	bl	401cf0 <_free_r>
  4021d6:	2300      	movs	r3, #0
  4021d8:	6363      	str	r3, [r4, #52]	; 0x34
  4021da:	89a3      	ldrh	r3, [r4, #12]
  4021dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4021e0:	81a3      	strh	r3, [r4, #12]
  4021e2:	2300      	movs	r3, #0
  4021e4:	6063      	str	r3, [r4, #4]
  4021e6:	6923      	ldr	r3, [r4, #16]
  4021e8:	6023      	str	r3, [r4, #0]
  4021ea:	89a3      	ldrh	r3, [r4, #12]
  4021ec:	f043 0308 	orr.w	r3, r3, #8
  4021f0:	81a3      	strh	r3, [r4, #12]
  4021f2:	6923      	ldr	r3, [r4, #16]
  4021f4:	b94b      	cbnz	r3, 40220a <__swsetup_r+0x9a>
  4021f6:	89a3      	ldrh	r3, [r4, #12]
  4021f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4021fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402200:	d003      	beq.n	40220a <__swsetup_r+0x9a>
  402202:	4621      	mov	r1, r4
  402204:	4630      	mov	r0, r6
  402206:	f000 f9c1 	bl	40258c <__smakebuf_r>
  40220a:	89a2      	ldrh	r2, [r4, #12]
  40220c:	f012 0301 	ands.w	r3, r2, #1
  402210:	d00c      	beq.n	40222c <__swsetup_r+0xbc>
  402212:	2300      	movs	r3, #0
  402214:	60a3      	str	r3, [r4, #8]
  402216:	6963      	ldr	r3, [r4, #20]
  402218:	425b      	negs	r3, r3
  40221a:	61a3      	str	r3, [r4, #24]
  40221c:	6923      	ldr	r3, [r4, #16]
  40221e:	b953      	cbnz	r3, 402236 <__swsetup_r+0xc6>
  402220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402224:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  402228:	d1ba      	bne.n	4021a0 <__swsetup_r+0x30>
  40222a:	bd70      	pop	{r4, r5, r6, pc}
  40222c:	0792      	lsls	r2, r2, #30
  40222e:	bf58      	it	pl
  402230:	6963      	ldrpl	r3, [r4, #20]
  402232:	60a3      	str	r3, [r4, #8]
  402234:	e7f2      	b.n	40221c <__swsetup_r+0xac>
  402236:	2000      	movs	r0, #0
  402238:	e7f7      	b.n	40222a <__swsetup_r+0xba>
  40223a:	bf00      	nop
  40223c:	20400000 	.word	0x20400000
  402240:	00402fe4 	.word	0x00402fe4
  402244:	00403004 	.word	0x00403004
  402248:	00402fc4 	.word	0x00402fc4

0040224c <__sflush_r>:
  40224c:	898a      	ldrh	r2, [r1, #12]
  40224e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402252:	4605      	mov	r5, r0
  402254:	0710      	lsls	r0, r2, #28
  402256:	460c      	mov	r4, r1
  402258:	d45a      	bmi.n	402310 <__sflush_r+0xc4>
  40225a:	684b      	ldr	r3, [r1, #4]
  40225c:	2b00      	cmp	r3, #0
  40225e:	dc05      	bgt.n	40226c <__sflush_r+0x20>
  402260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  402262:	2b00      	cmp	r3, #0
  402264:	dc02      	bgt.n	40226c <__sflush_r+0x20>
  402266:	2000      	movs	r0, #0
  402268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40226c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40226e:	2e00      	cmp	r6, #0
  402270:	d0f9      	beq.n	402266 <__sflush_r+0x1a>
  402272:	2300      	movs	r3, #0
  402274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  402278:	682f      	ldr	r7, [r5, #0]
  40227a:	602b      	str	r3, [r5, #0]
  40227c:	d033      	beq.n	4022e6 <__sflush_r+0x9a>
  40227e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  402280:	89a3      	ldrh	r3, [r4, #12]
  402282:	075a      	lsls	r2, r3, #29
  402284:	d505      	bpl.n	402292 <__sflush_r+0x46>
  402286:	6863      	ldr	r3, [r4, #4]
  402288:	1ac0      	subs	r0, r0, r3
  40228a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40228c:	b10b      	cbz	r3, 402292 <__sflush_r+0x46>
  40228e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402290:	1ac0      	subs	r0, r0, r3
  402292:	2300      	movs	r3, #0
  402294:	4602      	mov	r2, r0
  402296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402298:	6a21      	ldr	r1, [r4, #32]
  40229a:	4628      	mov	r0, r5
  40229c:	47b0      	blx	r6
  40229e:	1c43      	adds	r3, r0, #1
  4022a0:	89a3      	ldrh	r3, [r4, #12]
  4022a2:	d106      	bne.n	4022b2 <__sflush_r+0x66>
  4022a4:	6829      	ldr	r1, [r5, #0]
  4022a6:	291d      	cmp	r1, #29
  4022a8:	d84b      	bhi.n	402342 <__sflush_r+0xf6>
  4022aa:	4a2b      	ldr	r2, [pc, #172]	; (402358 <__sflush_r+0x10c>)
  4022ac:	40ca      	lsrs	r2, r1
  4022ae:	07d6      	lsls	r6, r2, #31
  4022b0:	d547      	bpl.n	402342 <__sflush_r+0xf6>
  4022b2:	2200      	movs	r2, #0
  4022b4:	6062      	str	r2, [r4, #4]
  4022b6:	04d9      	lsls	r1, r3, #19
  4022b8:	6922      	ldr	r2, [r4, #16]
  4022ba:	6022      	str	r2, [r4, #0]
  4022bc:	d504      	bpl.n	4022c8 <__sflush_r+0x7c>
  4022be:	1c42      	adds	r2, r0, #1
  4022c0:	d101      	bne.n	4022c6 <__sflush_r+0x7a>
  4022c2:	682b      	ldr	r3, [r5, #0]
  4022c4:	b903      	cbnz	r3, 4022c8 <__sflush_r+0x7c>
  4022c6:	6560      	str	r0, [r4, #84]	; 0x54
  4022c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4022ca:	602f      	str	r7, [r5, #0]
  4022cc:	2900      	cmp	r1, #0
  4022ce:	d0ca      	beq.n	402266 <__sflush_r+0x1a>
  4022d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4022d4:	4299      	cmp	r1, r3
  4022d6:	d002      	beq.n	4022de <__sflush_r+0x92>
  4022d8:	4628      	mov	r0, r5
  4022da:	f7ff fd09 	bl	401cf0 <_free_r>
  4022de:	2000      	movs	r0, #0
  4022e0:	6360      	str	r0, [r4, #52]	; 0x34
  4022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022e6:	6a21      	ldr	r1, [r4, #32]
  4022e8:	2301      	movs	r3, #1
  4022ea:	4628      	mov	r0, r5
  4022ec:	47b0      	blx	r6
  4022ee:	1c41      	adds	r1, r0, #1
  4022f0:	d1c6      	bne.n	402280 <__sflush_r+0x34>
  4022f2:	682b      	ldr	r3, [r5, #0]
  4022f4:	2b00      	cmp	r3, #0
  4022f6:	d0c3      	beq.n	402280 <__sflush_r+0x34>
  4022f8:	2b1d      	cmp	r3, #29
  4022fa:	d001      	beq.n	402300 <__sflush_r+0xb4>
  4022fc:	2b16      	cmp	r3, #22
  4022fe:	d101      	bne.n	402304 <__sflush_r+0xb8>
  402300:	602f      	str	r7, [r5, #0]
  402302:	e7b0      	b.n	402266 <__sflush_r+0x1a>
  402304:	89a3      	ldrh	r3, [r4, #12]
  402306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40230a:	81a3      	strh	r3, [r4, #12]
  40230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402310:	690f      	ldr	r7, [r1, #16]
  402312:	2f00      	cmp	r7, #0
  402314:	d0a7      	beq.n	402266 <__sflush_r+0x1a>
  402316:	0793      	lsls	r3, r2, #30
  402318:	680e      	ldr	r6, [r1, #0]
  40231a:	bf08      	it	eq
  40231c:	694b      	ldreq	r3, [r1, #20]
  40231e:	600f      	str	r7, [r1, #0]
  402320:	bf18      	it	ne
  402322:	2300      	movne	r3, #0
  402324:	eba6 0807 	sub.w	r8, r6, r7
  402328:	608b      	str	r3, [r1, #8]
  40232a:	f1b8 0f00 	cmp.w	r8, #0
  40232e:	dd9a      	ble.n	402266 <__sflush_r+0x1a>
  402330:	4643      	mov	r3, r8
  402332:	463a      	mov	r2, r7
  402334:	6a21      	ldr	r1, [r4, #32]
  402336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  402338:	4628      	mov	r0, r5
  40233a:	47b0      	blx	r6
  40233c:	2800      	cmp	r0, #0
  40233e:	dc07      	bgt.n	402350 <__sflush_r+0x104>
  402340:	89a3      	ldrh	r3, [r4, #12]
  402342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402346:	81a3      	strh	r3, [r4, #12]
  402348:	f04f 30ff 	mov.w	r0, #4294967295
  40234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402350:	4407      	add	r7, r0
  402352:	eba8 0800 	sub.w	r8, r8, r0
  402356:	e7e8      	b.n	40232a <__sflush_r+0xde>
  402358:	20400001 	.word	0x20400001

0040235c <_fflush_r>:
  40235c:	b538      	push	{r3, r4, r5, lr}
  40235e:	690b      	ldr	r3, [r1, #16]
  402360:	4605      	mov	r5, r0
  402362:	460c      	mov	r4, r1
  402364:	b1db      	cbz	r3, 40239e <_fflush_r+0x42>
  402366:	b118      	cbz	r0, 402370 <_fflush_r+0x14>
  402368:	6983      	ldr	r3, [r0, #24]
  40236a:	b90b      	cbnz	r3, 402370 <_fflush_r+0x14>
  40236c:	f000 f860 	bl	402430 <__sinit>
  402370:	4b0c      	ldr	r3, [pc, #48]	; (4023a4 <_fflush_r+0x48>)
  402372:	429c      	cmp	r4, r3
  402374:	d109      	bne.n	40238a <_fflush_r+0x2e>
  402376:	686c      	ldr	r4, [r5, #4]
  402378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40237c:	b17b      	cbz	r3, 40239e <_fflush_r+0x42>
  40237e:	4621      	mov	r1, r4
  402380:	4628      	mov	r0, r5
  402382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402386:	f7ff bf61 	b.w	40224c <__sflush_r>
  40238a:	4b07      	ldr	r3, [pc, #28]	; (4023a8 <_fflush_r+0x4c>)
  40238c:	429c      	cmp	r4, r3
  40238e:	d101      	bne.n	402394 <_fflush_r+0x38>
  402390:	68ac      	ldr	r4, [r5, #8]
  402392:	e7f1      	b.n	402378 <_fflush_r+0x1c>
  402394:	4b05      	ldr	r3, [pc, #20]	; (4023ac <_fflush_r+0x50>)
  402396:	429c      	cmp	r4, r3
  402398:	bf08      	it	eq
  40239a:	68ec      	ldreq	r4, [r5, #12]
  40239c:	e7ec      	b.n	402378 <_fflush_r+0x1c>
  40239e:	2000      	movs	r0, #0
  4023a0:	bd38      	pop	{r3, r4, r5, pc}
  4023a2:	bf00      	nop
  4023a4:	00402fe4 	.word	0x00402fe4
  4023a8:	00403004 	.word	0x00403004
  4023ac:	00402fc4 	.word	0x00402fc4

004023b0 <_cleanup_r>:
  4023b0:	4901      	ldr	r1, [pc, #4]	; (4023b8 <_cleanup_r+0x8>)
  4023b2:	f000 b8a9 	b.w	402508 <_fwalk_reent>
  4023b6:	bf00      	nop
  4023b8:	0040235d 	.word	0x0040235d

004023bc <std.isra.0>:
  4023bc:	2300      	movs	r3, #0
  4023be:	b510      	push	{r4, lr}
  4023c0:	4604      	mov	r4, r0
  4023c2:	6003      	str	r3, [r0, #0]
  4023c4:	6043      	str	r3, [r0, #4]
  4023c6:	6083      	str	r3, [r0, #8]
  4023c8:	8181      	strh	r1, [r0, #12]
  4023ca:	6643      	str	r3, [r0, #100]	; 0x64
  4023cc:	81c2      	strh	r2, [r0, #14]
  4023ce:	6103      	str	r3, [r0, #16]
  4023d0:	6143      	str	r3, [r0, #20]
  4023d2:	6183      	str	r3, [r0, #24]
  4023d4:	4619      	mov	r1, r3
  4023d6:	2208      	movs	r2, #8
  4023d8:	305c      	adds	r0, #92	; 0x5c
  4023da:	f7ff fc81 	bl	401ce0 <memset>
  4023de:	4b05      	ldr	r3, [pc, #20]	; (4023f4 <std.isra.0+0x38>)
  4023e0:	6263      	str	r3, [r4, #36]	; 0x24
  4023e2:	4b05      	ldr	r3, [pc, #20]	; (4023f8 <std.isra.0+0x3c>)
  4023e4:	62a3      	str	r3, [r4, #40]	; 0x28
  4023e6:	4b05      	ldr	r3, [pc, #20]	; (4023fc <std.isra.0+0x40>)
  4023e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  4023ea:	4b05      	ldr	r3, [pc, #20]	; (402400 <std.isra.0+0x44>)
  4023ec:	6224      	str	r4, [r4, #32]
  4023ee:	6323      	str	r3, [r4, #48]	; 0x30
  4023f0:	bd10      	pop	{r4, pc}
  4023f2:	bf00      	nop
  4023f4:	00402bb9 	.word	0x00402bb9
  4023f8:	00402bdb 	.word	0x00402bdb
  4023fc:	00402c13 	.word	0x00402c13
  402400:	00402c37 	.word	0x00402c37

00402404 <__sfmoreglue>:
  402404:	b570      	push	{r4, r5, r6, lr}
  402406:	1e4a      	subs	r2, r1, #1
  402408:	2568      	movs	r5, #104	; 0x68
  40240a:	4355      	muls	r5, r2
  40240c:	460e      	mov	r6, r1
  40240e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  402412:	f7ff fcbb 	bl	401d8c <_malloc_r>
  402416:	4604      	mov	r4, r0
  402418:	b140      	cbz	r0, 40242c <__sfmoreglue+0x28>
  40241a:	2100      	movs	r1, #0
  40241c:	e880 0042 	stmia.w	r0, {r1, r6}
  402420:	300c      	adds	r0, #12
  402422:	60a0      	str	r0, [r4, #8]
  402424:	f105 0268 	add.w	r2, r5, #104	; 0x68
  402428:	f7ff fc5a 	bl	401ce0 <memset>
  40242c:	4620      	mov	r0, r4
  40242e:	bd70      	pop	{r4, r5, r6, pc}

00402430 <__sinit>:
  402430:	6983      	ldr	r3, [r0, #24]
  402432:	b510      	push	{r4, lr}
  402434:	4604      	mov	r4, r0
  402436:	bb33      	cbnz	r3, 402486 <__sinit+0x56>
  402438:	6483      	str	r3, [r0, #72]	; 0x48
  40243a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40243c:	6503      	str	r3, [r0, #80]	; 0x50
  40243e:	4b12      	ldr	r3, [pc, #72]	; (402488 <__sinit+0x58>)
  402440:	4a12      	ldr	r2, [pc, #72]	; (40248c <__sinit+0x5c>)
  402442:	681b      	ldr	r3, [r3, #0]
  402444:	6282      	str	r2, [r0, #40]	; 0x28
  402446:	4298      	cmp	r0, r3
  402448:	bf04      	itt	eq
  40244a:	2301      	moveq	r3, #1
  40244c:	6183      	streq	r3, [r0, #24]
  40244e:	f000 f81f 	bl	402490 <__sfp>
  402452:	6060      	str	r0, [r4, #4]
  402454:	4620      	mov	r0, r4
  402456:	f000 f81b 	bl	402490 <__sfp>
  40245a:	60a0      	str	r0, [r4, #8]
  40245c:	4620      	mov	r0, r4
  40245e:	f000 f817 	bl	402490 <__sfp>
  402462:	2200      	movs	r2, #0
  402464:	60e0      	str	r0, [r4, #12]
  402466:	2104      	movs	r1, #4
  402468:	6860      	ldr	r0, [r4, #4]
  40246a:	f7ff ffa7 	bl	4023bc <std.isra.0>
  40246e:	2201      	movs	r2, #1
  402470:	2109      	movs	r1, #9
  402472:	68a0      	ldr	r0, [r4, #8]
  402474:	f7ff ffa2 	bl	4023bc <std.isra.0>
  402478:	2202      	movs	r2, #2
  40247a:	2112      	movs	r1, #18
  40247c:	68e0      	ldr	r0, [r4, #12]
  40247e:	f7ff ff9d 	bl	4023bc <std.isra.0>
  402482:	2301      	movs	r3, #1
  402484:	61a3      	str	r3, [r4, #24]
  402486:	bd10      	pop	{r4, pc}
  402488:	00402fc0 	.word	0x00402fc0
  40248c:	004023b1 	.word	0x004023b1

00402490 <__sfp>:
  402490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402492:	4b1c      	ldr	r3, [pc, #112]	; (402504 <__sfp+0x74>)
  402494:	681e      	ldr	r6, [r3, #0]
  402496:	69b3      	ldr	r3, [r6, #24]
  402498:	4607      	mov	r7, r0
  40249a:	b913      	cbnz	r3, 4024a2 <__sfp+0x12>
  40249c:	4630      	mov	r0, r6
  40249e:	f7ff ffc7 	bl	402430 <__sinit>
  4024a2:	3648      	adds	r6, #72	; 0x48
  4024a4:	68b4      	ldr	r4, [r6, #8]
  4024a6:	6873      	ldr	r3, [r6, #4]
  4024a8:	3b01      	subs	r3, #1
  4024aa:	d503      	bpl.n	4024b4 <__sfp+0x24>
  4024ac:	6833      	ldr	r3, [r6, #0]
  4024ae:	b133      	cbz	r3, 4024be <__sfp+0x2e>
  4024b0:	6836      	ldr	r6, [r6, #0]
  4024b2:	e7f7      	b.n	4024a4 <__sfp+0x14>
  4024b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4024b8:	b16d      	cbz	r5, 4024d6 <__sfp+0x46>
  4024ba:	3468      	adds	r4, #104	; 0x68
  4024bc:	e7f4      	b.n	4024a8 <__sfp+0x18>
  4024be:	2104      	movs	r1, #4
  4024c0:	4638      	mov	r0, r7
  4024c2:	f7ff ff9f 	bl	402404 <__sfmoreglue>
  4024c6:	6030      	str	r0, [r6, #0]
  4024c8:	2800      	cmp	r0, #0
  4024ca:	d1f1      	bne.n	4024b0 <__sfp+0x20>
  4024cc:	230c      	movs	r3, #12
  4024ce:	603b      	str	r3, [r7, #0]
  4024d0:	4604      	mov	r4, r0
  4024d2:	4620      	mov	r0, r4
  4024d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4024da:	81e3      	strh	r3, [r4, #14]
  4024dc:	2301      	movs	r3, #1
  4024de:	81a3      	strh	r3, [r4, #12]
  4024e0:	6665      	str	r5, [r4, #100]	; 0x64
  4024e2:	6025      	str	r5, [r4, #0]
  4024e4:	60a5      	str	r5, [r4, #8]
  4024e6:	6065      	str	r5, [r4, #4]
  4024e8:	6125      	str	r5, [r4, #16]
  4024ea:	6165      	str	r5, [r4, #20]
  4024ec:	61a5      	str	r5, [r4, #24]
  4024ee:	2208      	movs	r2, #8
  4024f0:	4629      	mov	r1, r5
  4024f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4024f6:	f7ff fbf3 	bl	401ce0 <memset>
  4024fa:	6365      	str	r5, [r4, #52]	; 0x34
  4024fc:	63a5      	str	r5, [r4, #56]	; 0x38
  4024fe:	64a5      	str	r5, [r4, #72]	; 0x48
  402500:	64e5      	str	r5, [r4, #76]	; 0x4c
  402502:	e7e6      	b.n	4024d2 <__sfp+0x42>
  402504:	00402fc0 	.word	0x00402fc0

00402508 <_fwalk_reent>:
  402508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40250c:	4680      	mov	r8, r0
  40250e:	4689      	mov	r9, r1
  402510:	f100 0448 	add.w	r4, r0, #72	; 0x48
  402514:	2600      	movs	r6, #0
  402516:	b914      	cbnz	r4, 40251e <_fwalk_reent+0x16>
  402518:	4630      	mov	r0, r6
  40251a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40251e:	68a5      	ldr	r5, [r4, #8]
  402520:	6867      	ldr	r7, [r4, #4]
  402522:	3f01      	subs	r7, #1
  402524:	d501      	bpl.n	40252a <_fwalk_reent+0x22>
  402526:	6824      	ldr	r4, [r4, #0]
  402528:	e7f5      	b.n	402516 <_fwalk_reent+0xe>
  40252a:	89ab      	ldrh	r3, [r5, #12]
  40252c:	2b01      	cmp	r3, #1
  40252e:	d907      	bls.n	402540 <_fwalk_reent+0x38>
  402530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  402534:	3301      	adds	r3, #1
  402536:	d003      	beq.n	402540 <_fwalk_reent+0x38>
  402538:	4629      	mov	r1, r5
  40253a:	4640      	mov	r0, r8
  40253c:	47c8      	blx	r9
  40253e:	4306      	orrs	r6, r0
  402540:	3568      	adds	r5, #104	; 0x68
  402542:	e7ee      	b.n	402522 <_fwalk_reent+0x1a>

00402544 <__swhatbuf_r>:
  402544:	b570      	push	{r4, r5, r6, lr}
  402546:	460e      	mov	r6, r1
  402548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40254c:	2900      	cmp	r1, #0
  40254e:	b090      	sub	sp, #64	; 0x40
  402550:	4614      	mov	r4, r2
  402552:	461d      	mov	r5, r3
  402554:	da07      	bge.n	402566 <__swhatbuf_r+0x22>
  402556:	2300      	movs	r3, #0
  402558:	602b      	str	r3, [r5, #0]
  40255a:	89b3      	ldrh	r3, [r6, #12]
  40255c:	061a      	lsls	r2, r3, #24
  40255e:	d410      	bmi.n	402582 <__swhatbuf_r+0x3e>
  402560:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402564:	e00e      	b.n	402584 <__swhatbuf_r+0x40>
  402566:	aa01      	add	r2, sp, #4
  402568:	f000 fb8c 	bl	402c84 <_fstat_r>
  40256c:	2800      	cmp	r0, #0
  40256e:	dbf2      	blt.n	402556 <__swhatbuf_r+0x12>
  402570:	9a02      	ldr	r2, [sp, #8]
  402572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40257a:	425a      	negs	r2, r3
  40257c:	415a      	adcs	r2, r3
  40257e:	602a      	str	r2, [r5, #0]
  402580:	e7ee      	b.n	402560 <__swhatbuf_r+0x1c>
  402582:	2340      	movs	r3, #64	; 0x40
  402584:	2000      	movs	r0, #0
  402586:	6023      	str	r3, [r4, #0]
  402588:	b010      	add	sp, #64	; 0x40
  40258a:	bd70      	pop	{r4, r5, r6, pc}

0040258c <__smakebuf_r>:
  40258c:	898b      	ldrh	r3, [r1, #12]
  40258e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402590:	079d      	lsls	r5, r3, #30
  402592:	4606      	mov	r6, r0
  402594:	460c      	mov	r4, r1
  402596:	d507      	bpl.n	4025a8 <__smakebuf_r+0x1c>
  402598:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40259c:	6023      	str	r3, [r4, #0]
  40259e:	6123      	str	r3, [r4, #16]
  4025a0:	2301      	movs	r3, #1
  4025a2:	6163      	str	r3, [r4, #20]
  4025a4:	b002      	add	sp, #8
  4025a6:	bd70      	pop	{r4, r5, r6, pc}
  4025a8:	ab01      	add	r3, sp, #4
  4025aa:	466a      	mov	r2, sp
  4025ac:	f7ff ffca 	bl	402544 <__swhatbuf_r>
  4025b0:	9900      	ldr	r1, [sp, #0]
  4025b2:	4605      	mov	r5, r0
  4025b4:	4630      	mov	r0, r6
  4025b6:	f7ff fbe9 	bl	401d8c <_malloc_r>
  4025ba:	b948      	cbnz	r0, 4025d0 <__smakebuf_r+0x44>
  4025bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4025c0:	059a      	lsls	r2, r3, #22
  4025c2:	d4ef      	bmi.n	4025a4 <__smakebuf_r+0x18>
  4025c4:	f023 0303 	bic.w	r3, r3, #3
  4025c8:	f043 0302 	orr.w	r3, r3, #2
  4025cc:	81a3      	strh	r3, [r4, #12]
  4025ce:	e7e3      	b.n	402598 <__smakebuf_r+0xc>
  4025d0:	4b0d      	ldr	r3, [pc, #52]	; (402608 <__smakebuf_r+0x7c>)
  4025d2:	62b3      	str	r3, [r6, #40]	; 0x28
  4025d4:	89a3      	ldrh	r3, [r4, #12]
  4025d6:	6020      	str	r0, [r4, #0]
  4025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4025dc:	81a3      	strh	r3, [r4, #12]
  4025de:	9b00      	ldr	r3, [sp, #0]
  4025e0:	6163      	str	r3, [r4, #20]
  4025e2:	9b01      	ldr	r3, [sp, #4]
  4025e4:	6120      	str	r0, [r4, #16]
  4025e6:	b15b      	cbz	r3, 402600 <__smakebuf_r+0x74>
  4025e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4025ec:	4630      	mov	r0, r6
  4025ee:	f000 fb5b 	bl	402ca8 <_isatty_r>
  4025f2:	b128      	cbz	r0, 402600 <__smakebuf_r+0x74>
  4025f4:	89a3      	ldrh	r3, [r4, #12]
  4025f6:	f023 0303 	bic.w	r3, r3, #3
  4025fa:	f043 0301 	orr.w	r3, r3, #1
  4025fe:	81a3      	strh	r3, [r4, #12]
  402600:	89a3      	ldrh	r3, [r4, #12]
  402602:	431d      	orrs	r5, r3
  402604:	81a5      	strh	r5, [r4, #12]
  402606:	e7cd      	b.n	4025a4 <__smakebuf_r+0x18>
  402608:	004023b1 	.word	0x004023b1

0040260c <__malloc_lock>:
  40260c:	4770      	bx	lr

0040260e <__malloc_unlock>:
  40260e:	4770      	bx	lr

00402610 <__sfputc_r>:
  402610:	6893      	ldr	r3, [r2, #8]
  402612:	3b01      	subs	r3, #1
  402614:	2b00      	cmp	r3, #0
  402616:	b410      	push	{r4}
  402618:	6093      	str	r3, [r2, #8]
  40261a:	da08      	bge.n	40262e <__sfputc_r+0x1e>
  40261c:	6994      	ldr	r4, [r2, #24]
  40261e:	42a3      	cmp	r3, r4
  402620:	db02      	blt.n	402628 <__sfputc_r+0x18>
  402622:	b2cb      	uxtb	r3, r1
  402624:	2b0a      	cmp	r3, #10
  402626:	d102      	bne.n	40262e <__sfputc_r+0x1e>
  402628:	bc10      	pop	{r4}
  40262a:	f7ff bd4f 	b.w	4020cc <__swbuf_r>
  40262e:	6813      	ldr	r3, [r2, #0]
  402630:	1c58      	adds	r0, r3, #1
  402632:	6010      	str	r0, [r2, #0]
  402634:	7019      	strb	r1, [r3, #0]
  402636:	b2c8      	uxtb	r0, r1
  402638:	bc10      	pop	{r4}
  40263a:	4770      	bx	lr

0040263c <__sfputs_r>:
  40263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40263e:	4606      	mov	r6, r0
  402640:	460f      	mov	r7, r1
  402642:	4614      	mov	r4, r2
  402644:	18d5      	adds	r5, r2, r3
  402646:	42ac      	cmp	r4, r5
  402648:	d101      	bne.n	40264e <__sfputs_r+0x12>
  40264a:	2000      	movs	r0, #0
  40264c:	e007      	b.n	40265e <__sfputs_r+0x22>
  40264e:	463a      	mov	r2, r7
  402650:	f814 1b01 	ldrb.w	r1, [r4], #1
  402654:	4630      	mov	r0, r6
  402656:	f7ff ffdb 	bl	402610 <__sfputc_r>
  40265a:	1c43      	adds	r3, r0, #1
  40265c:	d1f3      	bne.n	402646 <__sfputs_r+0xa>
  40265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00402660 <_vfiprintf_r>:
  402660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402664:	b09d      	sub	sp, #116	; 0x74
  402666:	460c      	mov	r4, r1
  402668:	4617      	mov	r7, r2
  40266a:	9303      	str	r3, [sp, #12]
  40266c:	4606      	mov	r6, r0
  40266e:	b118      	cbz	r0, 402678 <_vfiprintf_r+0x18>
  402670:	6983      	ldr	r3, [r0, #24]
  402672:	b90b      	cbnz	r3, 402678 <_vfiprintf_r+0x18>
  402674:	f7ff fedc 	bl	402430 <__sinit>
  402678:	4b7c      	ldr	r3, [pc, #496]	; (40286c <_vfiprintf_r+0x20c>)
  40267a:	429c      	cmp	r4, r3
  40267c:	d157      	bne.n	40272e <_vfiprintf_r+0xce>
  40267e:	6874      	ldr	r4, [r6, #4]
  402680:	89a3      	ldrh	r3, [r4, #12]
  402682:	0718      	lsls	r0, r3, #28
  402684:	d55d      	bpl.n	402742 <_vfiprintf_r+0xe2>
  402686:	6923      	ldr	r3, [r4, #16]
  402688:	2b00      	cmp	r3, #0
  40268a:	d05a      	beq.n	402742 <_vfiprintf_r+0xe2>
  40268c:	2300      	movs	r3, #0
  40268e:	9309      	str	r3, [sp, #36]	; 0x24
  402690:	2320      	movs	r3, #32
  402692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  402696:	2330      	movs	r3, #48	; 0x30
  402698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  40269c:	f04f 0b01 	mov.w	fp, #1
  4026a0:	46b8      	mov	r8, r7
  4026a2:	4645      	mov	r5, r8
  4026a4:	f815 3b01 	ldrb.w	r3, [r5], #1
  4026a8:	2b00      	cmp	r3, #0
  4026aa:	d155      	bne.n	402758 <_vfiprintf_r+0xf8>
  4026ac:	ebb8 0a07 	subs.w	sl, r8, r7
  4026b0:	d00b      	beq.n	4026ca <_vfiprintf_r+0x6a>
  4026b2:	4653      	mov	r3, sl
  4026b4:	463a      	mov	r2, r7
  4026b6:	4621      	mov	r1, r4
  4026b8:	4630      	mov	r0, r6
  4026ba:	f7ff ffbf 	bl	40263c <__sfputs_r>
  4026be:	3001      	adds	r0, #1
  4026c0:	f000 80c4 	beq.w	40284c <_vfiprintf_r+0x1ec>
  4026c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4026c6:	4453      	add	r3, sl
  4026c8:	9309      	str	r3, [sp, #36]	; 0x24
  4026ca:	f898 3000 	ldrb.w	r3, [r8]
  4026ce:	2b00      	cmp	r3, #0
  4026d0:	f000 80bc 	beq.w	40284c <_vfiprintf_r+0x1ec>
  4026d4:	2300      	movs	r3, #0
  4026d6:	f04f 32ff 	mov.w	r2, #4294967295
  4026da:	9304      	str	r3, [sp, #16]
  4026dc:	9307      	str	r3, [sp, #28]
  4026de:	9205      	str	r2, [sp, #20]
  4026e0:	9306      	str	r3, [sp, #24]
  4026e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4026e6:	931a      	str	r3, [sp, #104]	; 0x68
  4026e8:	2205      	movs	r2, #5
  4026ea:	7829      	ldrb	r1, [r5, #0]
  4026ec:	4860      	ldr	r0, [pc, #384]	; (402870 <_vfiprintf_r+0x210>)
  4026ee:	f000 faff 	bl	402cf0 <memchr>
  4026f2:	f105 0801 	add.w	r8, r5, #1
  4026f6:	9b04      	ldr	r3, [sp, #16]
  4026f8:	2800      	cmp	r0, #0
  4026fa:	d131      	bne.n	402760 <_vfiprintf_r+0x100>
  4026fc:	06d9      	lsls	r1, r3, #27
  4026fe:	bf44      	itt	mi
  402700:	2220      	movmi	r2, #32
  402702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  402706:	071a      	lsls	r2, r3, #28
  402708:	bf44      	itt	mi
  40270a:	222b      	movmi	r2, #43	; 0x2b
  40270c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  402710:	782a      	ldrb	r2, [r5, #0]
  402712:	2a2a      	cmp	r2, #42	; 0x2a
  402714:	d02c      	beq.n	402770 <_vfiprintf_r+0x110>
  402716:	9a07      	ldr	r2, [sp, #28]
  402718:	2100      	movs	r1, #0
  40271a:	200a      	movs	r0, #10
  40271c:	46a8      	mov	r8, r5
  40271e:	3501      	adds	r5, #1
  402720:	f898 3000 	ldrb.w	r3, [r8]
  402724:	3b30      	subs	r3, #48	; 0x30
  402726:	2b09      	cmp	r3, #9
  402728:	d96d      	bls.n	402806 <_vfiprintf_r+0x1a6>
  40272a:	b371      	cbz	r1, 40278a <_vfiprintf_r+0x12a>
  40272c:	e026      	b.n	40277c <_vfiprintf_r+0x11c>
  40272e:	4b51      	ldr	r3, [pc, #324]	; (402874 <_vfiprintf_r+0x214>)
  402730:	429c      	cmp	r4, r3
  402732:	d101      	bne.n	402738 <_vfiprintf_r+0xd8>
  402734:	68b4      	ldr	r4, [r6, #8]
  402736:	e7a3      	b.n	402680 <_vfiprintf_r+0x20>
  402738:	4b4f      	ldr	r3, [pc, #316]	; (402878 <_vfiprintf_r+0x218>)
  40273a:	429c      	cmp	r4, r3
  40273c:	bf08      	it	eq
  40273e:	68f4      	ldreq	r4, [r6, #12]
  402740:	e79e      	b.n	402680 <_vfiprintf_r+0x20>
  402742:	4621      	mov	r1, r4
  402744:	4630      	mov	r0, r6
  402746:	f7ff fd13 	bl	402170 <__swsetup_r>
  40274a:	2800      	cmp	r0, #0
  40274c:	d09e      	beq.n	40268c <_vfiprintf_r+0x2c>
  40274e:	f04f 30ff 	mov.w	r0, #4294967295
  402752:	b01d      	add	sp, #116	; 0x74
  402754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402758:	2b25      	cmp	r3, #37	; 0x25
  40275a:	d0a7      	beq.n	4026ac <_vfiprintf_r+0x4c>
  40275c:	46a8      	mov	r8, r5
  40275e:	e7a0      	b.n	4026a2 <_vfiprintf_r+0x42>
  402760:	4a43      	ldr	r2, [pc, #268]	; (402870 <_vfiprintf_r+0x210>)
  402762:	1a80      	subs	r0, r0, r2
  402764:	fa0b f000 	lsl.w	r0, fp, r0
  402768:	4318      	orrs	r0, r3
  40276a:	9004      	str	r0, [sp, #16]
  40276c:	4645      	mov	r5, r8
  40276e:	e7bb      	b.n	4026e8 <_vfiprintf_r+0x88>
  402770:	9a03      	ldr	r2, [sp, #12]
  402772:	1d11      	adds	r1, r2, #4
  402774:	6812      	ldr	r2, [r2, #0]
  402776:	9103      	str	r1, [sp, #12]
  402778:	2a00      	cmp	r2, #0
  40277a:	db01      	blt.n	402780 <_vfiprintf_r+0x120>
  40277c:	9207      	str	r2, [sp, #28]
  40277e:	e004      	b.n	40278a <_vfiprintf_r+0x12a>
  402780:	4252      	negs	r2, r2
  402782:	f043 0302 	orr.w	r3, r3, #2
  402786:	9207      	str	r2, [sp, #28]
  402788:	9304      	str	r3, [sp, #16]
  40278a:	f898 3000 	ldrb.w	r3, [r8]
  40278e:	2b2e      	cmp	r3, #46	; 0x2e
  402790:	d110      	bne.n	4027b4 <_vfiprintf_r+0x154>
  402792:	f898 3001 	ldrb.w	r3, [r8, #1]
  402796:	2b2a      	cmp	r3, #42	; 0x2a
  402798:	f108 0101 	add.w	r1, r8, #1
  40279c:	d137      	bne.n	40280e <_vfiprintf_r+0x1ae>
  40279e:	9b03      	ldr	r3, [sp, #12]
  4027a0:	1d1a      	adds	r2, r3, #4
  4027a2:	681b      	ldr	r3, [r3, #0]
  4027a4:	9203      	str	r2, [sp, #12]
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	bfb8      	it	lt
  4027aa:	f04f 33ff 	movlt.w	r3, #4294967295
  4027ae:	f108 0802 	add.w	r8, r8, #2
  4027b2:	9305      	str	r3, [sp, #20]
  4027b4:	4d31      	ldr	r5, [pc, #196]	; (40287c <_vfiprintf_r+0x21c>)
  4027b6:	f898 1000 	ldrb.w	r1, [r8]
  4027ba:	2203      	movs	r2, #3
  4027bc:	4628      	mov	r0, r5
  4027be:	f000 fa97 	bl	402cf0 <memchr>
  4027c2:	b140      	cbz	r0, 4027d6 <_vfiprintf_r+0x176>
  4027c4:	2340      	movs	r3, #64	; 0x40
  4027c6:	1b40      	subs	r0, r0, r5
  4027c8:	fa03 f000 	lsl.w	r0, r3, r0
  4027cc:	9b04      	ldr	r3, [sp, #16]
  4027ce:	4303      	orrs	r3, r0
  4027d0:	9304      	str	r3, [sp, #16]
  4027d2:	f108 0801 	add.w	r8, r8, #1
  4027d6:	f898 1000 	ldrb.w	r1, [r8]
  4027da:	4829      	ldr	r0, [pc, #164]	; (402880 <_vfiprintf_r+0x220>)
  4027dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4027e0:	2206      	movs	r2, #6
  4027e2:	f108 0701 	add.w	r7, r8, #1
  4027e6:	f000 fa83 	bl	402cf0 <memchr>
  4027ea:	2800      	cmp	r0, #0
  4027ec:	d034      	beq.n	402858 <_vfiprintf_r+0x1f8>
  4027ee:	4b25      	ldr	r3, [pc, #148]	; (402884 <_vfiprintf_r+0x224>)
  4027f0:	bb03      	cbnz	r3, 402834 <_vfiprintf_r+0x1d4>
  4027f2:	9b03      	ldr	r3, [sp, #12]
  4027f4:	3307      	adds	r3, #7
  4027f6:	f023 0307 	bic.w	r3, r3, #7
  4027fa:	3308      	adds	r3, #8
  4027fc:	9303      	str	r3, [sp, #12]
  4027fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402800:	444b      	add	r3, r9
  402802:	9309      	str	r3, [sp, #36]	; 0x24
  402804:	e74c      	b.n	4026a0 <_vfiprintf_r+0x40>
  402806:	fb00 3202 	mla	r2, r0, r2, r3
  40280a:	2101      	movs	r1, #1
  40280c:	e786      	b.n	40271c <_vfiprintf_r+0xbc>
  40280e:	2300      	movs	r3, #0
  402810:	9305      	str	r3, [sp, #20]
  402812:	4618      	mov	r0, r3
  402814:	250a      	movs	r5, #10
  402816:	4688      	mov	r8, r1
  402818:	3101      	adds	r1, #1
  40281a:	f898 2000 	ldrb.w	r2, [r8]
  40281e:	3a30      	subs	r2, #48	; 0x30
  402820:	2a09      	cmp	r2, #9
  402822:	d903      	bls.n	40282c <_vfiprintf_r+0x1cc>
  402824:	2b00      	cmp	r3, #0
  402826:	d0c5      	beq.n	4027b4 <_vfiprintf_r+0x154>
  402828:	9005      	str	r0, [sp, #20]
  40282a:	e7c3      	b.n	4027b4 <_vfiprintf_r+0x154>
  40282c:	fb05 2000 	mla	r0, r5, r0, r2
  402830:	2301      	movs	r3, #1
  402832:	e7f0      	b.n	402816 <_vfiprintf_r+0x1b6>
  402834:	ab03      	add	r3, sp, #12
  402836:	9300      	str	r3, [sp, #0]
  402838:	4622      	mov	r2, r4
  40283a:	4b13      	ldr	r3, [pc, #76]	; (402888 <_vfiprintf_r+0x228>)
  40283c:	a904      	add	r1, sp, #16
  40283e:	4630      	mov	r0, r6
  402840:	f3af 8000 	nop.w
  402844:	f1b0 3fff 	cmp.w	r0, #4294967295
  402848:	4681      	mov	r9, r0
  40284a:	d1d8      	bne.n	4027fe <_vfiprintf_r+0x19e>
  40284c:	89a3      	ldrh	r3, [r4, #12]
  40284e:	065b      	lsls	r3, r3, #25
  402850:	f53f af7d 	bmi.w	40274e <_vfiprintf_r+0xee>
  402854:	9809      	ldr	r0, [sp, #36]	; 0x24
  402856:	e77c      	b.n	402752 <_vfiprintf_r+0xf2>
  402858:	ab03      	add	r3, sp, #12
  40285a:	9300      	str	r3, [sp, #0]
  40285c:	4622      	mov	r2, r4
  40285e:	4b0a      	ldr	r3, [pc, #40]	; (402888 <_vfiprintf_r+0x228>)
  402860:	a904      	add	r1, sp, #16
  402862:	4630      	mov	r0, r6
  402864:	f000 f888 	bl	402978 <_printf_i>
  402868:	e7ec      	b.n	402844 <_vfiprintf_r+0x1e4>
  40286a:	bf00      	nop
  40286c:	00402fe4 	.word	0x00402fe4
  402870:	00403024 	.word	0x00403024
  402874:	00403004 	.word	0x00403004
  402878:	00402fc4 	.word	0x00402fc4
  40287c:	0040302a 	.word	0x0040302a
  402880:	0040302e 	.word	0x0040302e
  402884:	00000000 	.word	0x00000000
  402888:	0040263d 	.word	0x0040263d

0040288c <_printf_common>:
  40288c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402890:	4691      	mov	r9, r2
  402892:	461f      	mov	r7, r3
  402894:	688a      	ldr	r2, [r1, #8]
  402896:	690b      	ldr	r3, [r1, #16]
  402898:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40289c:	4293      	cmp	r3, r2
  40289e:	bfb8      	it	lt
  4028a0:	4613      	movlt	r3, r2
  4028a2:	f8c9 3000 	str.w	r3, [r9]
  4028a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4028aa:	4606      	mov	r6, r0
  4028ac:	460c      	mov	r4, r1
  4028ae:	b112      	cbz	r2, 4028b6 <_printf_common+0x2a>
  4028b0:	3301      	adds	r3, #1
  4028b2:	f8c9 3000 	str.w	r3, [r9]
  4028b6:	6823      	ldr	r3, [r4, #0]
  4028b8:	0699      	lsls	r1, r3, #26
  4028ba:	bf42      	ittt	mi
  4028bc:	f8d9 3000 	ldrmi.w	r3, [r9]
  4028c0:	3302      	addmi	r3, #2
  4028c2:	f8c9 3000 	strmi.w	r3, [r9]
  4028c6:	6825      	ldr	r5, [r4, #0]
  4028c8:	f015 0506 	ands.w	r5, r5, #6
  4028cc:	d107      	bne.n	4028de <_printf_common+0x52>
  4028ce:	f104 0a19 	add.w	sl, r4, #25
  4028d2:	68e3      	ldr	r3, [r4, #12]
  4028d4:	f8d9 2000 	ldr.w	r2, [r9]
  4028d8:	1a9b      	subs	r3, r3, r2
  4028da:	429d      	cmp	r5, r3
  4028dc:	db29      	blt.n	402932 <_printf_common+0xa6>
  4028de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4028e2:	6822      	ldr	r2, [r4, #0]
  4028e4:	3300      	adds	r3, #0
  4028e6:	bf18      	it	ne
  4028e8:	2301      	movne	r3, #1
  4028ea:	0692      	lsls	r2, r2, #26
  4028ec:	d42e      	bmi.n	40294c <_printf_common+0xc0>
  4028ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4028f2:	4639      	mov	r1, r7
  4028f4:	4630      	mov	r0, r6
  4028f6:	47c0      	blx	r8
  4028f8:	3001      	adds	r0, #1
  4028fa:	d021      	beq.n	402940 <_printf_common+0xb4>
  4028fc:	6823      	ldr	r3, [r4, #0]
  4028fe:	68e5      	ldr	r5, [r4, #12]
  402900:	f8d9 2000 	ldr.w	r2, [r9]
  402904:	f003 0306 	and.w	r3, r3, #6
  402908:	2b04      	cmp	r3, #4
  40290a:	bf08      	it	eq
  40290c:	1aad      	subeq	r5, r5, r2
  40290e:	68a3      	ldr	r3, [r4, #8]
  402910:	6922      	ldr	r2, [r4, #16]
  402912:	bf0c      	ite	eq
  402914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402918:	2500      	movne	r5, #0
  40291a:	4293      	cmp	r3, r2
  40291c:	bfc4      	itt	gt
  40291e:	1a9b      	subgt	r3, r3, r2
  402920:	18ed      	addgt	r5, r5, r3
  402922:	f04f 0900 	mov.w	r9, #0
  402926:	341a      	adds	r4, #26
  402928:	454d      	cmp	r5, r9
  40292a:	d11b      	bne.n	402964 <_printf_common+0xd8>
  40292c:	2000      	movs	r0, #0
  40292e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402932:	2301      	movs	r3, #1
  402934:	4652      	mov	r2, sl
  402936:	4639      	mov	r1, r7
  402938:	4630      	mov	r0, r6
  40293a:	47c0      	blx	r8
  40293c:	3001      	adds	r0, #1
  40293e:	d103      	bne.n	402948 <_printf_common+0xbc>
  402940:	f04f 30ff 	mov.w	r0, #4294967295
  402944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402948:	3501      	adds	r5, #1
  40294a:	e7c2      	b.n	4028d2 <_printf_common+0x46>
  40294c:	18e1      	adds	r1, r4, r3
  40294e:	1c5a      	adds	r2, r3, #1
  402950:	2030      	movs	r0, #48	; 0x30
  402952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402956:	4422      	add	r2, r4
  402958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  40295c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402960:	3302      	adds	r3, #2
  402962:	e7c4      	b.n	4028ee <_printf_common+0x62>
  402964:	2301      	movs	r3, #1
  402966:	4622      	mov	r2, r4
  402968:	4639      	mov	r1, r7
  40296a:	4630      	mov	r0, r6
  40296c:	47c0      	blx	r8
  40296e:	3001      	adds	r0, #1
  402970:	d0e6      	beq.n	402940 <_printf_common+0xb4>
  402972:	f109 0901 	add.w	r9, r9, #1
  402976:	e7d7      	b.n	402928 <_printf_common+0x9c>

00402978 <_printf_i>:
  402978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40297c:	4617      	mov	r7, r2
  40297e:	7e0a      	ldrb	r2, [r1, #24]
  402980:	b085      	sub	sp, #20
  402982:	2a6e      	cmp	r2, #110	; 0x6e
  402984:	4698      	mov	r8, r3
  402986:	4606      	mov	r6, r0
  402988:	460c      	mov	r4, r1
  40298a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40298c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402990:	f000 80bc 	beq.w	402b0c <_printf_i+0x194>
  402994:	d81a      	bhi.n	4029cc <_printf_i+0x54>
  402996:	2a63      	cmp	r2, #99	; 0x63
  402998:	d02e      	beq.n	4029f8 <_printf_i+0x80>
  40299a:	d80a      	bhi.n	4029b2 <_printf_i+0x3a>
  40299c:	2a00      	cmp	r2, #0
  40299e:	f000 80c8 	beq.w	402b32 <_printf_i+0x1ba>
  4029a2:	2a58      	cmp	r2, #88	; 0x58
  4029a4:	f000 808a 	beq.w	402abc <_printf_i+0x144>
  4029a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4029ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4029b0:	e02a      	b.n	402a08 <_printf_i+0x90>
  4029b2:	2a64      	cmp	r2, #100	; 0x64
  4029b4:	d001      	beq.n	4029ba <_printf_i+0x42>
  4029b6:	2a69      	cmp	r2, #105	; 0x69
  4029b8:	d1f6      	bne.n	4029a8 <_printf_i+0x30>
  4029ba:	6821      	ldr	r1, [r4, #0]
  4029bc:	681a      	ldr	r2, [r3, #0]
  4029be:	f011 0f80 	tst.w	r1, #128	; 0x80
  4029c2:	d023      	beq.n	402a0c <_printf_i+0x94>
  4029c4:	1d11      	adds	r1, r2, #4
  4029c6:	6019      	str	r1, [r3, #0]
  4029c8:	6813      	ldr	r3, [r2, #0]
  4029ca:	e027      	b.n	402a1c <_printf_i+0xa4>
  4029cc:	2a73      	cmp	r2, #115	; 0x73
  4029ce:	f000 80b4 	beq.w	402b3a <_printf_i+0x1c2>
  4029d2:	d808      	bhi.n	4029e6 <_printf_i+0x6e>
  4029d4:	2a6f      	cmp	r2, #111	; 0x6f
  4029d6:	d02a      	beq.n	402a2e <_printf_i+0xb6>
  4029d8:	2a70      	cmp	r2, #112	; 0x70
  4029da:	d1e5      	bne.n	4029a8 <_printf_i+0x30>
  4029dc:	680a      	ldr	r2, [r1, #0]
  4029de:	f042 0220 	orr.w	r2, r2, #32
  4029e2:	600a      	str	r2, [r1, #0]
  4029e4:	e003      	b.n	4029ee <_printf_i+0x76>
  4029e6:	2a75      	cmp	r2, #117	; 0x75
  4029e8:	d021      	beq.n	402a2e <_printf_i+0xb6>
  4029ea:	2a78      	cmp	r2, #120	; 0x78
  4029ec:	d1dc      	bne.n	4029a8 <_printf_i+0x30>
  4029ee:	2278      	movs	r2, #120	; 0x78
  4029f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4029f4:	496e      	ldr	r1, [pc, #440]	; (402bb0 <_printf_i+0x238>)
  4029f6:	e064      	b.n	402ac2 <_printf_i+0x14a>
  4029f8:	681a      	ldr	r2, [r3, #0]
  4029fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4029fe:	1d11      	adds	r1, r2, #4
  402a00:	6019      	str	r1, [r3, #0]
  402a02:	6813      	ldr	r3, [r2, #0]
  402a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402a08:	2301      	movs	r3, #1
  402a0a:	e0a3      	b.n	402b54 <_printf_i+0x1dc>
  402a0c:	f011 0f40 	tst.w	r1, #64	; 0x40
  402a10:	f102 0104 	add.w	r1, r2, #4
  402a14:	6019      	str	r1, [r3, #0]
  402a16:	d0d7      	beq.n	4029c8 <_printf_i+0x50>
  402a18:	f9b2 3000 	ldrsh.w	r3, [r2]
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	da03      	bge.n	402a28 <_printf_i+0xb0>
  402a20:	222d      	movs	r2, #45	; 0x2d
  402a22:	425b      	negs	r3, r3
  402a24:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402a28:	4962      	ldr	r1, [pc, #392]	; (402bb4 <_printf_i+0x23c>)
  402a2a:	220a      	movs	r2, #10
  402a2c:	e017      	b.n	402a5e <_printf_i+0xe6>
  402a2e:	6820      	ldr	r0, [r4, #0]
  402a30:	6819      	ldr	r1, [r3, #0]
  402a32:	f010 0f80 	tst.w	r0, #128	; 0x80
  402a36:	d003      	beq.n	402a40 <_printf_i+0xc8>
  402a38:	1d08      	adds	r0, r1, #4
  402a3a:	6018      	str	r0, [r3, #0]
  402a3c:	680b      	ldr	r3, [r1, #0]
  402a3e:	e006      	b.n	402a4e <_printf_i+0xd6>
  402a40:	f010 0f40 	tst.w	r0, #64	; 0x40
  402a44:	f101 0004 	add.w	r0, r1, #4
  402a48:	6018      	str	r0, [r3, #0]
  402a4a:	d0f7      	beq.n	402a3c <_printf_i+0xc4>
  402a4c:	880b      	ldrh	r3, [r1, #0]
  402a4e:	4959      	ldr	r1, [pc, #356]	; (402bb4 <_printf_i+0x23c>)
  402a50:	2a6f      	cmp	r2, #111	; 0x6f
  402a52:	bf14      	ite	ne
  402a54:	220a      	movne	r2, #10
  402a56:	2208      	moveq	r2, #8
  402a58:	2000      	movs	r0, #0
  402a5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402a5e:	6865      	ldr	r5, [r4, #4]
  402a60:	60a5      	str	r5, [r4, #8]
  402a62:	2d00      	cmp	r5, #0
  402a64:	f2c0 809c 	blt.w	402ba0 <_printf_i+0x228>
  402a68:	6820      	ldr	r0, [r4, #0]
  402a6a:	f020 0004 	bic.w	r0, r0, #4
  402a6e:	6020      	str	r0, [r4, #0]
  402a70:	2b00      	cmp	r3, #0
  402a72:	d13f      	bne.n	402af4 <_printf_i+0x17c>
  402a74:	2d00      	cmp	r5, #0
  402a76:	f040 8095 	bne.w	402ba4 <_printf_i+0x22c>
  402a7a:	4675      	mov	r5, lr
  402a7c:	2a08      	cmp	r2, #8
  402a7e:	d10b      	bne.n	402a98 <_printf_i+0x120>
  402a80:	6823      	ldr	r3, [r4, #0]
  402a82:	07da      	lsls	r2, r3, #31
  402a84:	d508      	bpl.n	402a98 <_printf_i+0x120>
  402a86:	6923      	ldr	r3, [r4, #16]
  402a88:	6862      	ldr	r2, [r4, #4]
  402a8a:	429a      	cmp	r2, r3
  402a8c:	bfde      	ittt	le
  402a8e:	2330      	movle	r3, #48	; 0x30
  402a90:	f805 3c01 	strble.w	r3, [r5, #-1]
  402a94:	f105 35ff 	addle.w	r5, r5, #4294967295
  402a98:	ebae 0305 	sub.w	r3, lr, r5
  402a9c:	6123      	str	r3, [r4, #16]
  402a9e:	f8cd 8000 	str.w	r8, [sp]
  402aa2:	463b      	mov	r3, r7
  402aa4:	aa03      	add	r2, sp, #12
  402aa6:	4621      	mov	r1, r4
  402aa8:	4630      	mov	r0, r6
  402aaa:	f7ff feef 	bl	40288c <_printf_common>
  402aae:	3001      	adds	r0, #1
  402ab0:	d155      	bne.n	402b5e <_printf_i+0x1e6>
  402ab2:	f04f 30ff 	mov.w	r0, #4294967295
  402ab6:	b005      	add	sp, #20
  402ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402abc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402ac0:	493c      	ldr	r1, [pc, #240]	; (402bb4 <_printf_i+0x23c>)
  402ac2:	6822      	ldr	r2, [r4, #0]
  402ac4:	6818      	ldr	r0, [r3, #0]
  402ac6:	f012 0f80 	tst.w	r2, #128	; 0x80
  402aca:	f100 0504 	add.w	r5, r0, #4
  402ace:	601d      	str	r5, [r3, #0]
  402ad0:	d001      	beq.n	402ad6 <_printf_i+0x15e>
  402ad2:	6803      	ldr	r3, [r0, #0]
  402ad4:	e002      	b.n	402adc <_printf_i+0x164>
  402ad6:	0655      	lsls	r5, r2, #25
  402ad8:	d5fb      	bpl.n	402ad2 <_printf_i+0x15a>
  402ada:	8803      	ldrh	r3, [r0, #0]
  402adc:	07d0      	lsls	r0, r2, #31
  402ade:	bf44      	itt	mi
  402ae0:	f042 0220 	orrmi.w	r2, r2, #32
  402ae4:	6022      	strmi	r2, [r4, #0]
  402ae6:	b91b      	cbnz	r3, 402af0 <_printf_i+0x178>
  402ae8:	6822      	ldr	r2, [r4, #0]
  402aea:	f022 0220 	bic.w	r2, r2, #32
  402aee:	6022      	str	r2, [r4, #0]
  402af0:	2210      	movs	r2, #16
  402af2:	e7b1      	b.n	402a58 <_printf_i+0xe0>
  402af4:	4675      	mov	r5, lr
  402af6:	fbb3 f0f2 	udiv	r0, r3, r2
  402afa:	fb02 3310 	mls	r3, r2, r0, r3
  402afe:	5ccb      	ldrb	r3, [r1, r3]
  402b00:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402b04:	4603      	mov	r3, r0
  402b06:	2800      	cmp	r0, #0
  402b08:	d1f5      	bne.n	402af6 <_printf_i+0x17e>
  402b0a:	e7b7      	b.n	402a7c <_printf_i+0x104>
  402b0c:	6808      	ldr	r0, [r1, #0]
  402b0e:	681a      	ldr	r2, [r3, #0]
  402b10:	6949      	ldr	r1, [r1, #20]
  402b12:	f010 0f80 	tst.w	r0, #128	; 0x80
  402b16:	d004      	beq.n	402b22 <_printf_i+0x1aa>
  402b18:	1d10      	adds	r0, r2, #4
  402b1a:	6018      	str	r0, [r3, #0]
  402b1c:	6813      	ldr	r3, [r2, #0]
  402b1e:	6019      	str	r1, [r3, #0]
  402b20:	e007      	b.n	402b32 <_printf_i+0x1ba>
  402b22:	f010 0f40 	tst.w	r0, #64	; 0x40
  402b26:	f102 0004 	add.w	r0, r2, #4
  402b2a:	6018      	str	r0, [r3, #0]
  402b2c:	6813      	ldr	r3, [r2, #0]
  402b2e:	d0f6      	beq.n	402b1e <_printf_i+0x1a6>
  402b30:	8019      	strh	r1, [r3, #0]
  402b32:	2300      	movs	r3, #0
  402b34:	6123      	str	r3, [r4, #16]
  402b36:	4675      	mov	r5, lr
  402b38:	e7b1      	b.n	402a9e <_printf_i+0x126>
  402b3a:	681a      	ldr	r2, [r3, #0]
  402b3c:	1d11      	adds	r1, r2, #4
  402b3e:	6019      	str	r1, [r3, #0]
  402b40:	6815      	ldr	r5, [r2, #0]
  402b42:	6862      	ldr	r2, [r4, #4]
  402b44:	2100      	movs	r1, #0
  402b46:	4628      	mov	r0, r5
  402b48:	f000 f8d2 	bl	402cf0 <memchr>
  402b4c:	b108      	cbz	r0, 402b52 <_printf_i+0x1da>
  402b4e:	1b40      	subs	r0, r0, r5
  402b50:	6060      	str	r0, [r4, #4]
  402b52:	6863      	ldr	r3, [r4, #4]
  402b54:	6123      	str	r3, [r4, #16]
  402b56:	2300      	movs	r3, #0
  402b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402b5c:	e79f      	b.n	402a9e <_printf_i+0x126>
  402b5e:	6923      	ldr	r3, [r4, #16]
  402b60:	462a      	mov	r2, r5
  402b62:	4639      	mov	r1, r7
  402b64:	4630      	mov	r0, r6
  402b66:	47c0      	blx	r8
  402b68:	3001      	adds	r0, #1
  402b6a:	d0a2      	beq.n	402ab2 <_printf_i+0x13a>
  402b6c:	6823      	ldr	r3, [r4, #0]
  402b6e:	079b      	lsls	r3, r3, #30
  402b70:	d507      	bpl.n	402b82 <_printf_i+0x20a>
  402b72:	2500      	movs	r5, #0
  402b74:	f104 0919 	add.w	r9, r4, #25
  402b78:	68e3      	ldr	r3, [r4, #12]
  402b7a:	9a03      	ldr	r2, [sp, #12]
  402b7c:	1a9b      	subs	r3, r3, r2
  402b7e:	429d      	cmp	r5, r3
  402b80:	db05      	blt.n	402b8e <_printf_i+0x216>
  402b82:	68e0      	ldr	r0, [r4, #12]
  402b84:	9b03      	ldr	r3, [sp, #12]
  402b86:	4298      	cmp	r0, r3
  402b88:	bfb8      	it	lt
  402b8a:	4618      	movlt	r0, r3
  402b8c:	e793      	b.n	402ab6 <_printf_i+0x13e>
  402b8e:	2301      	movs	r3, #1
  402b90:	464a      	mov	r2, r9
  402b92:	4639      	mov	r1, r7
  402b94:	4630      	mov	r0, r6
  402b96:	47c0      	blx	r8
  402b98:	3001      	adds	r0, #1
  402b9a:	d08a      	beq.n	402ab2 <_printf_i+0x13a>
  402b9c:	3501      	adds	r5, #1
  402b9e:	e7eb      	b.n	402b78 <_printf_i+0x200>
  402ba0:	2b00      	cmp	r3, #0
  402ba2:	d1a7      	bne.n	402af4 <_printf_i+0x17c>
  402ba4:	780b      	ldrb	r3, [r1, #0]
  402ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402bae:	e765      	b.n	402a7c <_printf_i+0x104>
  402bb0:	00403046 	.word	0x00403046
  402bb4:	00403035 	.word	0x00403035

00402bb8 <__sread>:
  402bb8:	b510      	push	{r4, lr}
  402bba:	460c      	mov	r4, r1
  402bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bc0:	f000 f8e6 	bl	402d90 <_read_r>
  402bc4:	2800      	cmp	r0, #0
  402bc6:	bfab      	itete	ge
  402bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  402bca:	89a3      	ldrhlt	r3, [r4, #12]
  402bcc:	181b      	addge	r3, r3, r0
  402bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  402bd2:	bfac      	ite	ge
  402bd4:	6563      	strge	r3, [r4, #84]	; 0x54
  402bd6:	81a3      	strhlt	r3, [r4, #12]
  402bd8:	bd10      	pop	{r4, pc}

00402bda <__swrite>:
  402bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bde:	461f      	mov	r7, r3
  402be0:	898b      	ldrh	r3, [r1, #12]
  402be2:	05db      	lsls	r3, r3, #23
  402be4:	4605      	mov	r5, r0
  402be6:	460c      	mov	r4, r1
  402be8:	4616      	mov	r6, r2
  402bea:	d505      	bpl.n	402bf8 <__swrite+0x1e>
  402bec:	2302      	movs	r3, #2
  402bee:	2200      	movs	r2, #0
  402bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402bf4:	f000 f868 	bl	402cc8 <_lseek_r>
  402bf8:	89a3      	ldrh	r3, [r4, #12]
  402bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402c02:	81a3      	strh	r3, [r4, #12]
  402c04:	4632      	mov	r2, r6
  402c06:	463b      	mov	r3, r7
  402c08:	4628      	mov	r0, r5
  402c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402c0e:	f000 b817 	b.w	402c40 <_write_r>

00402c12 <__sseek>:
  402c12:	b510      	push	{r4, lr}
  402c14:	460c      	mov	r4, r1
  402c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c1a:	f000 f855 	bl	402cc8 <_lseek_r>
  402c1e:	1c43      	adds	r3, r0, #1
  402c20:	89a3      	ldrh	r3, [r4, #12]
  402c22:	bf15      	itete	ne
  402c24:	6560      	strne	r0, [r4, #84]	; 0x54
  402c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402c2e:	81a3      	strheq	r3, [r4, #12]
  402c30:	bf18      	it	ne
  402c32:	81a3      	strhne	r3, [r4, #12]
  402c34:	bd10      	pop	{r4, pc}

00402c36 <__sclose>:
  402c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402c3a:	f000 b813 	b.w	402c64 <_close_r>
	...

00402c40 <_write_r>:
  402c40:	b538      	push	{r3, r4, r5, lr}
  402c42:	4c07      	ldr	r4, [pc, #28]	; (402c60 <_write_r+0x20>)
  402c44:	4605      	mov	r5, r0
  402c46:	4608      	mov	r0, r1
  402c48:	4611      	mov	r1, r2
  402c4a:	2200      	movs	r2, #0
  402c4c:	6022      	str	r2, [r4, #0]
  402c4e:	461a      	mov	r2, r3
  402c50:	f7fe ffbc 	bl	401bcc <_write>
  402c54:	1c43      	adds	r3, r0, #1
  402c56:	d102      	bne.n	402c5e <_write_r+0x1e>
  402c58:	6823      	ldr	r3, [r4, #0]
  402c5a:	b103      	cbz	r3, 402c5e <_write_r+0x1e>
  402c5c:	602b      	str	r3, [r5, #0]
  402c5e:	bd38      	pop	{r3, r4, r5, pc}
  402c60:	20400120 	.word	0x20400120

00402c64 <_close_r>:
  402c64:	b538      	push	{r3, r4, r5, lr}
  402c66:	4c06      	ldr	r4, [pc, #24]	; (402c80 <_close_r+0x1c>)
  402c68:	2300      	movs	r3, #0
  402c6a:	4605      	mov	r5, r0
  402c6c:	4608      	mov	r0, r1
  402c6e:	6023      	str	r3, [r4, #0]
  402c70:	f7fd ffb2 	bl	400bd8 <_close>
  402c74:	1c43      	adds	r3, r0, #1
  402c76:	d102      	bne.n	402c7e <_close_r+0x1a>
  402c78:	6823      	ldr	r3, [r4, #0]
  402c7a:	b103      	cbz	r3, 402c7e <_close_r+0x1a>
  402c7c:	602b      	str	r3, [r5, #0]
  402c7e:	bd38      	pop	{r3, r4, r5, pc}
  402c80:	20400120 	.word	0x20400120

00402c84 <_fstat_r>:
  402c84:	b538      	push	{r3, r4, r5, lr}
  402c86:	4c07      	ldr	r4, [pc, #28]	; (402ca4 <_fstat_r+0x20>)
  402c88:	2300      	movs	r3, #0
  402c8a:	4605      	mov	r5, r0
  402c8c:	4608      	mov	r0, r1
  402c8e:	4611      	mov	r1, r2
  402c90:	6023      	str	r3, [r4, #0]
  402c92:	f7fd ffa4 	bl	400bde <_fstat>
  402c96:	1c43      	adds	r3, r0, #1
  402c98:	d102      	bne.n	402ca0 <_fstat_r+0x1c>
  402c9a:	6823      	ldr	r3, [r4, #0]
  402c9c:	b103      	cbz	r3, 402ca0 <_fstat_r+0x1c>
  402c9e:	602b      	str	r3, [r5, #0]
  402ca0:	bd38      	pop	{r3, r4, r5, pc}
  402ca2:	bf00      	nop
  402ca4:	20400120 	.word	0x20400120

00402ca8 <_isatty_r>:
  402ca8:	b538      	push	{r3, r4, r5, lr}
  402caa:	4c06      	ldr	r4, [pc, #24]	; (402cc4 <_isatty_r+0x1c>)
  402cac:	2300      	movs	r3, #0
  402cae:	4605      	mov	r5, r0
  402cb0:	4608      	mov	r0, r1
  402cb2:	6023      	str	r3, [r4, #0]
  402cb4:	f7fd ff98 	bl	400be8 <_isatty>
  402cb8:	1c43      	adds	r3, r0, #1
  402cba:	d102      	bne.n	402cc2 <_isatty_r+0x1a>
  402cbc:	6823      	ldr	r3, [r4, #0]
  402cbe:	b103      	cbz	r3, 402cc2 <_isatty_r+0x1a>
  402cc0:	602b      	str	r3, [r5, #0]
  402cc2:	bd38      	pop	{r3, r4, r5, pc}
  402cc4:	20400120 	.word	0x20400120

00402cc8 <_lseek_r>:
  402cc8:	b538      	push	{r3, r4, r5, lr}
  402cca:	4c07      	ldr	r4, [pc, #28]	; (402ce8 <_lseek_r+0x20>)
  402ccc:	4605      	mov	r5, r0
  402cce:	4608      	mov	r0, r1
  402cd0:	4611      	mov	r1, r2
  402cd2:	2200      	movs	r2, #0
  402cd4:	6022      	str	r2, [r4, #0]
  402cd6:	461a      	mov	r2, r3
  402cd8:	f7fd ff88 	bl	400bec <_lseek>
  402cdc:	1c43      	adds	r3, r0, #1
  402cde:	d102      	bne.n	402ce6 <_lseek_r+0x1e>
  402ce0:	6823      	ldr	r3, [r4, #0]
  402ce2:	b103      	cbz	r3, 402ce6 <_lseek_r+0x1e>
  402ce4:	602b      	str	r3, [r5, #0]
  402ce6:	bd38      	pop	{r3, r4, r5, pc}
  402ce8:	20400120 	.word	0x20400120
  402cec:	00000000 	.word	0x00000000

00402cf0 <memchr>:
  402cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402cf4:	2a10      	cmp	r2, #16
  402cf6:	db2b      	blt.n	402d50 <memchr+0x60>
  402cf8:	f010 0f07 	tst.w	r0, #7
  402cfc:	d008      	beq.n	402d10 <memchr+0x20>
  402cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
  402d02:	3a01      	subs	r2, #1
  402d04:	428b      	cmp	r3, r1
  402d06:	d02d      	beq.n	402d64 <memchr+0x74>
  402d08:	f010 0f07 	tst.w	r0, #7
  402d0c:	b342      	cbz	r2, 402d60 <memchr+0x70>
  402d0e:	d1f6      	bne.n	402cfe <memchr+0xe>
  402d10:	b4f0      	push	{r4, r5, r6, r7}
  402d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402d1a:	f022 0407 	bic.w	r4, r2, #7
  402d1e:	f07f 0700 	mvns.w	r7, #0
  402d22:	2300      	movs	r3, #0
  402d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402d28:	3c08      	subs	r4, #8
  402d2a:	ea85 0501 	eor.w	r5, r5, r1
  402d2e:	ea86 0601 	eor.w	r6, r6, r1
  402d32:	fa85 f547 	uadd8	r5, r5, r7
  402d36:	faa3 f587 	sel	r5, r3, r7
  402d3a:	fa86 f647 	uadd8	r6, r6, r7
  402d3e:	faa5 f687 	sel	r6, r5, r7
  402d42:	b98e      	cbnz	r6, 402d68 <memchr+0x78>
  402d44:	d1ee      	bne.n	402d24 <memchr+0x34>
  402d46:	bcf0      	pop	{r4, r5, r6, r7}
  402d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402d4c:	f002 0207 	and.w	r2, r2, #7
  402d50:	b132      	cbz	r2, 402d60 <memchr+0x70>
  402d52:	f810 3b01 	ldrb.w	r3, [r0], #1
  402d56:	3a01      	subs	r2, #1
  402d58:	ea83 0301 	eor.w	r3, r3, r1
  402d5c:	b113      	cbz	r3, 402d64 <memchr+0x74>
  402d5e:	d1f8      	bne.n	402d52 <memchr+0x62>
  402d60:	2000      	movs	r0, #0
  402d62:	4770      	bx	lr
  402d64:	3801      	subs	r0, #1
  402d66:	4770      	bx	lr
  402d68:	2d00      	cmp	r5, #0
  402d6a:	bf06      	itte	eq
  402d6c:	4635      	moveq	r5, r6
  402d6e:	3803      	subeq	r0, #3
  402d70:	3807      	subne	r0, #7
  402d72:	f015 0f01 	tst.w	r5, #1
  402d76:	d107      	bne.n	402d88 <memchr+0x98>
  402d78:	3001      	adds	r0, #1
  402d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402d7e:	bf02      	ittt	eq
  402d80:	3001      	addeq	r0, #1
  402d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402d86:	3001      	addeq	r0, #1
  402d88:	bcf0      	pop	{r4, r5, r6, r7}
  402d8a:	3801      	subs	r0, #1
  402d8c:	4770      	bx	lr
  402d8e:	bf00      	nop

00402d90 <_read_r>:
  402d90:	b538      	push	{r3, r4, r5, lr}
  402d92:	4c07      	ldr	r4, [pc, #28]	; (402db0 <_read_r+0x20>)
  402d94:	4605      	mov	r5, r0
  402d96:	4608      	mov	r0, r1
  402d98:	4611      	mov	r1, r2
  402d9a:	2200      	movs	r2, #0
  402d9c:	6022      	str	r2, [r4, #0]
  402d9e:	461a      	mov	r2, r3
  402da0:	f7fe ff02 	bl	401ba8 <_read>
  402da4:	1c43      	adds	r3, r0, #1
  402da6:	d102      	bne.n	402dae <_read_r+0x1e>
  402da8:	6823      	ldr	r3, [r4, #0]
  402daa:	b103      	cbz	r3, 402dae <_read_r+0x1e>
  402dac:	602b      	str	r3, [r5, #0]
  402dae:	bd38      	pop	{r3, r4, r5, pc}
  402db0:	20400120 	.word	0x20400120
  402db4:	682f2e2e 	.word	0x682f2e2e
  402db8:	732f6c61 	.word	0x732f6c61
  402dbc:	682f6372 	.word	0x682f6372
  402dc0:	695f6c61 	.word	0x695f6c61
  402dc4:	6d5f6332 	.word	0x6d5f6332
  402dc8:	6e79735f 	.word	0x6e79735f
  402dcc:	00632e63 	.word	0x00632e63
  402dd0:	682f2e2e 	.word	0x682f2e2e
  402dd4:	732f6c61 	.word	0x732f6c61
  402dd8:	682f6372 	.word	0x682f6372
  402ddc:	695f6c61 	.word	0x695f6c61
  402de0:	00632e6f 	.word	0x00632e6f
  402de4:	682f2e2e 	.word	0x682f2e2e
  402de8:	732f6c61 	.word	0x732f6c61
  402dec:	682f6372 	.word	0x682f6372
  402df0:	705f6c61 	.word	0x705f6c61
  402df4:	632e6d77 	.word	0x632e6d77
  402df8:	00000000 	.word	0x00000000
  402dfc:	682f2e2e 	.word	0x682f2e2e
  402e00:	732f6c61 	.word	0x732f6c61
  402e04:	682f6372 	.word	0x682f6372
  402e08:	735f6c61 	.word	0x735f6c61
  402e0c:	6d5f6970 	.word	0x6d5f6970
  402e10:	6e79735f 	.word	0x6e79735f
  402e14:	00632e63 	.word	0x00632e63
  402e18:	682f2e2e 	.word	0x682f2e2e
  402e1c:	732f6c61 	.word	0x732f6c61
  402e20:	682f6372 	.word	0x682f6372
  402e24:	755f6c61 	.word	0x755f6c61
  402e28:	74726173 	.word	0x74726173
  402e2c:	6e79735f 	.word	0x6e79735f
  402e30:	00632e63 	.word	0x00632e63

00402e34 <_ext_irq>:
  402e34:	00000000 00000020 00000020 00000020     .... ... ... ...
	...
  402e4c:	00000020 00000001 00000002 00000002      ...............
  402e5c:	00000002 00000000 00000000 00000002     ................

00402e6c <_pio_irq_n>:
  402e6c:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  402e7c:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  402e8c:	00000000                                ....

00402e90 <_pwms>:
  402e90:	40020000 0000001f 00010001 00000001     ...@............
  402ea0:	00000001 000000ff 00000000 00000004     ................
	...
  402ebc:	00000004 00402ecc 00000000 204000a0     ......@.......@ 

00402ecc <_ch_cfg0>:
  402ecc:	00000000 00000208 00000400 00000200     ................
  402edc:	00000001 00000208 00000400 00000200     ................
  402eec:	00000002 00000208 00000400 00000200     ................
  402efc:	00000003 00000208 00000400 00000200     ................
  402f0c:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  402f1c:	632e6d77 00000000                       wm.c....

00402f24 <spi_regs>:
  402f24:	00000000 80000000 00000001 0496fa02     ................
  402f34:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  402f44:	735f6c70 632e6970 00000000              pl_spi.c....

00402f50 <_i2cm_sync_cfgs>:
  402f50:	40018000 00000020 00000000 00000000     ...@ ...........
  402f60:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  402f70:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  402f80:	00000000                                ....

00402f84 <_usarts>:
  402f84:	00000001 001008c0 000100f4 682f2e2e     ............../h
  402f94:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  402fa4:	632e7472 00000000 bbccddee 000000aa     rt.c............
  402fb4:	78323025 00000020 0000000d              %02x .......

00402fc0 <_global_impure_ptr>:
  402fc0:	20400004                                ..@ 

00402fc4 <__sf_fake_stderr>:
	...

00402fe4 <__sf_fake_stdin>:
	...

00403004 <__sf_fake_stdout>:
	...
  403024:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  403034:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  403044:	31300046 35343332 39383736 64636261     F.0123456789abcd
  403054:	00006665                                ef..

00403058 <_init>:
  403058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40305a:	bf00      	nop
  40305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40305e:	bc08      	pop	{r3}
  403060:	469e      	mov	lr, r3
  403062:	4770      	bx	lr

00403064 <__init_array_start>:
  403064:	0040018d 	.word	0x0040018d

00403068 <_fini>:
  403068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40306a:	bf00      	nop
  40306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40306e:	bc08      	pop	{r3}
  403070:	469e      	mov	lr, r3
  403072:	4770      	bx	lr

00403074 <__fini_array_start>:
  403074:	00400169 	.word	0x00400169
